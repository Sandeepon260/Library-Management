package AutomatedTesting;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class Book0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        java.time.LocalDate localDate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate7, (int) (byte) -1, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        java.lang.Class<?> wildcardClass7 = book6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        java.time.LocalDate localDate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate9, (int) (short) -1, "Book");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean16 = book15.isOverdue();
        items.Book book23 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean24 = book23.isOverdue();
        items.Book book31 = new items.Book("", "", true, true, "", "hi!");
        book31.returnItem();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        java.lang.String str60 = book57.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { book39, book48, book57, book67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book23, book31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        java.time.LocalDate localDate77 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate77, (int) '#', "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean7 = book6.isOverdue();
        java.lang.Class<?> wildcardClass8 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate10, (int) '#', "Book: hi! by . Location: hi!. Purchasable: true");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 162 + "'", int9 == 162);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.time.LocalDate localDate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate8, (int) (short) 100, "Book: hi! by . Location: hi!. Purchasable: true");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        int int8 = book6.getItemId();
        book6.setLocation("Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 198 + "'", int8 == 198);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        java.time.LocalDate localDate89 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate89, (int) (short) 1, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.getAuthor();
        java.util.List<items.LibraryItem> libraryItemList10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = book6.hasExceededBorrowingLimit(libraryItemList10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.Class<?> wildcardClass11 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isRented();
        java.lang.String str53 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=291, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=291, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.getAuthor();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate10, (int) (byte) 1, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate11, 0, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.Class<?> wildcardClass47 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getAuthor();
        java.lang.Class<?> wildcardClass11 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        int int10 = book6.getItemId();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate11, (int) '#', "LibraryItem [itemId=282, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 377 + "'", int10 == 377);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getAuthor();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate11, (int) (byte) -1, "LibraryItem [itemId=240, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        items.Book book6 = new items.Book("LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book");
        java.time.LocalDate localDate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate7, 245, "LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        java.lang.Class<?> wildcardClass9 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        items.Book book6 = new items.Book("LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=251, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book13 = new items.Book("", "", true, true, "", "hi!");
        book13.returnItem();
        boolean boolean15 = book13.isPurchasable();
        items.Book book22 = new items.Book("hi!", "", true, false, "hi!", "");
        book22.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book31 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean32 = book31.isOverdue();
        items.Book book39 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean40 = book39.isOverdue();
        items.Book book47 = new items.Book("", "", true, true, "", "hi!");
        book47.returnItem();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        book64.returnItem();
        java.lang.String str66 = book64.getAuthor();
        items.Book book73 = new items.Book("", "", true, true, "", "hi!");
        book73.returnItem();
        java.lang.String str75 = book73.getAuthor();
        java.lang.String str76 = book73.getAuthor();
        items.Book book83 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book55, book64, book73, book83 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book47.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { book39, book47 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = book13.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        java.lang.String str95 = book6.getLocation();
        book6.setLocation("LibraryItem [itemId=360, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str95, "LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        java.lang.String str10 = book6.getLocation();
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        items.Book book25 = new items.Book("", "", true, true, "", "hi!");
        book25.returnItem();
        java.lang.String str27 = book25.getAuthor();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        java.lang.String str36 = book34.getAuthor();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        java.lang.String str45 = book43.getAuthor();
        java.lang.String str46 = book43.getAuthor();
        items.Book book53 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { book25, book34, book43, book53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        java.lang.Class<?> wildcardClass59 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        java.lang.String str10 = book6.getDetails();
        java.lang.String str11 = book6.getAuthor();
        java.lang.Class<?> wildcardClass12 = book6.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 433 + "'", int9 == 433);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        int int10 = book6.getItemId();
        java.lang.String str11 = book6.getLocation();
        boolean boolean12 = book6.isRented();
        java.lang.String str13 = book6.getTitle();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 473 + "'", int10 == 473);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        java.time.LocalDate localDate49 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate49, 10, "LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=500, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=500, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        java.time.LocalDate localDate87 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate87, (int) (short) 0, "LibraryItem [itemId=251, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        java.lang.String str11 = book6.getPrice();
        java.lang.String str12 = book6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass13 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        double double11 = book6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass12 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getDetails();
        java.lang.Class<?> wildcardClass9 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str8, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getItemType();
        java.lang.Class<?> wildcardClass11 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book" + "'", str10, "Book");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        java.lang.String str9 = book6.toString();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate10, 384, "LibraryItem [itemId=281, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=576, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=576, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        items.Book book6 = new items.Book("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "Book", "LibraryItem [itemId=131, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setLocation("LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str53 = book6.getDetails();
        java.lang.String str54 = book6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass55 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=629, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=629, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str53, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str54, "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean16 = book15.isOverdue();
        items.Book book23 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean24 = book23.isOverdue();
        items.Book book31 = new items.Book("", "", true, true, "", "hi!");
        book31.returnItem();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        java.lang.String str60 = book57.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { book39, book48, book57, book67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book23, book31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = book6.isPurchasable();
        java.time.LocalDate localDate78 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate78, (int) (short) 100, "LibraryItem [itemId=596, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        java.lang.String str52 = book6.getTitle();
        java.lang.String str53 = book6.getLocation();
        int int54 = book6.getItemId();
        java.lang.String str55 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=677, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=677, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 677 + "'", int54 == 677);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        boolean boolean49 = book6.isPurchasable();
        java.lang.Class<?> wildcardClass50 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        java.lang.String str48 = book6.getPrice();
        java.time.LocalDate localDate49 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate49, 1, "LibraryItem [itemId=397, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        double double7 = book6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass8 = book6.getClass();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getAuthor();
        java.lang.String str11 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: false" + "'", str11, "Book: hi! by . Location: hi!. Purchasable: false");
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        boolean boolean49 = book6.isPurchasable();
        boolean boolean50 = book6.isOverdue();
        java.lang.Class<?> wildcardClass51 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        items.Book book6 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass10 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        book6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        java.lang.String str10 = book6.getDetails();
        java.lang.String str11 = book6.getPrice();
        java.util.List<items.LibraryItem> libraryItemList12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = book6.hasBorrowingPrivileges(libraryItemList12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 771 + "'", int9 == 771);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        boolean boolean89 = book6.isPurchasable();
        java.lang.String str90 = book6.getItemType();
        java.lang.Class<?> wildcardClass91 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Book" + "'", str90, "Book");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        items.Book book65 = new items.Book("", "", true, true, "", "hi!");
        book65.returnItem();
        java.lang.String str67 = book65.getAuthor();
        items.Book book74 = new items.Book("", "", true, true, "", "hi!");
        book74.returnItem();
        java.lang.String str76 = book74.getAuthor();
        items.Book book83 = new items.Book("", "", true, true, "", "hi!");
        book83.returnItem();
        java.lang.String str85 = book83.getAuthor();
        java.lang.String str86 = book83.getAuthor();
        items.Book book93 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray94 = new items.LibraryItem[] { book65, book74, book83, book93 };
        java.util.ArrayList<items.LibraryItem> libraryItemList95 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList95, libraryItemArray94);
        boolean boolean97 = book57.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList95);
        boolean boolean98 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList95);
        java.lang.String str99 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=814, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=814, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "hi!" + "'", str99, "hi!");
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        boolean boolean11 = book6.isPurchasable();
        java.util.List<items.LibraryItem> libraryItemList12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = book6.hasBorrowingPrivileges(libraryItemList12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        boolean boolean9 = book6.isPurchasable();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate10, (int) (short) 0, "Book:  by hi!. Location: . Purchasable: false");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isOverdue();
        boolean boolean53 = book6.isPurchasable();
        int int54 = book6.getItemId();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=933, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=933, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 933 + "'", int54 == 933);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        java.lang.String str10 = book6.getLocation();
        java.lang.String str11 = book6.getLocation();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate12, 903, "Book: hi! by . Location: hi!. Purchasable: true");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        int int9 = book6.getItemId();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate10, 495, "LibraryItem [itemId=939, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 947 + "'", int9 == 947);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        items.Book book25 = new items.Book("", "", true, true, "", "hi!");
        book25.returnItem();
        java.lang.String str27 = book25.getAuthor();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        java.lang.String str36 = book34.getAuthor();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        java.lang.String str45 = book43.getAuthor();
        java.lang.String str46 = book43.getAuthor();
        items.Book book53 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { book25, book34, book43, book53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        java.lang.Class<?> wildcardClass59 = libraryItemList55.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        book6.setLocation("");
        java.lang.String str12 = book6.getTitle();
        java.lang.Class<?> wildcardClass13 = book6.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 968 + "'", int9 == 968);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        items.Book book6 = new items.Book("LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", false, true, "", "Book:  by hi!. Location: . Purchasable: true");
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book15.setIsPurchasable(false);
        java.lang.String str18 = book15.toString();
        java.lang.String str19 = book15.getTitle();
        items.Book book26 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str27 = book26.getDetails();
        java.lang.String str28 = book26.getDetails();
        boolean boolean29 = book26.isOverdue();
        items.Book book36 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean37 = book36.isOverdue();
        items.Book book44 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean45 = book44.isOverdue();
        items.Book book52 = new items.Book("", "", true, true, "", "hi!");
        book52.returnItem();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        items.Book book69 = new items.Book("", "", true, true, "", "hi!");
        book69.returnItem();
        java.lang.String str71 = book69.getAuthor();
        items.Book book78 = new items.Book("", "", true, true, "", "hi!");
        book78.returnItem();
        java.lang.String str80 = book78.getAuthor();
        java.lang.String str81 = book78.getAuthor();
        items.Book book88 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray89 = new items.LibraryItem[] { book60, book69, book78, book88 };
        java.util.ArrayList<items.LibraryItem> libraryItemList90 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList90, libraryItemArray89);
        boolean boolean92 = book52.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList90);
        items.LibraryItem[] libraryItemArray93 = new items.LibraryItem[] { book44, book52 };
        java.util.ArrayList<items.LibraryItem> libraryItemList94 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList94, libraryItemArray93);
        boolean boolean96 = book36.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean97 = book26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean98 = book15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean99 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "LibraryItem [itemId=987, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str18, "LibraryItem [itemId=987, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str27, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str28, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(libraryItemArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        items.Book book25 = new items.Book("", "", true, true, "", "hi!");
        book25.returnItem();
        java.lang.String str27 = book25.getAuthor();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        java.lang.String str36 = book34.getAuthor();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        java.lang.String str45 = book43.getAuthor();
        java.lang.String str46 = book43.getAuthor();
        items.Book book53 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { book25, book34, book43, book53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = book6.isRented();
        double double60 = book6.calculateOverduePenalty();
        java.lang.String str61 = book6.getPrice();
        java.time.LocalDate localDate62 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate62, (int) (byte) 0, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        book6.setLocation("");
        double double12 = book6.calculateOverduePenalty();
        boolean boolean13 = book6.isOverdue();
        java.time.LocalDate localDate14 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate14, 100, "LibraryItem [itemId=601, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1003 + "'", int9 == 1003);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        boolean boolean89 = book6.isPurchasable();
        java.lang.String str90 = book6.getItemType();
        java.time.LocalDate localDate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate91, 213, "LibraryItem [itemId=987, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Book" + "'", str90, "Book");
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        java.lang.String str48 = book6.getPrice();
        book6.setBorrowerEmail("LibraryItem [itemId=240, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass51 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        items.Book book65 = new items.Book("", "", true, true, "", "hi!");
        book65.returnItem();
        java.lang.String str67 = book65.getAuthor();
        items.Book book74 = new items.Book("", "", true, true, "", "hi!");
        book74.returnItem();
        java.lang.String str76 = book74.getAuthor();
        items.Book book83 = new items.Book("", "", true, true, "", "hi!");
        book83.returnItem();
        java.lang.String str85 = book83.getAuthor();
        java.lang.String str86 = book83.getAuthor();
        items.Book book93 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray94 = new items.LibraryItem[] { book65, book74, book83, book93 };
        java.util.ArrayList<items.LibraryItem> libraryItemList95 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList95, libraryItemArray94);
        boolean boolean97 = book57.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList95);
        boolean boolean98 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList95);
        boolean boolean99 = book6.isOverdue();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=1022, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=1022, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isOverdue();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate10, (int) (short) 10, "LibraryItem [itemId=746, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.time.LocalDate localDate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate9, 397, "LibraryItem [itemId=941, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.getTitle();
        java.lang.String str49 = book6.getItemType();
        java.time.LocalDate localDate50 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate50, 894, "LibraryItem [itemId=281, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Book" + "'", str49, "Book");
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getAuthor();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate11, 239, "LibraryItem [itemId=933, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isOverdue();
        boolean boolean11 = book6.isRented();
        java.lang.String str12 = book6.toString();
        java.lang.String str13 = book6.getItemType();
        java.lang.String str14 = book6.getTitle();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=1113, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=1113, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book" + "'", str13, "Book");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isOverdue();
        items.Book book16 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean17 = book16.isOverdue();
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        java.lang.String str42 = book40.getAuthor();
        items.Book book49 = new items.Book("", "", true, true, "", "hi!");
        book49.returnItem();
        java.lang.String str51 = book49.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        java.lang.String str61 = book58.getAuthor();
        items.Book book68 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray69 = new items.LibraryItem[] { book40, book49, book58, book68 };
        java.util.ArrayList<items.LibraryItem> libraryItemList70 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList70, libraryItemArray69);
        boolean boolean72 = book32.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        items.LibraryItem[] libraryItemArray73 = new items.LibraryItem[] { book24, book32 };
        java.util.ArrayList<items.LibraryItem> libraryItemList74 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList74, libraryItemArray73);
        boolean boolean76 = book16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList74);
        boolean boolean77 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList74);
        boolean boolean78 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(libraryItemArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isOverdue();
        java.lang.String str53 = book6.getDetails();
        java.time.LocalDate localDate54 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate54, 0, "LibraryItem [itemId=987, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=1173, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=1173, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str53, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        java.lang.Class<?> wildcardClass49 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=1293, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=1293, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        book6.setIsPurchasable(false);
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate12, 903, "LibraryItem [itemId=1014, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        items.Book book6 = new items.Book("LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "Book:  by hi!. Location: . Purchasable: false");
        java.lang.String str7 = book6.getPrice();
        java.lang.Class<?> wildcardClass8 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str7, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.getAuthor();
        java.lang.String str50 = book6.getTitle();
        java.util.List<items.LibraryItem> libraryItemList51 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = book6.hasExceededBorrowingLimit(libraryItemList51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        boolean boolean49 = book6.isPurchasable();
        java.lang.String str50 = book6.toString();
        boolean boolean51 = book6.isPurchasable();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        items.Book book75 = new items.Book("", "", true, true, "", "hi!");
        book75.returnItem();
        java.lang.String str77 = book75.getAuthor();
        items.Book book84 = new items.Book("", "", true, true, "", "hi!");
        book84.returnItem();
        java.lang.String str86 = book84.getAuthor();
        java.lang.String str87 = book84.getAuthor();
        items.Book book94 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray95 = new items.LibraryItem[] { book66, book75, book84, book94 };
        java.util.ArrayList<items.LibraryItem> libraryItemList96 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean97 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList96, libraryItemArray95);
        boolean boolean98 = book58.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList96);
        boolean boolean99 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList96);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "LibraryItem [itemId=1353, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str50, "LibraryItem [itemId=1353, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        java.lang.String str14 = book6.getTitle();
        book6.setLocation("LibraryItem [itemId=1154, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = book6.getTitle();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=1365, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=1365, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=1365, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=1365, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        java.lang.String str52 = book6.getTitle();
        boolean boolean53 = book6.isPurchasable();
        java.time.LocalDate localDate54 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate54, (int) (byte) 10, "Book: hi! by . Location: hi!. Purchasable: false");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=1372, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=1372, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        items.Book book6 = new items.Book("LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", true, false, "LibraryItem [itemId=950, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=987, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getItemType();
        java.lang.Class<?> wildcardClass8 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book" + "'", str7, "Book");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        items.Book book6 = new items.Book("LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book");
        book6.setIsPurchasable(true);
        book6.setIsPurchasable(true);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        boolean boolean49 = book6.isPurchasable();
        java.lang.String str50 = book6.toString();
        java.time.LocalDate localDate51 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate51, 1, "LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "LibraryItem [itemId=1427, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str50, "LibraryItem [itemId=1427, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setIsPurchasable(false);
        book6.setLocation("LibraryItem [itemId=951, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double13 = book6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean16 = book15.isOverdue();
        items.Book book23 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean24 = book23.isOverdue();
        items.Book book31 = new items.Book("", "", true, true, "", "hi!");
        book31.returnItem();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        java.lang.String str60 = book57.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { book39, book48, book57, book67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book23, book31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = book6.isPurchasable();
        java.lang.String str78 = book6.getItemType();
        book6.setBorrowerEmail("LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Book" + "'", str78, "Book");
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.toString();
        java.lang.String str9 = book6.getTitle();
        java.lang.Class<?> wildcardClass10 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1469, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1469, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        items.Book book6 = new items.Book("LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book:  by hi!. Location: . Purchasable: true", true, false, "Book: hi! by . Location: hi!. Purchasable: false", "LibraryItem [itemId=660, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.returnItem();
        boolean boolean8 = book6.isRented();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        boolean boolean89 = book6.isPurchasable();
        java.lang.String str90 = book6.getItemType();
        java.time.LocalDate localDate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate91, 0, "LibraryItem [itemId=1243, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Book" + "'", str90, "Book");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean16 = book15.isOverdue();
        items.Book book23 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean24 = book23.isOverdue();
        items.Book book31 = new items.Book("", "", true, true, "", "hi!");
        book31.returnItem();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        java.lang.String str60 = book57.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { book39, book48, book57, book67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book23, book31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = book6.isPurchasable();
        java.lang.String str78 = book6.getTitle();
        int int79 = book6.getItemId();
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1510 + "'", int79 == 1510);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.toString();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate12, 100, "LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=1534, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=1534, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = book6.getTitle();
        java.lang.String str12 = book6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=1561, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=1561, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.toString();
        boolean boolean12 = book6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=1604, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=1604, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        items.Book book6 = new items.Book("LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass7 = book6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        boolean boolean11 = book6.isPurchasable();
        boolean boolean12 = book6.isRented();
        java.lang.Class<?> wildcardClass13 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        java.lang.String str11 = book6.getPrice();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate12, 1205, "LibraryItem [itemId=1592, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean16 = book15.isOverdue();
        items.Book book23 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean24 = book23.isOverdue();
        items.Book book31 = new items.Book("", "", true, true, "", "hi!");
        book31.returnItem();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        java.lang.String str60 = book57.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { book39, book48, book57, book67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book23, book31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = book6.isPurchasable();
        java.lang.String str78 = book6.getTitle();
        java.lang.String str79 = book6.getAuthor();
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.setBorrowerEmail("");
        java.lang.String str13 = book6.getItemType();
        java.time.LocalDate localDate14 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate14, 546, "LibraryItem [itemId=1114, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=1720, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=1720, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book" + "'", str13, "Book");
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        items.Book book6 = new items.Book("Book:  by hi!. Location: . Purchasable: true", "LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getLocation();
        book6.setLocation("LibraryItem [itemId=397, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str7, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.setBorrowerEmail("");
        java.lang.String str13 = book6.getItemType();
        java.time.LocalDate localDate14 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate14, 590, "LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=1787, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=1787, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book" + "'", str13, "Book");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        book6.returnItem();
        double double49 = book6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        items.Book book17 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str18 = book17.getDetails();
        java.lang.String str19 = book17.getDetails();
        boolean boolean20 = book17.isOverdue();
        items.Book book27 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean28 = book27.isOverdue();
        items.Book book35 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean36 = book35.isOverdue();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        java.lang.String str53 = book51.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        items.Book book69 = new items.Book("", "", true, true, "", "hi!");
        book69.returnItem();
        java.lang.String str71 = book69.getAuthor();
        java.lang.String str72 = book69.getAuthor();
        items.Book book79 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { book51, book60, book69, book79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = book43.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book35, book43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean88 = book17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean89 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        java.lang.Class<?> wildcardClass90 = book6.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=1795, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=1795, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str18, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str19, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        java.lang.String str52 = book6.getDetails();
        java.lang.String str53 = book6.toString();
        book6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=1816, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=1816, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str52, "Book:  by hi!. Location: . Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "LibraryItem [itemId=1816, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str53, "LibraryItem [itemId=1816, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isRented();
        int int10 = book6.getItemId();
        java.lang.String str11 = book6.getItemType();
        boolean boolean12 = book6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1822 + "'", int10 == 1822);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Book" + "'", str11, "Book");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean16 = book15.isOverdue();
        items.Book book23 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean24 = book23.isOverdue();
        items.Book book31 = new items.Book("", "", true, true, "", "hi!");
        book31.returnItem();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        java.lang.String str60 = book57.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { book39, book48, book57, book67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book23, book31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = book6.isPurchasable();
        java.lang.String str78 = book6.getTitle();
        java.lang.String str79 = book6.getPrice();
        java.lang.Class<?> wildcardClass80 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        items.Book book6 = new items.Book("Book", "LibraryItem [itemId=954, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=596, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=251, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.getTitle();
        java.util.List<items.LibraryItem> libraryItemList49 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = book6.hasBorrowingPrivileges(libraryItemList49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        items.Book book6 = new items.Book("LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "Book:  by hi!. Location: . Purchasable: false");
        book6.returnItem();
        java.lang.String str8 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book:  by Book:  by hi!. Location: . Purchasable: false. Location: LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str8, "Book:  by Book:  by hi!. Location: . Purchasable: false. Location: LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        boolean boolean49 = book6.isPurchasable();
        book6.setLocation("LibraryItem [itemId=240, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.Class<?> wildcardClass54 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass48 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str53 = book6.getDetails();
        java.lang.String str54 = book6.getBorrowerEmail();
        java.lang.String str55 = book6.getDetails();
        java.lang.String str56 = book6.getLocation();
        java.time.LocalDate localDate57 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate57, 0, "LibraryItem [itemId=615, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=1894, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=1894, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str53, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str54, "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str55, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        book6.setLocation("");
        java.lang.String str13 = book6.getItemType();
        book6.setLocation("LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book" + "'", str13, "Book");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        boolean boolean48 = book6.isPurchasable();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        items.Book book63 = new items.Book("", "", true, true, "", "hi!");
        book63.returnItem();
        java.lang.String str65 = book63.getAuthor();
        items.Book book72 = new items.Book("", "", true, true, "", "hi!");
        book72.returnItem();
        java.lang.String str74 = book72.getAuthor();
        items.Book book81 = new items.Book("", "", true, true, "", "hi!");
        book81.returnItem();
        java.lang.String str83 = book81.getAuthor();
        java.lang.String str84 = book81.getAuthor();
        items.Book book91 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray92 = new items.LibraryItem[] { book63, book72, book81, book91 };
        java.util.ArrayList<items.LibraryItem> libraryItemList93 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList93, libraryItemArray92);
        boolean boolean95 = book55.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean96 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        book6.setBorrowerEmail("LibraryItem [itemId=1094, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean99 = book6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        items.Book book6 = new items.Book("LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=434, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=165, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getDetails();
        boolean boolean11 = book6.isPurchasable();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate12, 1843, "LibraryItem [itemId=1015, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=1966, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=1966, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str10, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        int int8 = book6.getItemId();
        boolean boolean9 = book6.isOverdue();
        java.lang.String str10 = book6.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1984 + "'", int8 == 1984);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1984, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1984, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        items.Book book65 = new items.Book("", "", true, true, "", "hi!");
        book65.returnItem();
        java.lang.String str67 = book65.getAuthor();
        items.Book book74 = new items.Book("", "", true, true, "", "hi!");
        book74.returnItem();
        java.lang.String str76 = book74.getAuthor();
        items.Book book83 = new items.Book("", "", true, true, "", "hi!");
        book83.returnItem();
        java.lang.String str85 = book83.getAuthor();
        java.lang.String str86 = book83.getAuthor();
        items.Book book93 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray94 = new items.LibraryItem[] { book65, book74, book83, book93 };
        java.util.ArrayList<items.LibraryItem> libraryItemList95 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList95, libraryItemArray94);
        boolean boolean97 = book57.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList95);
        boolean boolean98 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList95);
        book6.returnItem();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=1991, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=1991, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isRented();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book18 = new items.Book("", "", true, true, "", "hi!");
        book18.returnItem();
        boolean boolean20 = book18.isPurchasable();
        items.Book book27 = new items.Book("hi!", "", true, false, "hi!", "");
        book27.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book36 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean37 = book36.isOverdue();
        items.Book book44 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean45 = book44.isOverdue();
        items.Book book52 = new items.Book("", "", true, true, "", "hi!");
        book52.returnItem();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        items.Book book69 = new items.Book("", "", true, true, "", "hi!");
        book69.returnItem();
        java.lang.String str71 = book69.getAuthor();
        items.Book book78 = new items.Book("", "", true, true, "", "hi!");
        book78.returnItem();
        java.lang.String str80 = book78.getAuthor();
        java.lang.String str81 = book78.getAuthor();
        items.Book book88 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray89 = new items.LibraryItem[] { book60, book69, book78, book88 };
        java.util.ArrayList<items.LibraryItem> libraryItemList90 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList90, libraryItemArray89);
        boolean boolean92 = book52.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList90);
        items.LibraryItem[] libraryItemArray93 = new items.LibraryItem[] { book44, book52 };
        java.util.ArrayList<items.LibraryItem> libraryItemList94 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList94, libraryItemArray93);
        boolean boolean96 = book36.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean97 = book27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean98 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean99 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(libraryItemArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        boolean boolean48 = book6.isOverdue();
        boolean boolean49 = book6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        book6.returnItem();
        java.lang.String str50 = book6.getPrice();
        java.lang.String str51 = book6.getDetails();
        java.util.List<items.LibraryItem> libraryItemList52 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = book6.hasBorrowingPrivileges(libraryItemList52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        java.lang.String str48 = book6.getPrice();
        book6.setIsPurchasable(true);
        java.time.LocalDate localDate51 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate51, 1809, "LibraryItem [itemId=871, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.getAuthor();
        double double50 = book6.calculateOverduePenalty();
        java.lang.String str51 = book6.getLocation();
        java.lang.String str52 = book6.getItemType();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Book" + "'", str52, "Book");
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        boolean boolean11 = book6.isPurchasable();
        boolean boolean12 = book6.isRented();
        book6.returnItem();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        items.Book book6 = new items.Book("LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate7, 239, "LibraryItem [itemId=1920, itemType=Book, location=LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        items.Book book6 = new items.Book("LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book");
        java.lang.String str7 = book6.getTitle();
        java.lang.String str8 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        boolean boolean49 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        java.lang.Class<?> wildcardClass11 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=2164, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=2164, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        boolean boolean51 = book6.isPurchasable();
        boolean boolean52 = book6.isOverdue();
        book6.setBorrowerEmail("LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str55 = book6.getPrice();
        int int56 = book6.getItemId();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=2165, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=2165, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2165 + "'", int56 == 2165);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        items.Book book6 = new items.Book("Book:  by hi!. Location: . Purchasable: true", "LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate7, 2165, "LibraryItem [itemId=1726, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isRented();
        int int10 = book6.getItemId();
        java.lang.String str11 = book6.getBorrowerEmail();
        java.lang.String str12 = book6.getDetails();
        java.lang.String str13 = book6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2181 + "'", int10 == 2181);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str12, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=2181, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=2181, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        book6.setBorrowerEmail("LibraryItem [itemId=962, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=2215, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=2215, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        items.Book book6 = new items.Book("LibraryItem [itemId=768, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1021, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isOverdue();
        book6.setIsPurchasable(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = book6.getTitle();
        java.lang.String str12 = book6.getItemType();
        book6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Book" + "'", str12, "Book");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isOverdue();
        java.lang.String str10 = book6.getTitle();
        double double11 = book6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        book6.setLocation("LibraryItem [itemId=1592, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int54 = book6.getItemId();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=2282, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=2282, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2282 + "'", int54 == 2282);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isOverdue();
        boolean boolean11 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=1561, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setLocation("LibraryItem [itemId=1867, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        items.Book book6 = new items.Book("LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=434, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=165, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass7 = book6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        java.lang.String str14 = book6.getTitle();
        book6.setLocation("LibraryItem [itemId=1154, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = book6.getDetails();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=2293, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=2293, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=2293, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=2293, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Book: hi! by . Location: LibraryItem [itemId=1154, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str17, "Book: hi! by . Location: LibraryItem [itemId=1154, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        items.Book book6 = new items.Book("LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=495, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=870, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "hi!");
        double double7 = book6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        items.Book book6 = new items.Book("LibraryItem [itemId=1758, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1219, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "Book: LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", "LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isPurchasable();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        items.Book book6 = new items.Book("LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=434, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=165, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.returnItem();
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        boolean boolean49 = book6.isPurchasable();
        java.lang.String str50 = book6.toString();
        boolean boolean51 = book6.isPurchasable();
        double double52 = book6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "LibraryItem [itemId=2300, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str50, "LibraryItem [itemId=2300, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        items.Book book6 = new items.Book("LibraryItem [itemId=2298, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: Book:  by hi!. Location: . Purchasable: true. Purchasable: true", false, true, "LibraryItem [itemId=1396, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1816, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = book6.getTitle();
        book6.returnItem();
        java.lang.String str13 = book6.getDetails();
        java.lang.String str14 = book6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book: hi! by . Location: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str13, "Book: hi! by . Location: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=2306, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=2306, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = book6.getTitle();
        book6.returnItem();
        java.time.LocalDate localDate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate13, (int) 'a', "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getLocation();
        java.lang.String str13 = book6.getLocation();
        boolean boolean14 = book6.isPurchasable();
        java.lang.String str15 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setIsPurchasable(true);
        book6.returnItem();
        boolean boolean10 = book6.isRented();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.Class<?> wildcardClass51 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=2370, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=2370, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        items.Book book25 = new items.Book("", "", true, true, "", "hi!");
        book25.returnItem();
        java.lang.String str27 = book25.getAuthor();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        java.lang.String str36 = book34.getAuthor();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        java.lang.String str45 = book43.getAuthor();
        java.lang.String str46 = book43.getAuthor();
        items.Book book53 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { book25, book34, book43, book53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = book6.isRented();
        double double60 = book6.calculateOverduePenalty();
        book6.setBorrowerEmail("LibraryItem [itemId=116, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int63 = book6.getItemId();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2375 + "'", int63 == 2375);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        items.Book book6 = new items.Book("LibraryItem [itemId=871, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1442, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1154, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass7 = book6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.toString();
        java.lang.String str9 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2410, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2410, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isRented();
        items.Book book17 = new items.Book("LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book");
        items.Book book24 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean25 = book24.isRented();
        book24.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean28 = book24.isRented();
        items.Book book35 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str36 = book35.getDetails();
        book35.returnItem();
        boolean boolean38 = book35.isPurchasable();
        double double39 = book35.calculateOverduePenalty();
        items.Book book46 = new items.Book("", "", true, true, "", "hi!");
        book46.returnItem();
        items.Book book54 = new items.Book("", "", true, true, "", "hi!");
        book54.returnItem();
        java.lang.String str56 = book54.getAuthor();
        items.Book book63 = new items.Book("", "", true, true, "", "hi!");
        book63.returnItem();
        java.lang.String str65 = book63.getAuthor();
        items.Book book72 = new items.Book("", "", true, true, "", "hi!");
        book72.returnItem();
        java.lang.String str74 = book72.getAuthor();
        java.lang.String str75 = book72.getAuthor();
        items.Book book82 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray83 = new items.LibraryItem[] { book54, book63, book72, book82 };
        java.util.ArrayList<items.LibraryItem> libraryItemList84 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList84, libraryItemArray83);
        boolean boolean86 = book46.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean87 = book35.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean88 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean89 = book17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean90 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList84);
        java.lang.String str91 = book6.getAuthor();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str36, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        double double11 = book6.calculateOverduePenalty();
        boolean boolean12 = book6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = book6.getTitle();
        boolean boolean12 = book6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        items.Book book6 = new items.Book("LibraryItem [itemId=768, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1021, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isOverdue();
        book6.setBorrowerEmail("LibraryItem [itemId=1077, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str10 = book6.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=2446, itemType=Book, location=LibraryItem [itemId=768, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=2446, itemType=Book, location=LibraryItem [itemId=768, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        items.Book book17 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str18 = book17.getDetails();
        java.lang.String str19 = book17.getDetails();
        boolean boolean20 = book17.isOverdue();
        items.Book book27 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean28 = book27.isOverdue();
        items.Book book35 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean36 = book35.isOverdue();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        java.lang.String str53 = book51.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        items.Book book69 = new items.Book("", "", true, true, "", "hi!");
        book69.returnItem();
        java.lang.String str71 = book69.getAuthor();
        java.lang.String str72 = book69.getAuthor();
        items.Book book79 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { book51, book60, book69, book79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = book43.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book35, book43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean88 = book17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean89 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean90 = book6.isRented();
        java.lang.String str91 = book6.getItemType();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=2447, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=2447, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str18, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str19, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Book" + "'", str91, "Book");
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isOverdue();
        boolean boolean11 = book6.isRented();
        java.lang.String str12 = book6.toString();
        java.lang.String str13 = book6.getPrice();
        book6.returnItem();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=2499, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=2499, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        java.lang.String str11 = book6.getPrice();
        java.lang.String str12 = book6.getPrice();
        java.lang.String str13 = book6.getTitle();
        boolean boolean14 = book6.isOverdue();
        java.lang.Class<?> wildcardClass15 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.Class<?> wildcardClass8 = book6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        items.Book book6 = new items.Book("LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book");
        java.lang.String str7 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book" + "'", str7, "Book");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        java.lang.String str10 = book6.getDetails();
        int int11 = book6.getItemId();
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2562 + "'", int9 == 2562);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2562 + "'", int11 == 2562);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        java.lang.String str11 = book6.getTitle();
        java.lang.String str12 = book6.toString();
        java.lang.String str13 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=2568, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=2568, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        items.Book book6 = new items.Book("LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=165, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=131, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass7 = book6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isRented();
        int int10 = book6.getItemId();
        java.lang.String str11 = book6.getBorrowerEmail();
        double double12 = book6.calculateOverduePenalty();
        java.lang.String str13 = book6.toString();
        java.lang.String str14 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2578 + "'", int10 == 2578);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=2578, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=2578, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        items.Book book25 = new items.Book("", "", true, true, "", "hi!");
        book25.returnItem();
        java.lang.String str27 = book25.getAuthor();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        java.lang.String str36 = book34.getAuthor();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        java.lang.String str45 = book43.getAuthor();
        java.lang.String str46 = book43.getAuthor();
        items.Book book53 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { book25, book34, book43, book53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = book6.isRented();
        double double60 = book6.calculateOverduePenalty();
        java.lang.String str61 = book6.getPrice();
        java.lang.String str62 = book6.getLocation();
        java.lang.String str63 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.setBorrowerEmail("");
        java.lang.String str13 = book6.getItemType();
        book6.returnItem();
        java.lang.String str15 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=2631, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=2631, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book" + "'", str13, "Book");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        int int11 = book6.getItemId();
        boolean boolean12 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2659 + "'", int11 == 2659);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getLocation();
        java.lang.String str13 = book6.getLocation();
        boolean boolean14 = book6.isPurchasable();
        book6.setIsPurchasable(true);
        java.lang.String str17 = book6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        double double11 = book6.calculateOverduePenalty();
        items.Book book18 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean19 = book18.isOverdue();
        items.Book book26 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean27 = book26.isOverdue();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        book42.returnItem();
        java.lang.String str44 = book42.getAuthor();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        java.lang.String str53 = book51.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        java.lang.String str63 = book60.getAuthor();
        items.Book book70 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray71 = new items.LibraryItem[] { book42, book51, book60, book70 };
        java.util.ArrayList<items.LibraryItem> libraryItemList72 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList72, libraryItemArray71);
        boolean boolean74 = book34.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList72);
        items.LibraryItem[] libraryItemArray75 = new items.LibraryItem[] { book26, book34 };
        java.util.ArrayList<items.LibraryItem> libraryItemList76 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList76, libraryItemArray75);
        boolean boolean78 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean79 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList76);
        java.lang.String str80 = book6.getAuthor();
        java.lang.String str81 = book6.getAuthor();
        java.lang.String str82 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(libraryItemArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str82, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        boolean boolean10 = book6.isOverdue();
        boolean boolean11 = book6.isOverdue();
        java.lang.String str12 = book6.getTitle();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=2694, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=2694, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        boolean boolean89 = book6.isPurchasable();
        java.lang.String str90 = book6.getDetails();
        java.lang.Class<?> wildcardClass91 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str90, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        items.Book book6 = new items.Book("LibraryItem [itemId=791, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2509, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=2525, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1032, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.toString();
        java.time.LocalDate localDate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate9, 2082, "LibraryItem [itemId=1596, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2751, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2751, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        items.Book book6 = new items.Book("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "Book", "LibraryItem [itemId=131, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate7, 0, "LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getBorrowerEmail();
        book6.setLocation("Book: LibraryItem [itemId=950, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=987, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
        double double13 = book6.calculateOverduePenalty();
        java.time.LocalDate localDate14 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate14, 1823, "LibraryItem [itemId=1275, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isRented();
        int int10 = book6.getItemId();
        java.lang.String str11 = book6.getBorrowerEmail();
        double double12 = book6.calculateOverduePenalty();
        boolean boolean13 = book6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2779 + "'", int10 == 2779);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean16 = book15.isOverdue();
        items.Book book23 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean24 = book23.isOverdue();
        items.Book book31 = new items.Book("", "", true, true, "", "hi!");
        book31.returnItem();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        java.lang.String str60 = book57.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { book39, book48, book57, book67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book23, book31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = book6.isPurchasable();
        java.lang.String str78 = book6.getItemType();
        java.lang.String str79 = book6.getLocation();
        book6.setIsPurchasable(false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Book" + "'", str78, "Book");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.returnItem();
        boolean boolean12 = book6.isRented();
        java.time.LocalDate localDate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate13, 0, "LibraryItem [itemId=2410, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        items.Book book6 = new items.Book("LibraryItem [itemId=940, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2499, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=1205, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2654, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        items.Book book6 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean10 = book6.isRented();
        boolean boolean11 = book6.isPurchasable();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        book6.returnItem();
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        boolean boolean19 = book17.isOverdue();
        boolean boolean20 = book17.isOverdue();
        double double21 = book17.calculateOverduePenalty();
        items.Book book28 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean29 = book28.isRented();
        book28.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean32 = book28.isRented();
        items.Book book39 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str40 = book39.getDetails();
        book39.returnItem();
        boolean boolean42 = book39.isPurchasable();
        double double43 = book39.calculateOverduePenalty();
        items.Book book50 = new items.Book("", "", true, true, "", "hi!");
        book50.returnItem();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        book67.returnItem();
        java.lang.String str69 = book67.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        book76.returnItem();
        java.lang.String str78 = book76.getAuthor();
        java.lang.String str79 = book76.getAuthor();
        items.Book book86 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray87 = new items.LibraryItem[] { book58, book67, book76, book86 };
        java.util.ArrayList<items.LibraryItem> libraryItemList88 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList88, libraryItemArray87);
        boolean boolean90 = book50.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean91 = book39.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean92 = book28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean93 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean94 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList88);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=2850, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=2850, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str40, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getLocation();
        java.lang.String str13 = book6.getLocation();
        boolean boolean14 = book6.isPurchasable();
        java.lang.String str15 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        book6.setLocation("");
        java.lang.String str12 = book6.getTitle();
        double double13 = book6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass14 = book6.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2895 + "'", int9 == 2895);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean7 = book6.isOverdue();
        items.Book book14 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean15 = book14.isOverdue();
        items.Book book22 = new items.Book("", "", true, true, "", "hi!");
        book22.returnItem();
        items.Book book30 = new items.Book("", "", true, true, "", "hi!");
        book30.returnItem();
        java.lang.String str32 = book30.getAuthor();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        java.lang.String str51 = book48.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray59 = new items.LibraryItem[] { book30, book39, book48, book58 };
        java.util.ArrayList<items.LibraryItem> libraryItemList60 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList60, libraryItemArray59);
        boolean boolean62 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList60);
        items.LibraryItem[] libraryItemArray63 = new items.LibraryItem[] { book14, book22 };
        java.util.ArrayList<items.LibraryItem> libraryItemList64 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList64, libraryItemArray63);
        boolean boolean66 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList64);
        java.lang.String str67 = book6.getTitle();
        java.lang.String str68 = book6.getAuthor();
        java.lang.String str69 = book6.getPrice();
        java.time.LocalDate localDate70 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate70, 1, "LibraryItem [itemId=1868, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(libraryItemArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        items.Book book16 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean17 = book16.isRented();
        book16.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean20 = book16.isRented();
        items.Book book27 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str28 = book27.getDetails();
        book27.returnItem();
        boolean boolean30 = book27.isPurchasable();
        double double31 = book27.calculateOverduePenalty();
        items.Book book38 = new items.Book("", "", true, true, "", "hi!");
        book38.returnItem();
        items.Book book46 = new items.Book("", "", true, true, "", "hi!");
        book46.returnItem();
        java.lang.String str48 = book46.getAuthor();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        book64.returnItem();
        java.lang.String str66 = book64.getAuthor();
        java.lang.String str67 = book64.getAuthor();
        items.Book book74 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray75 = new items.LibraryItem[] { book46, book55, book64, book74 };
        java.util.ArrayList<items.LibraryItem> libraryItemList76 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList76, libraryItemArray75);
        boolean boolean78 = book38.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean79 = book27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean80 = book16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean81 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList76);
        java.lang.String str82 = book6.getDetails();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=2912, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=2912, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str28, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: false" + "'", str82, "Book: hi! by . Location: hi!. Purchasable: false");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        items.Book book6 = new items.Book("LibraryItem [itemId=131, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=2940, itemType=Book, location=LibraryItem [itemId=131, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=2940, itemType=Book, location=LibraryItem [itemId=131, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.getTitle();
        java.lang.String str49 = book6.getAuthor();
        java.lang.String str50 = book6.getTitle();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        items.Book book6 = new items.Book("LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "Book:  by hi!. Location: . Purchasable: false");
        book6.returnItem();
        java.lang.String str8 = book6.getBorrowerEmail();
        java.lang.String str9 = book6.getLocation();
        double double10 = book6.calculateOverduePenalty();
        boolean boolean11 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        items.Book book6 = new items.Book("LibraryItem [itemId=1758, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1219, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "Book: LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", "LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass7 = book6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        items.Book book6 = new items.Book("LibraryItem [itemId=131, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate7, 2585, "LibraryItem [itemId=881, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        boolean boolean49 = book6.isPurchasable();
        java.lang.String str50 = book6.getDetails();
        book6.setIsPurchasable(true);
        book6.returnItem();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str50, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        int int10 = book6.getItemId();
        java.lang.String str11 = book6.getLocation();
        boolean boolean12 = book6.isRented();
        boolean boolean13 = book6.isOverdue();
        book6.setLocation("LibraryItem [itemId=1022, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = book6.getLocation();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2967 + "'", int10 == 2967);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=1022, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=1022, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        boolean boolean89 = book6.isPurchasable();
        java.lang.String str90 = book6.getDetails();
        java.lang.String str91 = book6.getTitle();
        java.time.LocalDate localDate92 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate92, 2024, "LibraryItem [itemId=870, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str90, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isRented();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book18 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str19 = book18.getDetails();
        java.lang.String str20 = book18.getTitle();
        java.lang.String str21 = book18.getDetails();
        items.Book book28 = new items.Book("", "", true, true, "", "hi!");
        book28.returnItem();
        java.lang.String str30 = book28.getAuthor();
        book28.setIsPurchasable(true);
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        java.lang.String str42 = book39.getAuthor();
        double double43 = book39.calculateOverduePenalty();
        items.Book book50 = new items.Book("", "", true, true, "", "hi!");
        book50.returnItem();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        book67.returnItem();
        java.lang.String str69 = book67.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        book76.returnItem();
        java.lang.String str78 = book76.getAuthor();
        java.lang.String str79 = book76.getAuthor();
        items.Book book86 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray87 = new items.LibraryItem[] { book58, book67, book76, book86 };
        java.util.ArrayList<items.LibraryItem> libraryItemList88 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList88, libraryItemArray87);
        boolean boolean90 = book50.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean91 = book39.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean92 = book28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean93 = book18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean94 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList88);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str19, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str21, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        boolean boolean9 = book6.isPurchasable();
        double double10 = book6.calculateOverduePenalty();
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        items.Book book25 = new items.Book("", "", true, true, "", "hi!");
        book25.returnItem();
        java.lang.String str27 = book25.getAuthor();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        java.lang.String str36 = book34.getAuthor();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        java.lang.String str45 = book43.getAuthor();
        java.lang.String str46 = book43.getAuthor();
        items.Book book53 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { book25, book34, book43, book53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        java.lang.String str59 = book6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "LibraryItem [itemId=2994, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str59, "LibraryItem [itemId=2994, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        java.lang.String str11 = book6.getLocation();
        book6.setBorrowerEmail("LibraryItem [itemId=1413, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setLocation("LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        book6.returnItem();
        java.lang.String str50 = book6.getPrice();
        java.lang.String str51 = book6.getAuthor();
        double double52 = book6.calculateOverduePenalty();
        book6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean16 = book15.isOverdue();
        items.Book book23 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean24 = book23.isOverdue();
        items.Book book31 = new items.Book("", "", true, true, "", "hi!");
        book31.returnItem();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        java.lang.String str60 = book57.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { book39, book48, book57, book67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book23, book31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = book6.isPurchasable();
        java.lang.String str78 = book6.getTitle();
        java.lang.String str79 = book6.getPrice();
        java.lang.String str80 = book6.getTitle();
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean16 = book15.isOverdue();
        items.Book book23 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean24 = book23.isOverdue();
        items.Book book31 = new items.Book("", "", true, true, "", "hi!");
        book31.returnItem();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        java.lang.String str60 = book57.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { book39, book48, book57, book67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book23, book31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = book6.isPurchasable();
        java.lang.String str78 = book6.getTitle();
        java.lang.String str79 = book6.getPrice();
        java.time.LocalDate localDate80 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate80, 2222, "LibraryItem [itemId=1032, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        boolean boolean48 = book6.isPurchasable();
        book6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        items.Book book6 = new items.Book("Book: hi! by . Location: . Purchasable: false", "", false, true, "LibraryItem [itemId=1094, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2293, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isOverdue();
        items.Book book16 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean17 = book16.isOverdue();
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        java.lang.String str42 = book40.getAuthor();
        items.Book book49 = new items.Book("", "", true, true, "", "hi!");
        book49.returnItem();
        java.lang.String str51 = book49.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        java.lang.String str61 = book58.getAuthor();
        items.Book book68 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray69 = new items.LibraryItem[] { book40, book49, book58, book68 };
        java.util.ArrayList<items.LibraryItem> libraryItemList70 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList70, libraryItemArray69);
        boolean boolean72 = book32.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        items.LibraryItem[] libraryItemArray73 = new items.LibraryItem[] { book24, book32 };
        java.util.ArrayList<items.LibraryItem> libraryItemList74 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList74, libraryItemArray73);
        boolean boolean76 = book16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList74);
        boolean boolean77 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList74);
        java.lang.String str78 = book6.getTitle();
        boolean boolean79 = book6.isOverdue();
        java.lang.String str80 = book6.getAuthor();
        int int81 = book6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(libraryItemArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3043 + "'", int81 == 3043);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.getAuthor();
        double double50 = book6.calculateOverduePenalty();
        java.lang.String str51 = book6.getTitle();
        java.time.LocalDate localDate52 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate52, 1833, "LibraryItem [itemId=2317, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getTitle();
        java.lang.String str13 = book6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        java.lang.String str11 = book6.getLocation();
        items.Book book18 = new items.Book("", "", true, true, "", "hi!");
        book18.returnItem();
        java.lang.String str20 = book18.getAuthor();
        java.lang.String str21 = book18.getAuthor();
        double double22 = book18.calculateOverduePenalty();
        items.Book book29 = new items.Book("", "", true, true, "", "hi!");
        book29.returnItem();
        items.Book book37 = new items.Book("", "", true, true, "", "hi!");
        book37.returnItem();
        java.lang.String str39 = book37.getAuthor();
        items.Book book46 = new items.Book("", "", true, true, "", "hi!");
        book46.returnItem();
        java.lang.String str48 = book46.getAuthor();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        java.lang.String str58 = book55.getAuthor();
        items.Book book65 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray66 = new items.LibraryItem[] { book37, book46, book55, book65 };
        java.util.ArrayList<items.LibraryItem> libraryItemList67 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList67, libraryItemArray66);
        boolean boolean69 = book29.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean70 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean71 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        book6.returnItem();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        items.Book book17 = new items.Book("LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList82);
        java.lang.Class<?> wildcardClass87 = libraryItemList82.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = book6.isOverdue();
        int int48 = book6.getItemId();
        java.lang.String str49 = book6.getTitle();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3091 + "'", int48 == 3091);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        items.Book book6 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean10 = book6.isPurchasable();
        java.util.List<items.LibraryItem> libraryItemList11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = book6.hasBorrowingPrivileges(libraryItemList11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        int int89 = book6.getItemId();
        java.lang.String str90 = book6.getBorrowerEmail();
        java.time.LocalDate localDate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate91, (int) (byte) 10, "LibraryItem [itemId=2018, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3123 + "'", int89 == 3123);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str90, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        book6.setLocation("");
        double double12 = book6.calculateOverduePenalty();
        boolean boolean13 = book6.isOverdue();
        java.lang.String str14 = book6.toString();
        java.lang.String str15 = book6.getPrice();
        items.Book book22 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str23 = book22.getDetails();
        book22.returnItem();
        boolean boolean25 = book22.isPurchasable();
        double double26 = book22.calculateOverduePenalty();
        items.Book book33 = new items.Book("", "", true, true, "", "hi!");
        book33.returnItem();
        items.Book book41 = new items.Book("", "", true, true, "", "hi!");
        book41.returnItem();
        java.lang.String str43 = book41.getAuthor();
        items.Book book50 = new items.Book("", "", true, true, "", "hi!");
        book50.returnItem();
        java.lang.String str52 = book50.getAuthor();
        items.Book book59 = new items.Book("", "", true, true, "", "hi!");
        book59.returnItem();
        java.lang.String str61 = book59.getAuthor();
        java.lang.String str62 = book59.getAuthor();
        items.Book book69 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { book41, book50, book59, book69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = book33.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean75 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.Class<?> wildcardClass76 = book6.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3135 + "'", int9 == 3135);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3135, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3135, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str23, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        int int11 = book6.getItemId();
        java.lang.String str12 = book6.getTitle();
        double double13 = book6.calculateOverduePenalty();
        java.lang.String str14 = book6.getTitle();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3142 + "'", int11 == 3142);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        items.Book book6 = new items.Book("LibraryItem [itemId=409, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=601, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=434, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=615, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate7, 2181, "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=941, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = book6.getBorrowerEmail();
        java.lang.String str15 = book6.getTitle();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3166, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3166, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=941, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=941, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isOverdue();
        boolean boolean11 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=1561, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = book6.getBorrowerEmail();
        java.time.LocalDate localDate15 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate15, 0, "LibraryItem [itemId=2861, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=1561, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=1561, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        items.Book book6 = new items.Book("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "Book", "LibraryItem [itemId=131, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.returnItem();
        int int8 = book6.getItemId();
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3171 + "'", int8 == 3171);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        items.Book book17 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str18 = book17.getDetails();
        java.lang.String str19 = book17.getDetails();
        boolean boolean20 = book17.isOverdue();
        items.Book book27 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean28 = book27.isOverdue();
        items.Book book35 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean36 = book35.isOverdue();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        java.lang.String str53 = book51.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        items.Book book69 = new items.Book("", "", true, true, "", "hi!");
        book69.returnItem();
        java.lang.String str71 = book69.getAuthor();
        java.lang.String str72 = book69.getAuthor();
        items.Book book79 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { book51, book60, book69, book79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = book43.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book35, book43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean88 = book17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean89 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean90 = book6.isRented();
        book6.setIsPurchasable(false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=3177, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=3177, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str18, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str19, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.setBorrowerEmail("LibraryItem [itemId=886, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str13 = book6.getBorrowerEmail();
        java.lang.String str14 = book6.getPrice();
        java.lang.Class<?> wildcardClass15 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=3186, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=3186, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=886, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=886, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        boolean boolean14 = book6.isRented();
        java.lang.String str15 = book6.getItemType();
        book6.setIsPurchasable(false);
        book6.returnItem();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=3231, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=3231, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=3231, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=3231, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Book" + "'", str15, "Book");
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        items.Book book6 = new items.Book("LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=495, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=870, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "hi!");
        java.lang.Class<?> wildcardClass7 = book6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        items.Book book6 = new items.Book("LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getAuthor();
        java.lang.String str8 = book6.getDetails();
        java.lang.String str9 = book6.getLocation();
        java.lang.String str10 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str8, "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getLocation();
        java.lang.String str13 = book6.getLocation();
        java.lang.String str14 = book6.getItemType();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Book" + "'", str14, "Book");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.getItemType();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Book" + "'", str49, "Book");
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getTitle();
        java.lang.String str12 = book6.getItemType();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Book" + "'", str12, "Book");
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        double double48 = book6.calculateOverduePenalty();
        boolean boolean49 = book6.isPurchasable();
        boolean boolean50 = book6.isOverdue();
        book6.setIsPurchasable(false);
        double double53 = book6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean16 = book15.isOverdue();
        items.Book book23 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean24 = book23.isOverdue();
        items.Book book31 = new items.Book("", "", true, true, "", "hi!");
        book31.returnItem();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        java.lang.String str60 = book57.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { book39, book48, book57, book67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book23, book31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = book6.isPurchasable();
        java.lang.String str78 = book6.getItemType();
        double double79 = book6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Book" + "'", str78, "Book");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setIsPurchasable(false);
        book6.setLocation("LibraryItem [itemId=951, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book19 = new items.Book("", "", true, true, "", "hi!");
        book19.returnItem();
        java.lang.String str21 = book19.getAuthor();
        book19.setIsPurchasable(true);
        items.Book book30 = new items.Book("", "", true, true, "", "hi!");
        book30.returnItem();
        java.lang.String str32 = book30.getAuthor();
        java.lang.String str33 = book30.getAuthor();
        double double34 = book30.calculateOverduePenalty();
        items.Book book41 = new items.Book("", "", true, true, "", "hi!");
        book41.returnItem();
        items.Book book49 = new items.Book("", "", true, true, "", "hi!");
        book49.returnItem();
        java.lang.String str51 = book49.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        book67.returnItem();
        java.lang.String str69 = book67.getAuthor();
        java.lang.String str70 = book67.getAuthor();
        items.Book book77 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { book49, book58, book67, book77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = book41.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = book30.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = book19.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean84 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        book6.setLocation("LibraryItem [itemId=1084, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isRented();
        java.lang.String str53 = book6.getItemType();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=3349, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=3349, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book" + "'", str53, "Book");
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setIsPurchasable(true);
        book6.returnItem();
        java.lang.String str10 = book6.getAuthor();
        java.lang.String str11 = book6.getTitle();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        items.Book book6 = new items.Book("LibraryItem [itemId=904, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=933, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=434, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book13 = new items.Book("", "", true, true, "", "hi!");
        book13.returnItem();
        java.lang.String str15 = book13.getAuthor();
        java.lang.String str16 = book13.getAuthor();
        double double17 = book13.calculateOverduePenalty();
        items.Book book24 = new items.Book("", "", true, true, "", "hi!");
        book24.returnItem();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        items.Book book41 = new items.Book("", "", true, true, "", "hi!");
        book41.returnItem();
        java.lang.String str43 = book41.getAuthor();
        items.Book book50 = new items.Book("", "", true, true, "", "hi!");
        book50.returnItem();
        java.lang.String str52 = book50.getAuthor();
        java.lang.String str53 = book50.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray61 = new items.LibraryItem[] { book32, book41, book50, book60 };
        java.util.ArrayList<items.LibraryItem> libraryItemList62 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList62, libraryItemArray61);
        boolean boolean64 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList62);
        boolean boolean65 = book13.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList62);
        boolean boolean66 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList62);
        java.lang.Class<?> wildcardClass67 = libraryItemList62.getClass();
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        int int89 = book6.getItemId();
        boolean boolean90 = book6.isOverdue();
        java.lang.String str91 = book6.getTitle();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3407 + "'", int89 == 3407);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        boolean boolean11 = book6.isPurchasable();
        java.lang.String str12 = book6.getTitle();
        java.lang.String str13 = book6.getAuthor();
        java.lang.String str14 = book6.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3427, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3427, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        java.lang.String str9 = book6.getItemType();
        java.lang.Class<?> wildcardClass10 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Book" + "'", str9, "Book");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getTitle();
        book6.setLocation("LibraryItem [itemId=737, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = book6.toString();
        java.lang.Class<?> wildcardClass12 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3430, itemType=Book, location=LibraryItem [itemId=737, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3430, itemType=Book, location=LibraryItem [itemId=737, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: false");
        book6.setIsPurchasable(true);
        java.lang.String str15 = book6.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=3432, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=3432, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        java.lang.String str19 = book17.getAuthor();
        java.lang.String str20 = book17.getAuthor();
        double double21 = book17.calculateOverduePenalty();
        items.Book book28 = new items.Book("", "", true, true, "", "hi!");
        book28.returnItem();
        items.Book book36 = new items.Book("", "", true, true, "", "hi!");
        book36.returnItem();
        java.lang.String str38 = book36.getAuthor();
        items.Book book45 = new items.Book("", "", true, true, "", "hi!");
        book45.returnItem();
        java.lang.String str47 = book45.getAuthor();
        items.Book book54 = new items.Book("", "", true, true, "", "hi!");
        book54.returnItem();
        java.lang.String str56 = book54.getAuthor();
        java.lang.String str57 = book54.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray65 = new items.LibraryItem[] { book36, book45, book54, book64 };
        java.util.ArrayList<items.LibraryItem> libraryItemList66 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList66, libraryItemArray65);
        boolean boolean68 = book28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        boolean boolean69 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        boolean boolean70 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        book6.setBorrowerEmail("LibraryItem [itemId=591, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str73 = book6.getDetails();
        java.lang.String str74 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str73, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        items.Book book6 = new items.Book("LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int7 = book6.getItemId();
        java.lang.String str8 = book6.getAuthor();
        book6.returnItem();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3453 + "'", int7 == 3453);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        items.Book book6 = new items.Book("LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "Book:  by hi!. Location: . Purchasable: false");
        book6.setBorrowerEmail("LibraryItem [itemId=281, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass9 = book6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        items.Book book6 = new items.Book("LibraryItem [itemId=2157, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book: hi! by . Location: LibraryItem [itemId=1154, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", true, true, "LibraryItem [itemId=3427, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3018, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getTitle();
        java.lang.String str9 = book6.getDetails();
        boolean boolean10 = book6.isPurchasable();
        java.lang.String str11 = book6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str9, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3482, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3482, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        boolean boolean49 = book6.isPurchasable();
        book6.setLocation("LibraryItem [itemId=240, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str54 = book6.getAuthor();
        boolean boolean55 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        double double9 = book6.calculateOverduePenalty();
        book6.setBorrowerEmail("LibraryItem [itemId=941, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass12 = book6.getClass();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        items.Book book25 = new items.Book("", "", true, true, "", "hi!");
        book25.returnItem();
        java.lang.String str27 = book25.getAuthor();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        java.lang.String str36 = book34.getAuthor();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        java.lang.String str45 = book43.getAuthor();
        java.lang.String str46 = book43.getAuthor();
        items.Book book53 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { book25, book34, book43, book53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = book6.isRented();
        boolean boolean60 = book6.isRented();
        boolean boolean61 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.returnItem();
        boolean boolean12 = book6.isRented();
        book6.setIsPurchasable(true);
        double double15 = book6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        items.Book book17 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str18 = book17.getDetails();
        java.lang.String str19 = book17.getDetails();
        boolean boolean20 = book17.isOverdue();
        items.Book book27 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean28 = book27.isOverdue();
        items.Book book35 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean36 = book35.isOverdue();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        java.lang.String str53 = book51.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        items.Book book69 = new items.Book("", "", true, true, "", "hi!");
        book69.returnItem();
        java.lang.String str71 = book69.getAuthor();
        java.lang.String str72 = book69.getAuthor();
        items.Book book79 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { book51, book60, book69, book79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = book43.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book35, book43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean88 = book17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean89 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean90 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=1867, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=3573, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=3573, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str18, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str19, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isPurchasable();
        book6.setIsPurchasable(false);
        boolean boolean13 = book6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        items.Book book6 = new items.Book("LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=985, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=941, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1846, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        items.Book book6 = new items.Book("Book:  by hi!. Location: . Purchasable: true", "LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=2606, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        items.Book book6 = new items.Book("LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book:  by hi!. Location: . Purchasable: true", true, false, "Book: hi! by . Location: hi!. Purchasable: false", "LibraryItem [itemId=660, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setBorrowerEmail("LibraryItem [itemId=1391, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean9 = book6.isOverdue();
        book6.returnItem();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isRented();
        items.Book book17 = new items.Book("LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book");
        items.Book book24 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean25 = book24.isRented();
        book24.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean28 = book24.isRented();
        items.Book book35 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str36 = book35.getDetails();
        book35.returnItem();
        boolean boolean38 = book35.isPurchasable();
        double double39 = book35.calculateOverduePenalty();
        items.Book book46 = new items.Book("", "", true, true, "", "hi!");
        book46.returnItem();
        items.Book book54 = new items.Book("", "", true, true, "", "hi!");
        book54.returnItem();
        java.lang.String str56 = book54.getAuthor();
        items.Book book63 = new items.Book("", "", true, true, "", "hi!");
        book63.returnItem();
        java.lang.String str65 = book63.getAuthor();
        items.Book book72 = new items.Book("", "", true, true, "", "hi!");
        book72.returnItem();
        java.lang.String str74 = book72.getAuthor();
        java.lang.String str75 = book72.getAuthor();
        items.Book book82 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray83 = new items.LibraryItem[] { book54, book63, book72, book82 };
        java.util.ArrayList<items.LibraryItem> libraryItemList84 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList84, libraryItemArray83);
        boolean boolean86 = book46.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean87 = book35.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean88 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean89 = book17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean90 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList84);
        java.lang.String str91 = book6.getBorrowerEmail();
        java.time.LocalDate localDate92 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate92, 440, "LibraryItem [itemId=3166, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str36, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str91, "Book: hi! by . Location: hi!. Purchasable: true");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isOverdue();
        boolean boolean11 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=1561, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.returnItem();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        items.Book book6 = new items.Book("LibraryItem [itemId=768, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1021, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getTitle();
        java.time.LocalDate localDate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate8, 2148, "LibraryItem [itemId=2923, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        boolean boolean14 = book6.isRented();
        book6.setIsPurchasable(true);
        boolean boolean17 = book6.isRented();
        java.lang.String str18 = book6.getItemType();
        boolean boolean19 = book6.isRented();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=3647, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=3647, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=3647, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=3647, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Book" + "'", str18, "Book");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setIsPurchasable(false);
        book6.setLocation("LibraryItem [itemId=951, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book19 = new items.Book("", "", true, true, "", "hi!");
        book19.returnItem();
        java.lang.String str21 = book19.getAuthor();
        book19.setIsPurchasable(true);
        items.Book book30 = new items.Book("", "", true, true, "", "hi!");
        book30.returnItem();
        java.lang.String str32 = book30.getAuthor();
        java.lang.String str33 = book30.getAuthor();
        double double34 = book30.calculateOverduePenalty();
        items.Book book41 = new items.Book("", "", true, true, "", "hi!");
        book41.returnItem();
        items.Book book49 = new items.Book("", "", true, true, "", "hi!");
        book49.returnItem();
        java.lang.String str51 = book49.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        book67.returnItem();
        java.lang.String str69 = book67.getAuthor();
        java.lang.String str70 = book67.getAuthor();
        items.Book book77 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { book49, book58, book67, book77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = book41.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = book30.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = book19.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean84 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        int int85 = book6.getItemId();
        book6.setLocation("LibraryItem [itemId=2151, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3663 + "'", int85 == 3663);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        java.lang.String str52 = book6.getTitle();
        java.lang.String str53 = book6.getLocation();
        int int54 = book6.getItemId();
        book6.setIsPurchasable(false);
        book6.returnItem();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=3671, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=3671, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3671 + "'", int54 == 3671);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        items.Book book6 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean10 = book6.isPurchasable();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate11, 3212, "LibraryItem [itemId=3018, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        int int11 = book6.getItemId();
        java.lang.String str12 = book6.getTitle();
        double double13 = book6.calculateOverduePenalty();
        java.lang.String str14 = book6.toString();
        double double15 = book6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3686 + "'", int11 == 3686);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3686, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3686, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        items.Book book6 = new items.Book("LibraryItem [itemId=2282, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", false, false, "LibraryItem [itemId=2215, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=644, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate7, (int) (short) 100, "LibraryItem [itemId=2013, itemType=Book, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        items.Book book6 = new items.Book("LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getAuthor();
        java.lang.String str8 = book6.getDetails();
        book6.setLocation("LibraryItem [itemId=1721, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book17 = new items.Book("hi!", "", true, false, "hi!", "");
        book17.setIsPurchasable(true);
        book17.returnItem();
        java.lang.String str21 = book17.getAuthor();
        items.Book book28 = new items.Book("", "", true, true, "", "hi!");
        book28.returnItem();
        java.lang.String str30 = book28.getAuthor();
        java.lang.String str31 = book28.getAuthor();
        double double32 = book28.calculateOverduePenalty();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        items.Book book47 = new items.Book("", "", true, true, "", "hi!");
        book47.returnItem();
        java.lang.String str49 = book47.getAuthor();
        items.Book book56 = new items.Book("", "", true, true, "", "hi!");
        book56.returnItem();
        java.lang.String str58 = book56.getAuthor();
        items.Book book65 = new items.Book("", "", true, true, "", "hi!");
        book65.returnItem();
        java.lang.String str67 = book65.getAuthor();
        java.lang.String str68 = book65.getAuthor();
        items.Book book75 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray76 = new items.LibraryItem[] { book47, book56, book65, book75 };
        java.util.ArrayList<items.LibraryItem> libraryItemList77 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList77, libraryItemArray76);
        boolean boolean79 = book39.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList77);
        boolean boolean80 = book28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList77);
        boolean boolean81 = book17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList77);
        boolean boolean82 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList77);
        book6.setBorrowerEmail("LibraryItem [itemId=1576, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str8, "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.getAuthor();
        book6.setIsPurchasable(false);
        java.lang.String str52 = book6.getPrice();
        java.lang.Class<?> wildcardClass53 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        int int10 = book6.getItemId();
        java.lang.String str11 = book6.getLocation();
        boolean boolean12 = book6.isRented();
        java.lang.String str13 = book6.toString();
        int int14 = book6.getItemId();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3706 + "'", int10 == 3706);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=3706, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=3706, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3706 + "'", int14 == 3706);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        items.Book book6 = new items.Book("LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "Book:  by hi!. Location: . Purchasable: false");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isOverdue();
        boolean boolean10 = book6.isRented();
        java.lang.String str11 = book6.getPrice();
        boolean boolean12 = book6.isPurchasable();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str11, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        items.Book book6 = new items.Book("LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "Book:  by hi!. Location: . Purchasable: false");
        book6.setBorrowerEmail("LibraryItem [itemId=281, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = book6.getDetails();
        boolean boolean10 = book6.isOverdue();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Book:  by Book:  by hi!. Location: . Purchasable: false. Location: LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str9, "Book:  by Book:  by hi!. Location: . Purchasable: false. Location: LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getTitle();
        book6.setLocation("LibraryItem [itemId=737, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = book6.getDetails();
        boolean boolean12 = book6.isRented();
        boolean boolean13 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Book: hi! by . Location: LibraryItem [itemId=737, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str11, "Book: hi! by . Location: LibraryItem [itemId=737, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getItemType();
        java.lang.String str11 = book6.toString();
        java.lang.String str12 = book6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book" + "'", str10, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3733, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3733, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=3733, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=3733, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getLocation();
        java.lang.String str13 = book6.getBorrowerEmail();
        java.lang.String str14 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        java.lang.String str11 = book6.getDetails();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate12, 3453, "LibraryItem [itemId=871, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=3746, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=3746, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: false" + "'", str11, "Book: hi! by . Location: hi!. Purchasable: false");
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        items.Book book6 = new items.Book("LibraryItem [itemId=791, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=3753, itemType=Book, location=LibraryItem [itemId=791, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=3753, itemType=Book, location=LibraryItem [itemId=791, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        boolean boolean14 = book6.isRented();
        book6.setIsPurchasable(true);
        boolean boolean17 = book6.isRented();
        double double18 = book6.calculateOverduePenalty();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=3754, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=3754, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=3754, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=3754, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        items.Book book6 = new items.Book("Book:  by hi!. Location: . Purchasable: true", "LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getLocation();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str7, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getTitle();
        java.lang.String str9 = book6.getDetails();
        items.Book book16 = new items.Book("", "", true, true, "", "hi!");
        book16.returnItem();
        java.lang.String str18 = book16.getAuthor();
        book16.setIsPurchasable(true);
        items.Book book27 = new items.Book("", "", true, true, "", "hi!");
        book27.returnItem();
        java.lang.String str29 = book27.getAuthor();
        java.lang.String str30 = book27.getAuthor();
        double double31 = book27.calculateOverduePenalty();
        items.Book book38 = new items.Book("", "", true, true, "", "hi!");
        book38.returnItem();
        items.Book book46 = new items.Book("", "", true, true, "", "hi!");
        book46.returnItem();
        java.lang.String str48 = book46.getAuthor();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        book64.returnItem();
        java.lang.String str66 = book64.getAuthor();
        java.lang.String str67 = book64.getAuthor();
        items.Book book74 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray75 = new items.LibraryItem[] { book46, book55, book64, book74 };
        java.util.ArrayList<items.LibraryItem> libraryItemList76 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList76, libraryItemArray75);
        boolean boolean78 = book38.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean79 = book27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean80 = book16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean81 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList76);
        book6.setBorrowerEmail("LibraryItem [itemId=3363, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate84 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate84, 0, "LibraryItem [itemId=2923, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str9, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        int int89 = book6.getItemId();
        java.lang.String str90 = book6.getPrice();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3779 + "'", int89 == 3779);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        boolean boolean14 = book6.isRented();
        book6.setIsPurchasable(true);
        boolean boolean17 = book6.isRented();
        java.lang.String str18 = book6.getPrice();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=3828, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=3828, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=3828, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=3828, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        java.lang.String str48 = book6.getPrice();
        java.lang.String str49 = book6.getTitle();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        java.lang.String str19 = book17.getAuthor();
        java.lang.String str20 = book17.getAuthor();
        double double21 = book17.calculateOverduePenalty();
        items.Book book28 = new items.Book("", "", true, true, "", "hi!");
        book28.returnItem();
        items.Book book36 = new items.Book("", "", true, true, "", "hi!");
        book36.returnItem();
        java.lang.String str38 = book36.getAuthor();
        items.Book book45 = new items.Book("", "", true, true, "", "hi!");
        book45.returnItem();
        java.lang.String str47 = book45.getAuthor();
        items.Book book54 = new items.Book("", "", true, true, "", "hi!");
        book54.returnItem();
        java.lang.String str56 = book54.getAuthor();
        java.lang.String str57 = book54.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray65 = new items.LibraryItem[] { book36, book45, book54, book64 };
        java.util.ArrayList<items.LibraryItem> libraryItemList66 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList66, libraryItemArray65);
        boolean boolean68 = book28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        boolean boolean69 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        boolean boolean70 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        java.time.LocalDate localDate71 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate71, 1877, "LibraryItem [itemId=1418, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        items.Book book6 = new items.Book("LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "Book:  by hi!. Location: . Purchasable: false");
        book6.returnItem();
        boolean boolean8 = book6.isOverdue();
        java.lang.Class<?> wildcardClass9 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        double double7 = book6.calculateOverduePenalty();
        java.time.LocalDate localDate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate8, 1821, "LibraryItem [itemId=2220, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        items.Book book6 = new items.Book("LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", true, false, "LibraryItem [itemId=950, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=987, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getItemType();
        java.lang.String str8 = book6.getDetails();
        book6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book" + "'", str7, "Book");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: LibraryItem [itemId=950, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=987, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str8, "Book: LibraryItem [itemId=950, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=987, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.getTitle();
        java.lang.String str49 = book6.getTitle();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean52 = book6.isOverdue();
        java.lang.String str53 = book6.getPrice();
        book6.setLocation("LibraryItem [itemId=1314, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.setBorrowerEmail("LibraryItem [itemId=886, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean13 = book6.isPurchasable();
        java.lang.String str14 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=3870, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=3870, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getLocation();
        java.lang.String str13 = book6.getLocation();
        boolean boolean14 = book6.isPurchasable();
        java.lang.String str15 = book6.getAuthor();
        java.lang.Class<?> wildcardClass16 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str53 = book6.getDetails();
        java.lang.String str54 = book6.getBorrowerEmail();
        boolean boolean55 = book6.isOverdue();
        book6.setLocation("LibraryItem [itemId=1089, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=3882, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=3882, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str53, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str54, "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isOverdue();
        int int53 = book6.getItemId();
        book6.setBorrowerEmail("LibraryItem [itemId=403, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate56 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate56, 0, "LibraryItem [itemId=2282, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=3887, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=3887, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3887 + "'", int53 == 3887);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        items.Book book6 = new items.Book("LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book:  by hi!. Location: . Purchasable: true", true, false, "Book: hi! by . Location: hi!. Purchasable: false", "LibraryItem [itemId=660, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        book6.setLocation("");
        book6.setIsPurchasable(true);
        java.lang.String str14 = book6.getItemType();
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3904 + "'", int9 == 3904);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Book" + "'", str14, "Book");
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean51 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=3925, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=3925, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        double double49 = book6.calculateOverduePenalty();
        book6.setLocation("LibraryItem [itemId=3033, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isOverdue();
        items.Book book16 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean17 = book16.isOverdue();
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        java.lang.String str42 = book40.getAuthor();
        items.Book book49 = new items.Book("", "", true, true, "", "hi!");
        book49.returnItem();
        java.lang.String str51 = book49.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        java.lang.String str61 = book58.getAuthor();
        items.Book book68 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray69 = new items.LibraryItem[] { book40, book49, book58, book68 };
        java.util.ArrayList<items.LibraryItem> libraryItemList70 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList70, libraryItemArray69);
        boolean boolean72 = book32.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        items.LibraryItem[] libraryItemArray73 = new items.LibraryItem[] { book24, book32 };
        java.util.ArrayList<items.LibraryItem> libraryItemList74 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList74, libraryItemArray73);
        boolean boolean76 = book16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList74);
        boolean boolean77 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList74);
        java.lang.String str78 = book6.getTitle();
        java.lang.String str79 = book6.toString();
        java.lang.String str80 = book6.getAuthor();
        java.time.LocalDate localDate81 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate81, 0, "LibraryItem [itemId=1687, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(libraryItemArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "LibraryItem [itemId=3952, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str79, "LibraryItem [itemId=3952, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getBorrowerEmail();
        book6.setLocation("Book: LibraryItem [itemId=950, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=987, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
        boolean boolean13 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        double double9 = book6.calculateOverduePenalty();
        book6.setBorrowerEmail("LibraryItem [itemId=941, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(true);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        items.Book book6 = new items.Book("LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", false, true, "", "Book:  by hi!. Location: . Purchasable: true");
        java.lang.String str7 = book6.getItemType();
        java.lang.String str8 = book6.getDetails();
        java.lang.String str9 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book" + "'", str7, "Book");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book:  by Book:  by hi!. Location: . Purchasable: true. Location: LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str8, "Book:  by Book:  by hi!. Location: . Purchasable: true. Location: LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str9, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isOverdue();
        items.Book book16 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean17 = book16.isOverdue();
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        java.lang.String str42 = book40.getAuthor();
        items.Book book49 = new items.Book("", "", true, true, "", "hi!");
        book49.returnItem();
        java.lang.String str51 = book49.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        java.lang.String str61 = book58.getAuthor();
        items.Book book68 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray69 = new items.LibraryItem[] { book40, book49, book58, book68 };
        java.util.ArrayList<items.LibraryItem> libraryItemList70 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList70, libraryItemArray69);
        boolean boolean72 = book32.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        items.LibraryItem[] libraryItemArray73 = new items.LibraryItem[] { book24, book32 };
        java.util.ArrayList<items.LibraryItem> libraryItemList74 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList74, libraryItemArray73);
        boolean boolean76 = book16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList74);
        boolean boolean77 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList74);
        java.lang.String str78 = book6.getDetails();
        java.lang.String str79 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(libraryItemArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str78, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        boolean boolean10 = book6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4003, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4003, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str53 = book6.getDetails();
        java.lang.String str54 = book6.getBorrowerEmail();
        java.lang.String str55 = book6.getDetails();
        java.lang.String str56 = book6.getLocation();
        java.lang.String str57 = book6.getItemType();
        boolean boolean58 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=4004, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=4004, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str53, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str54, "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str55, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Book" + "'", str57, "Book");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        items.Book book6 = new items.Book("LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=251, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book13 = new items.Book("", "", true, true, "", "hi!");
        book13.returnItem();
        boolean boolean15 = book13.isPurchasable();
        items.Book book22 = new items.Book("hi!", "", true, false, "hi!", "");
        book22.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book31 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean32 = book31.isOverdue();
        items.Book book39 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean40 = book39.isOverdue();
        items.Book book47 = new items.Book("", "", true, true, "", "hi!");
        book47.returnItem();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        book64.returnItem();
        java.lang.String str66 = book64.getAuthor();
        items.Book book73 = new items.Book("", "", true, true, "", "hi!");
        book73.returnItem();
        java.lang.String str75 = book73.getAuthor();
        java.lang.String str76 = book73.getAuthor();
        items.Book book83 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book55, book64, book73, book83 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book47.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { book39, book47 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = book13.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        java.lang.String str95 = book6.getItemType();
        java.lang.Class<?> wildcardClass96 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Book" + "'", str95, "Book");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        double double7 = book6.calculateOverduePenalty();
        boolean boolean8 = book6.isPurchasable();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getItemType();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book" + "'", str10, "Book");
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getTitle();
        java.lang.String str9 = book6.toString();
        double double10 = book6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4043, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4043, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.getAuthor();
        double double50 = book6.calculateOverduePenalty();
        boolean boolean51 = book6.isPurchasable();
        int int52 = book6.getItemId();
        java.time.LocalDate localDate53 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate53, 4036, "LibraryItem [itemId=3754, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4044 + "'", int52 == 4044);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        int int51 = book6.getItemId();
        java.lang.String str52 = book6.getDetails();
        java.lang.String str53 = book6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=4055, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=4055, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4055 + "'", int51 == 4055);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str52, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        items.Book book6 = new items.Book("LibraryItem [itemId=2282, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", false, false, "LibraryItem [itemId=2215, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=644, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass7 = book6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.getTitle();
        java.lang.String str49 = book6.getTitle();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate52 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate52, 3663, "LibraryItem [itemId=3287, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        boolean boolean11 = book6.isPurchasable();
        items.Book book18 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str19 = book18.getDetails();
        java.lang.String str20 = book18.getDetails();
        boolean boolean21 = book18.isOverdue();
        items.Book book28 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean29 = book28.isOverdue();
        items.Book book36 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean37 = book36.isOverdue();
        items.Book book44 = new items.Book("", "", true, true, "", "hi!");
        book44.returnItem();
        items.Book book52 = new items.Book("", "", true, true, "", "hi!");
        book52.returnItem();
        java.lang.String str54 = book52.getAuthor();
        items.Book book61 = new items.Book("", "", true, true, "", "hi!");
        book61.returnItem();
        java.lang.String str63 = book61.getAuthor();
        items.Book book70 = new items.Book("", "", true, true, "", "hi!");
        book70.returnItem();
        java.lang.String str72 = book70.getAuthor();
        java.lang.String str73 = book70.getAuthor();
        items.Book book80 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book52, book61, book70, book80 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book44.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        items.LibraryItem[] libraryItemArray85 = new items.LibraryItem[] { book36, book44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList86 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList86, libraryItemArray85);
        boolean boolean88 = book28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList86);
        boolean boolean89 = book18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList86);
        boolean boolean90 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList86);
        java.util.List<items.LibraryItem> libraryItemList91 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = book6.hasBorrowingPrivileges(libraryItemList91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str19, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str20, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(libraryItemArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str53 = book6.toString();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=4082, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=4082, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "LibraryItem [itemId=4082, itemType=Book, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str53, "LibraryItem [itemId=4082, itemType=Book, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.getTitle();
        double double49 = book6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        items.Book book6 = new items.Book("", "LibraryItem [itemId=1198, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=962, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3931, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.getTitle();
        java.lang.String str49 = book6.getTitle();
        book6.setIsPurchasable(true);
        book6.setLocation("LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean54 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isOverdue();
        items.Book book16 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean17 = book16.isOverdue();
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        java.lang.String str42 = book40.getAuthor();
        items.Book book49 = new items.Book("", "", true, true, "", "hi!");
        book49.returnItem();
        java.lang.String str51 = book49.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        java.lang.String str61 = book58.getAuthor();
        items.Book book68 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray69 = new items.LibraryItem[] { book40, book49, book58, book68 };
        java.util.ArrayList<items.LibraryItem> libraryItemList70 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList70, libraryItemArray69);
        boolean boolean72 = book32.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        items.LibraryItem[] libraryItemArray73 = new items.LibraryItem[] { book24, book32 };
        java.util.ArrayList<items.LibraryItem> libraryItemList74 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList74, libraryItemArray73);
        boolean boolean76 = book16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList74);
        boolean boolean77 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList74);
        java.lang.String str78 = book6.getTitle();
        book6.setLocation("LibraryItem [itemId=746, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str81 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(libraryItemArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        boolean boolean14 = book6.isRented();
        book6.setIsPurchasable(false);
        book6.setBorrowerEmail("LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4138, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4138, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4138, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4138, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        java.lang.String str11 = book6.getLocation();
        java.lang.String str12 = book6.getItemType();
        java.lang.String str13 = book6.getBorrowerEmail();
        java.lang.String str14 = book6.toString();
        java.lang.String str15 = book6.getLocation();
        java.lang.Class<?> wildcardClass16 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Book" + "'", str12, "Book");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str13, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=4140, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=4140, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isOverdue();
        items.Book book16 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean17 = book16.isOverdue();
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        java.lang.String str42 = book40.getAuthor();
        items.Book book49 = new items.Book("", "", true, true, "", "hi!");
        book49.returnItem();
        java.lang.String str51 = book49.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        java.lang.String str61 = book58.getAuthor();
        items.Book book68 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray69 = new items.LibraryItem[] { book40, book49, book58, book68 };
        java.util.ArrayList<items.LibraryItem> libraryItemList70 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList70, libraryItemArray69);
        boolean boolean72 = book32.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        items.LibraryItem[] libraryItemArray73 = new items.LibraryItem[] { book24, book32 };
        java.util.ArrayList<items.LibraryItem> libraryItemList74 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList74, libraryItemArray73);
        boolean boolean76 = book16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList74);
        boolean boolean77 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList74);
        java.lang.String str78 = book6.getTitle();
        boolean boolean79 = book6.isOverdue();
        java.time.LocalDate localDate80 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate80, 2417, "LibraryItem [itemId=1937, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(libraryItemArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        java.lang.String str52 = book6.getTitle();
        java.lang.String str53 = book6.getTitle();
        java.lang.String str54 = book6.toString();
        java.lang.String str55 = book6.toString();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=4167, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=4167, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LibraryItem [itemId=4167, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str54, "LibraryItem [itemId=4167, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "LibraryItem [itemId=4167, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str55, "LibraryItem [itemId=4167, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        items.Book book6 = new items.Book("LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book");
        boolean boolean7 = book6.isPurchasable();
        book6.setLocation("LibraryItem [itemId=240, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean10 = book6.isOverdue();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getPrice();
        java.lang.String str10 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book15 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean16 = book15.isOverdue();
        items.Book book23 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean24 = book23.isOverdue();
        items.Book book31 = new items.Book("", "", true, true, "", "hi!");
        book31.returnItem();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        java.lang.String str60 = book57.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { book39, book48, book57, book67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book23, book31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = book6.isPurchasable();
        java.lang.String str78 = book6.toString();
        java.time.LocalDate localDate79 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate79, 3148, "LibraryItem [itemId=714, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "LibraryItem [itemId=4181, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str78, "LibraryItem [itemId=4181, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        items.Book book6 = new items.Book("LibraryItem [itemId=1077, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1114, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=1868, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3231, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isPurchasable();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isOverdue();
        boolean boolean11 = book6.isRented();
        java.lang.String str12 = book6.toString();
        java.lang.String str13 = book6.getItemType();
        book6.setBorrowerEmail("LibraryItem [itemId=1219, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = book6.getPrice();
        items.Book book23 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str24 = book23.getDetails();
        book23.returnItem();
        java.lang.String str26 = book23.toString();
        book23.returnItem();
        java.lang.String str28 = book23.getBorrowerEmail();
        items.Book book35 = new items.Book("", "", true, true, "", "hi!");
        book35.returnItem();
        boolean boolean37 = book35.isPurchasable();
        boolean boolean38 = book35.isRented();
        java.lang.String str39 = book35.getLocation();
        items.Book book46 = new items.Book("", "", true, true, "", "hi!");
        book46.returnItem();
        items.Book book54 = new items.Book("", "", true, true, "", "hi!");
        book54.returnItem();
        java.lang.String str56 = book54.getAuthor();
        items.Book book63 = new items.Book("", "", true, true, "", "hi!");
        book63.returnItem();
        java.lang.String str65 = book63.getAuthor();
        items.Book book72 = new items.Book("", "", true, true, "", "hi!");
        book72.returnItem();
        java.lang.String str74 = book72.getAuthor();
        java.lang.String str75 = book72.getAuthor();
        items.Book book82 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray83 = new items.LibraryItem[] { book54, book63, book72, book82 };
        java.util.ArrayList<items.LibraryItem> libraryItemList84 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList84, libraryItemArray83);
        boolean boolean86 = book46.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean87 = book35.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean88 = book23.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean89 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4191, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4191, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book" + "'", str13, "Book");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str24, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "LibraryItem [itemId=4192, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str26, "LibraryItem [itemId=4192, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        java.time.LocalDate localDate52 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate52, 3543, "LibraryItem [itemId=217, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=4219, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=4219, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        items.Book book6 = new items.Book("LibraryItem [itemId=4004, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2798, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=2181, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3482, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setIsPurchasable(false);
        java.lang.String str89 = book6.getPrice();
        java.lang.String str90 = book6.getLocation();
        book6.returnItem();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        boolean boolean11 = book6.isPurchasable();
        items.Book book18 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str19 = book18.getDetails();
        java.lang.String str20 = book18.getDetails();
        boolean boolean21 = book18.isOverdue();
        items.Book book28 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean29 = book28.isOverdue();
        items.Book book36 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean37 = book36.isOverdue();
        items.Book book44 = new items.Book("", "", true, true, "", "hi!");
        book44.returnItem();
        items.Book book52 = new items.Book("", "", true, true, "", "hi!");
        book52.returnItem();
        java.lang.String str54 = book52.getAuthor();
        items.Book book61 = new items.Book("", "", true, true, "", "hi!");
        book61.returnItem();
        java.lang.String str63 = book61.getAuthor();
        items.Book book70 = new items.Book("", "", true, true, "", "hi!");
        book70.returnItem();
        java.lang.String str72 = book70.getAuthor();
        java.lang.String str73 = book70.getAuthor();
        items.Book book80 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book52, book61, book70, book80 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book44.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        items.LibraryItem[] libraryItemArray85 = new items.LibraryItem[] { book36, book44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList86 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList86, libraryItemArray85);
        boolean boolean88 = book28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList86);
        boolean boolean89 = book18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList86);
        boolean boolean90 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList86);
        boolean boolean91 = book6.isOverdue();
        java.lang.String str92 = book6.getPrice();
        book6.returnItem();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str19, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str20, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(libraryItemArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        book6.setLocation("");
        double double12 = book6.calculateOverduePenalty();
        java.time.LocalDate localDate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate13, 1764, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4250 + "'", int9 == 4250);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getLocation();
        java.lang.String str13 = book6.getLocation();
        boolean boolean14 = book6.isPurchasable();
        java.lang.String str15 = book6.getAuthor();
        int int16 = book6.getItemId();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4253 + "'", int16 == 4253);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isOverdue();
        java.lang.String str53 = book6.getDetails();
        book6.returnItem();
        java.lang.Class<?> wildcardClass55 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=4255, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=4255, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str53, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        java.lang.String str9 = book6.getAuthor();
        book6.returnItem();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        java.lang.String str10 = book6.getLocation();
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        items.Book book25 = new items.Book("", "", true, true, "", "hi!");
        book25.returnItem();
        java.lang.String str27 = book25.getAuthor();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        java.lang.String str36 = book34.getAuthor();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        java.lang.String str45 = book43.getAuthor();
        java.lang.String str46 = book43.getAuthor();
        items.Book book53 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { book25, book34, book43, book53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        java.lang.String str59 = book6.getLocation();
        java.lang.String str60 = book6.getPrice();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        boolean boolean14 = book6.isRented();
        book6.setIsPurchasable(true);
        boolean boolean17 = book6.isRented();
        boolean boolean18 = book6.isOverdue();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4267, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4267, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4267, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4267, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        int int8 = book6.getItemId();
        boolean boolean9 = book6.isOverdue();
        boolean boolean10 = book6.isOverdue();
        int int11 = book6.getItemId();
        java.lang.String str12 = book6.getDetails();
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4288 + "'", int8 == 4288);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4288 + "'", int11 == 4288);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str12, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        items.Book book6 = new items.Book("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1979, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=881, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1089, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book13 = new items.Book("LibraryItem [itemId=791, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = book13.getTitle();
        java.lang.String str15 = book13.getAuthor();
        items.Book book22 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book22.setIsPurchasable(false);
        java.lang.String str25 = book22.toString();
        items.Book book32 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean33 = book32.isRented();
        book32.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean36 = book32.isRented();
        items.Book book43 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str44 = book43.getDetails();
        book43.returnItem();
        boolean boolean46 = book43.isPurchasable();
        double double47 = book43.calculateOverduePenalty();
        items.Book book54 = new items.Book("", "", true, true, "", "hi!");
        book54.returnItem();
        items.Book book62 = new items.Book("", "", true, true, "", "hi!");
        book62.returnItem();
        java.lang.String str64 = book62.getAuthor();
        items.Book book71 = new items.Book("", "", true, true, "", "hi!");
        book71.returnItem();
        java.lang.String str73 = book71.getAuthor();
        items.Book book80 = new items.Book("", "", true, true, "", "hi!");
        book80.returnItem();
        java.lang.String str82 = book80.getAuthor();
        java.lang.String str83 = book80.getAuthor();
        items.Book book90 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray91 = new items.LibraryItem[] { book62, book71, book80, book90 };
        java.util.ArrayList<items.LibraryItem> libraryItemList92 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList92, libraryItemArray91);
        boolean boolean94 = book54.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean95 = book43.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean96 = book32.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean97 = book22.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean98 = book13.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean99 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "LibraryItem [itemId=4291, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str25, "LibraryItem [itemId=4291, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str44, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getLocation();
        java.lang.String str13 = book6.getLocation();
        java.lang.String str14 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setIsPurchasable(false);
        book6.setLocation("LibraryItem [itemId=951, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book19 = new items.Book("", "", true, true, "", "hi!");
        book19.returnItem();
        java.lang.String str21 = book19.getAuthor();
        book19.setIsPurchasable(true);
        items.Book book30 = new items.Book("", "", true, true, "", "hi!");
        book30.returnItem();
        java.lang.String str32 = book30.getAuthor();
        java.lang.String str33 = book30.getAuthor();
        double double34 = book30.calculateOverduePenalty();
        items.Book book41 = new items.Book("", "", true, true, "", "hi!");
        book41.returnItem();
        items.Book book49 = new items.Book("", "", true, true, "", "hi!");
        book49.returnItem();
        java.lang.String str51 = book49.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        book67.returnItem();
        java.lang.String str69 = book67.getAuthor();
        java.lang.String str70 = book67.getAuthor();
        items.Book book77 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { book49, book58, book67, book77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = book41.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = book30.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = book19.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean84 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        int int85 = book6.getItemId();
        boolean boolean86 = book6.isOverdue();
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4305 + "'", int85 == 4305);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        java.lang.String str11 = book6.getDetails();
        boolean boolean12 = book6.isPurchasable();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4313, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4313, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: false" + "'", str11, "Book: hi! by . Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        boolean boolean10 = book6.isOverdue();
        java.lang.String str11 = book6.toString();
        java.lang.String str12 = book6.getAuthor();
        book6.setLocation("LibraryItem [itemId=2293, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4314, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4314, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=4314, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=4314, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        items.Book book17 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str18 = book17.getDetails();
        java.lang.String str19 = book17.getDetails();
        boolean boolean20 = book17.isOverdue();
        items.Book book27 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean28 = book27.isOverdue();
        items.Book book35 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean36 = book35.isOverdue();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        java.lang.String str53 = book51.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        items.Book book69 = new items.Book("", "", true, true, "", "hi!");
        book69.returnItem();
        java.lang.String str71 = book69.getAuthor();
        java.lang.String str72 = book69.getAuthor();
        items.Book book79 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { book51, book60, book69, book79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = book43.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book35, book43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean88 = book17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean89 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        book6.setIsPurchasable(true);
        java.lang.Class<?> wildcardClass92 = book6.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4332, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4332, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str18, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str19, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isOverdue();
        int int53 = book6.getItemId();
        book6.setBorrowerEmail("LibraryItem [itemId=403, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass56 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=4358, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=4358, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4358 + "'", int53 == 4358);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.toString();
        java.lang.String str9 = book6.getTitle();
        book6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4365, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4365, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        items.Book book6 = new items.Book("LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=251, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book13 = new items.Book("", "", true, true, "", "hi!");
        book13.returnItem();
        boolean boolean15 = book13.isPurchasable();
        items.Book book22 = new items.Book("hi!", "", true, false, "hi!", "");
        book22.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book31 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean32 = book31.isOverdue();
        items.Book book39 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean40 = book39.isOverdue();
        items.Book book47 = new items.Book("", "", true, true, "", "hi!");
        book47.returnItem();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        book64.returnItem();
        java.lang.String str66 = book64.getAuthor();
        items.Book book73 = new items.Book("", "", true, true, "", "hi!");
        book73.returnItem();
        java.lang.String str75 = book73.getAuthor();
        java.lang.String str76 = book73.getAuthor();
        items.Book book83 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book55, book64, book73, book83 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book47.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { book39, book47 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = book13.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        book6.setIsPurchasable(true);
        book6.setIsPurchasable(false);
        boolean boolean99 = book6.isRented();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean7 = book6.isOverdue();
        items.Book book14 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean15 = book14.isOverdue();
        items.Book book22 = new items.Book("", "", true, true, "", "hi!");
        book22.returnItem();
        items.Book book30 = new items.Book("", "", true, true, "", "hi!");
        book30.returnItem();
        java.lang.String str32 = book30.getAuthor();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        java.lang.String str51 = book48.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray59 = new items.LibraryItem[] { book30, book39, book48, book58 };
        java.util.ArrayList<items.LibraryItem> libraryItemList60 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList60, libraryItemArray59);
        boolean boolean62 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList60);
        items.LibraryItem[] libraryItemArray63 = new items.LibraryItem[] { book14, book22 };
        java.util.ArrayList<items.LibraryItem> libraryItemList64 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList64, libraryItemArray63);
        boolean boolean66 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList64);
        java.lang.String str67 = book6.getTitle();
        java.lang.String str68 = book6.getBorrowerEmail();
        java.time.LocalDate localDate69 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate69, 736, "LibraryItem [itemId=3355, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(libraryItemArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        book6.setLocation("");
        java.lang.String str13 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book: hi! by . Location: . Purchasable: false" + "'", str13, "Book: hi! by . Location: . Purchasable: false");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        int int87 = book6.getItemId();
        java.time.LocalDate localDate88 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate88, 473, "LibraryItem [itemId=1524, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4389 + "'", int87 == 4389);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        double double11 = book6.calculateOverduePenalty();
        items.Book book18 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean19 = book18.isOverdue();
        items.Book book26 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean27 = book26.isOverdue();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        book42.returnItem();
        java.lang.String str44 = book42.getAuthor();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        java.lang.String str53 = book51.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        java.lang.String str63 = book60.getAuthor();
        items.Book book70 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray71 = new items.LibraryItem[] { book42, book51, book60, book70 };
        java.util.ArrayList<items.LibraryItem> libraryItemList72 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList72, libraryItemArray71);
        boolean boolean74 = book34.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList72);
        items.LibraryItem[] libraryItemArray75 = new items.LibraryItem[] { book26, book34 };
        java.util.ArrayList<items.LibraryItem> libraryItemList76 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList76, libraryItemArray75);
        boolean boolean78 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean79 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList76);
        java.lang.String str80 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(libraryItemArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str80, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        book6.returnItem();
        java.lang.String str11 = book6.getBorrowerEmail();
        items.Book book18 = new items.Book("", "", true, true, "", "hi!");
        book18.returnItem();
        boolean boolean20 = book18.isPurchasable();
        boolean boolean21 = book18.isRented();
        java.lang.String str22 = book18.getLocation();
        items.Book book29 = new items.Book("", "", true, true, "", "hi!");
        book29.returnItem();
        items.Book book37 = new items.Book("", "", true, true, "", "hi!");
        book37.returnItem();
        java.lang.String str39 = book37.getAuthor();
        items.Book book46 = new items.Book("", "", true, true, "", "hi!");
        book46.returnItem();
        java.lang.String str48 = book46.getAuthor();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        java.lang.String str58 = book55.getAuthor();
        items.Book book65 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray66 = new items.LibraryItem[] { book37, book46, book55, book65 };
        java.util.ArrayList<items.LibraryItem> libraryItemList67 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList67, libraryItemArray66);
        boolean boolean69 = book29.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean70 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean71 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        java.lang.Class<?> wildcardClass72 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4407, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4407, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = book6.isOverdue();
        java.lang.String str48 = book6.getDetails();
        book6.setBorrowerEmail("LibraryItem [itemId=165, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int51 = book6.getItemId();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str48, "Book:  by hi!. Location: . Purchasable: true");
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4423 + "'", int51 == 4423);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        book6.returnItem();
        book6.setIsPurchasable(true);
        book6.setBorrowerEmail("LibraryItem [itemId=3593, itemType=Book, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate18 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate18, 121, "LibraryItem [itemId=1434, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4428, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4428, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4428, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4428, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        double double11 = book6.calculateOverduePenalty();
        items.Book book18 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean19 = book18.isOverdue();
        items.Book book26 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean27 = book26.isOverdue();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        book42.returnItem();
        java.lang.String str44 = book42.getAuthor();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        java.lang.String str53 = book51.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        java.lang.String str63 = book60.getAuthor();
        items.Book book70 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray71 = new items.LibraryItem[] { book42, book51, book60, book70 };
        java.util.ArrayList<items.LibraryItem> libraryItemList72 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList72, libraryItemArray71);
        boolean boolean74 = book34.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList72);
        items.LibraryItem[] libraryItemArray75 = new items.LibraryItem[] { book26, book34 };
        java.util.ArrayList<items.LibraryItem> libraryItemList76 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList76, libraryItemArray75);
        boolean boolean78 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean79 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList76);
        java.lang.String str80 = book6.getAuthor();
        java.lang.String str81 = book6.getAuthor();
        double double82 = book6.calculateOverduePenalty();
        boolean boolean83 = book6.isRented();
        java.lang.String str84 = book6.getAuthor();
        java.lang.String str85 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(libraryItemArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str85, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str53 = book6.getDetails();
        java.lang.String str54 = book6.getBorrowerEmail();
        boolean boolean55 = book6.isOverdue();
        java.lang.String str56 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=4445, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=4445, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str53, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str54, "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isOverdue();
        java.lang.String str53 = book6.toString();
        boolean boolean54 = book6.isPurchasable();
        java.lang.String str55 = book6.getItemType();
        double double56 = book6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=4473, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=4473, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "LibraryItem [itemId=4473, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str53, "LibraryItem [itemId=4473, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Book" + "'", str55, "Book");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        items.Book book6 = new items.Book("LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", true, false, "LibraryItem [itemId=950, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=987, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getItemType();
        java.lang.String str8 = book6.toString();
        java.lang.String str9 = book6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book" + "'", str7, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4478, itemType=Book, location=LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=950, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4478, itemType=Book, location=LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=950, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.getAuthor();
        double double50 = book6.calculateOverduePenalty();
        book6.setBorrowerEmail("LibraryItem [itemId=3882, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str53 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        items.Book book6 = new items.Book("LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book:  by hi!. Location: . Purchasable: true", true, false, "Book: hi! by . Location: hi!. Purchasable: false", "LibraryItem [itemId=660, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.returnItem();
        java.lang.String str8 = book6.getDetails();
        java.lang.String str9 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: Book: hi! by . Location: hi!. Purchasable: false by LibraryItem [itemId=660, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str8, "Book: Book: hi! by . Location: hi!. Purchasable: false by LibraryItem [itemId=660, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        java.lang.String str11 = book6.getPrice();
        java.lang.String str12 = book6.getBorrowerEmail();
        boolean boolean13 = book6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        book6.returnItem();
        java.lang.Class<?> wildcardClass14 = book6.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4503, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4503, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4503, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4503, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getDetails();
        java.time.LocalDate localDate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate13, 216, "LibraryItem [itemId=1418, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str12, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.getTitle();
        java.lang.String str49 = book6.getTitle();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean52 = book6.isOverdue();
        java.lang.String str53 = book6.getPrice();
        java.lang.String str54 = book6.toString();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LibraryItem [itemId=4532, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str54, "LibraryItem [itemId=4532, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        java.lang.String str10 = book6.getLocation();
        java.lang.Class<?> wildcardClass11 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isRented();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double12 = book6.calculateOverduePenalty();
        java.lang.String str13 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        double double9 = book6.calculateOverduePenalty();
        book6.setBorrowerEmail("LibraryItem [itemId=941, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book18 = new items.Book("hi!", "", true, false, "hi!", "");
        book18.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book27 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean28 = book27.isOverdue();
        items.Book book35 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean36 = book35.isOverdue();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        java.lang.String str53 = book51.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        items.Book book69 = new items.Book("", "", true, true, "", "hi!");
        book69.returnItem();
        java.lang.String str71 = book69.getAuthor();
        java.lang.String str72 = book69.getAuthor();
        items.Book book79 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { book51, book60, book69, book79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = book43.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book35, book43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean88 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean89 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        int int90 = book6.getItemId();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4543 + "'", int90 == 4543);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        boolean boolean10 = book6.isOverdue();
        boolean boolean11 = book6.isOverdue();
        java.lang.String str12 = book6.getAuthor();
        int int13 = book6.getItemId();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4553, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4553, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4553 + "'", int13 == 4553);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        boolean boolean11 = book6.isPurchasable();
        boolean boolean12 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=941, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str15, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        java.lang.String str11 = book6.getAuthor();
        book6.setLocation("LibraryItem [itemId=1842, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        items.Book book6 = new items.Book("LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book");
        boolean boolean7 = book6.isPurchasable();
        book6.setLocation("LibraryItem [itemId=240, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setBorrowerEmail("LibraryItem [itemId=397, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        items.Book book6 = new items.Book("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book:  by hi!. Location: . Purchasable: true", true, false, "LibraryItem [itemId=291, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=677, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setLocation("LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isOverdue();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        int int89 = book6.getItemId();
        java.lang.String str90 = book6.getBorrowerEmail();
        java.lang.String str91 = book6.getBorrowerEmail();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4564 + "'", int89 == 4564);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str90, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str91, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        int int87 = book6.getItemId();
        boolean boolean88 = book6.isRented();
        java.lang.String str89 = book6.getPrice();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4574 + "'", int87 == 4574);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        items.Book book6 = new items.Book("LibraryItem [itemId=2861, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3461, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=3186, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1561, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isPurchasable();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean7 = book6.isOverdue();
        items.Book book14 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean15 = book14.isOverdue();
        items.Book book22 = new items.Book("", "", true, true, "", "hi!");
        book22.returnItem();
        items.Book book30 = new items.Book("", "", true, true, "", "hi!");
        book30.returnItem();
        java.lang.String str32 = book30.getAuthor();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        java.lang.String str51 = book48.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray59 = new items.LibraryItem[] { book30, book39, book48, book58 };
        java.util.ArrayList<items.LibraryItem> libraryItemList60 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList60, libraryItemArray59);
        boolean boolean62 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList60);
        items.LibraryItem[] libraryItemArray63 = new items.LibraryItem[] { book14, book22 };
        java.util.ArrayList<items.LibraryItem> libraryItemList64 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList64, libraryItemArray63);
        boolean boolean66 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList64);
        java.lang.String str67 = book6.getTitle();
        java.lang.String str68 = book6.getBorrowerEmail();
        java.lang.String str69 = book6.getBorrowerEmail();
        java.util.List<items.LibraryItem> libraryItemList70 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = book6.hasBorrowingPrivileges(libraryItemList70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(libraryItemArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        items.Book book6 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean10 = book6.isRented();
        book6.setIsPurchasable(false);
        book6.setBorrowerEmail("LibraryItem [itemId=1286, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setLocation("LibraryItem [itemId=1314, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = book6.getDetails();
        double double18 = book6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Book:  by LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=1314, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str17, "Book:  by LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=1314, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        items.Book book6 = new items.Book("LibraryItem [itemId=3947, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book:  by Book:  by hi!. Location: . Purchasable: true. Location: LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", false, true, "LibraryItem [itemId=3647, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3328, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        java.lang.String str11 = book6.getPrice();
        java.lang.String str12 = book6.getBorrowerEmail();
        java.lang.String str13 = book6.getItemType();
        book6.setIsPurchasable(false);
        java.lang.String str16 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book" + "'", str13, "Book");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getTitle();
        java.lang.String str9 = book6.getDetails();
        items.Book book16 = new items.Book("", "", true, true, "", "hi!");
        book16.returnItem();
        java.lang.String str18 = book16.getAuthor();
        book16.setIsPurchasable(true);
        items.Book book27 = new items.Book("", "", true, true, "", "hi!");
        book27.returnItem();
        java.lang.String str29 = book27.getAuthor();
        java.lang.String str30 = book27.getAuthor();
        double double31 = book27.calculateOverduePenalty();
        items.Book book38 = new items.Book("", "", true, true, "", "hi!");
        book38.returnItem();
        items.Book book46 = new items.Book("", "", true, true, "", "hi!");
        book46.returnItem();
        java.lang.String str48 = book46.getAuthor();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        book64.returnItem();
        java.lang.String str66 = book64.getAuthor();
        java.lang.String str67 = book64.getAuthor();
        items.Book book74 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray75 = new items.LibraryItem[] { book46, book55, book64, book74 };
        java.util.ArrayList<items.LibraryItem> libraryItemList76 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList76, libraryItemArray75);
        boolean boolean78 = book38.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean79 = book27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean80 = book16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean81 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList76);
        book6.setBorrowerEmail("LibraryItem [itemId=3363, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str84 = book6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str9, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Book" + "'", str84, "Book");
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        items.Book book6 = new items.Book("LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getAuthor();
        java.lang.String str8 = book6.getDetails();
        book6.setLocation("LibraryItem [itemId=1721, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book17 = new items.Book("hi!", "", true, false, "hi!", "");
        book17.setIsPurchasable(true);
        book17.returnItem();
        java.lang.String str21 = book17.getAuthor();
        items.Book book28 = new items.Book("", "", true, true, "", "hi!");
        book28.returnItem();
        java.lang.String str30 = book28.getAuthor();
        java.lang.String str31 = book28.getAuthor();
        double double32 = book28.calculateOverduePenalty();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        items.Book book47 = new items.Book("", "", true, true, "", "hi!");
        book47.returnItem();
        java.lang.String str49 = book47.getAuthor();
        items.Book book56 = new items.Book("", "", true, true, "", "hi!");
        book56.returnItem();
        java.lang.String str58 = book56.getAuthor();
        items.Book book65 = new items.Book("", "", true, true, "", "hi!");
        book65.returnItem();
        java.lang.String str67 = book65.getAuthor();
        java.lang.String str68 = book65.getAuthor();
        items.Book book75 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray76 = new items.LibraryItem[] { book47, book56, book65, book75 };
        java.util.ArrayList<items.LibraryItem> libraryItemList77 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList77, libraryItemArray76);
        boolean boolean79 = book39.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList77);
        boolean boolean80 = book28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList77);
        boolean boolean81 = book17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList77);
        boolean boolean82 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList77);
        java.lang.Class<?> wildcardClass83 = libraryItemList77.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str8, "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str53 = book6.getDetails();
        java.lang.String str54 = book6.getPrice();
        book6.setIsPurchasable(false);
        java.lang.String str57 = book6.getItemType();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=4656, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=4656, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str53, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Book" + "'", str57, "Book");
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.getTitle();
        java.lang.String str49 = book6.getTitle();
        book6.setIsPurchasable(true);
        int int52 = book6.getItemId();
        boolean boolean53 = book6.isRented();
        boolean boolean54 = book6.isOverdue();
        book6.setIsPurchasable(true);
        java.lang.String str57 = book6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4666 + "'", int52 == 4666);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        items.Book book6 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean10 = book6.isRented();
        book6.setIsPurchasable(false);
        book6.setIsPurchasable(false);
        java.lang.String str15 = book6.getDetails();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Book:  by LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: Book. Purchasable: false" + "'", str15, "Book:  by LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: Book. Purchasable: false");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        book6.setLocation("");
        double double12 = book6.calculateOverduePenalty();
        book6.returnItem();
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4672 + "'", int9 == 4672);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        items.Book book6 = new items.Book("LibraryItem [itemId=2812, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=4093, itemType=Book, location=LibraryItem [itemId=737, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=3552, itemType=Book, location=LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "");
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getLocation();
        double double52 = book6.calculateOverduePenalty();
        java.lang.String str53 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=4717, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=4717, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        book6.returnItem();
        java.lang.String str49 = book6.getAuthor();
        java.lang.String str50 = book6.getItemType();
        book6.setLocation("LibraryItem [itemId=737, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Book" + "'", str50, "Book");
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        items.Book book6 = new items.Book("LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "Book:  by hi!. Location: . Purchasable: false");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        java.lang.String str9 = book6.getLocation();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isOverdue();
        boolean boolean9 = book6.isOverdue();
        java.lang.String str10 = book6.getItemType();
        java.lang.String str11 = book6.getLocation();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book" + "'", str10, "Book");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        items.Book book6 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean10 = book6.isRented();
        book6.setIsPurchasable(false);
        java.lang.String str13 = book6.getDetails();
        book6.setBorrowerEmail("LibraryItem [itemId=1979, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = book6.getItemType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book:  by LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: Book. Purchasable: false" + "'", str13, "Book:  by LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: Book. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Book" + "'", str16, "Book");
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        boolean boolean12 = book6.isOverdue();
        java.lang.String str13 = book6.getItemType();
        java.lang.String str14 = book6.getDetails();
        int int15 = book6.getItemId();
        java.time.LocalDate localDate16 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate16, 2182, "LibraryItem [itemId=282, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4744, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4744, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book" + "'", str13, "Book");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: false" + "'", str14, "Book: hi! by . Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4744 + "'", int15 == 4744);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isOverdue();
        boolean boolean11 = book6.isRented();
        java.lang.String str12 = book6.toString();
        book6.setIsPurchasable(true);
        book6.setLocation("LibraryItem [itemId=1015, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass17 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4763, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4763, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        double double9 = book6.calculateOverduePenalty();
        book6.setBorrowerEmail("LibraryItem [itemId=941, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean12 = book6.isRented();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getBorrowerEmail();
        java.lang.String str11 = book6.getDetails();
        java.lang.String str12 = book6.getItemType();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4775, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4775, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: false" + "'", str11, "Book: hi! by . Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Book" + "'", str12, "Book");
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        boolean boolean14 = book6.isRented();
        book6.setIsPurchasable(true);
        boolean boolean17 = book6.isRented();
        int int18 = book6.getItemId();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4776, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4776, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4776, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4776, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4776 + "'", int18 == 4776);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        java.time.LocalDate localDate87 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate87, 3142, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        boolean boolean10 = book6.isRented();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate11, 100, "LibraryItem [itemId=4313, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4788 + "'", int9 == 4788);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.setBorrowerEmail("Book");
        items.Book book16 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book16.setIsPurchasable(false);
        book16.setIsPurchasable(false);
        book16.setLocation("LibraryItem [itemId=951, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book29 = new items.Book("", "", true, true, "", "hi!");
        book29.returnItem();
        java.lang.String str31 = book29.getAuthor();
        book29.setIsPurchasable(true);
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        java.lang.String str42 = book40.getAuthor();
        java.lang.String str43 = book40.getAuthor();
        double double44 = book40.calculateOverduePenalty();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        items.Book book59 = new items.Book("", "", true, true, "", "hi!");
        book59.returnItem();
        java.lang.String str61 = book59.getAuthor();
        items.Book book68 = new items.Book("", "", true, true, "", "hi!");
        book68.returnItem();
        java.lang.String str70 = book68.getAuthor();
        items.Book book77 = new items.Book("", "", true, true, "", "hi!");
        book77.returnItem();
        java.lang.String str79 = book77.getAuthor();
        java.lang.String str80 = book77.getAuthor();
        items.Book book87 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { book59, book68, book77, book87 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = book51.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = book29.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = book16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean95 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        int int96 = book6.getItemId();
        java.lang.String str97 = book6.getTitle();
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4789 + "'", int96 == 4789);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        java.lang.String str49 = book6.getAuthor();
        java.lang.String str50 = book6.toString();
        boolean boolean51 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=4798, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=4798, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "LibraryItem [itemId=4798, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str50, "LibraryItem [itemId=4798, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.toString();
        java.lang.String str8 = book6.getDetails();
        java.lang.String str9 = book6.getBorrowerEmail();
        java.lang.String str10 = book6.getPrice();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate11, 2962, "LibraryItem [itemId=3432, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=4809, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=4809, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        items.Book book6 = new items.Book("LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getAuthor();
        java.lang.String str8 = book6.getDetails();
        book6.setLocation("LibraryItem [itemId=1721, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean11 = book6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str8, "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        book6.setLocation("");
        book6.setIsPurchasable(true);
        book6.setBorrowerEmail("LibraryItem [itemId=1937, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean16 = book6.isRented();
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4851 + "'", int9 == 4851);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getLocation();
        java.lang.String str13 = book6.getLocation();
        java.lang.String str14 = book6.getDetails();
        boolean boolean15 = book6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str14, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        java.lang.String str52 = book6.getTitle();
        java.lang.String str53 = book6.getTitle();
        java.lang.String str54 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=4854, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=4854, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        book6.returnItem();
        java.lang.String str50 = book6.getBorrowerEmail();
        double double51 = book6.calculateOverduePenalty();
        java.lang.String str52 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        items.Book book25 = new items.Book("", "", true, true, "", "hi!");
        book25.returnItem();
        java.lang.String str27 = book25.getAuthor();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        java.lang.String str36 = book34.getAuthor();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        java.lang.String str45 = book43.getAuthor();
        java.lang.String str46 = book43.getAuthor();
        items.Book book53 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { book25, book34, book43, book53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = book6.isRented();
        double double60 = book6.calculateOverduePenalty();
        book6.setBorrowerEmail("LibraryItem [itemId=886, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        items.Book book6 = new items.Book("LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=251, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book13 = new items.Book("", "", true, true, "", "hi!");
        book13.returnItem();
        boolean boolean15 = book13.isPurchasable();
        items.Book book22 = new items.Book("hi!", "", true, false, "hi!", "");
        book22.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book31 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean32 = book31.isOverdue();
        items.Book book39 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean40 = book39.isOverdue();
        items.Book book47 = new items.Book("", "", true, true, "", "hi!");
        book47.returnItem();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        book64.returnItem();
        java.lang.String str66 = book64.getAuthor();
        items.Book book73 = new items.Book("", "", true, true, "", "hi!");
        book73.returnItem();
        java.lang.String str75 = book73.getAuthor();
        java.lang.String str76 = book73.getAuthor();
        items.Book book83 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book55, book64, book73, book83 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book47.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { book39, book47 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = book13.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        java.lang.String str95 = book6.getItemType();
        java.lang.String str96 = book6.getTitle();
        boolean boolean97 = book6.isOverdue();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Book" + "'", str95, "Book");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str96, "LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        java.lang.String str11 = book6.getAuthor();
        book6.setIsPurchasable(true);
        boolean boolean14 = book6.isOverdue();
        java.lang.Class<?> wildcardClass15 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        book6.setLocation("");
        java.lang.String str12 = book6.getTitle();
        boolean boolean13 = book6.isOverdue();
        java.lang.Class<?> wildcardClass14 = book6.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4903 + "'", int9 == 4903);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        double double11 = book6.calculateOverduePenalty();
        items.Book book18 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean19 = book18.isOverdue();
        items.Book book26 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean27 = book26.isOverdue();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        book42.returnItem();
        java.lang.String str44 = book42.getAuthor();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        java.lang.String str53 = book51.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        java.lang.String str63 = book60.getAuthor();
        items.Book book70 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray71 = new items.LibraryItem[] { book42, book51, book60, book70 };
        java.util.ArrayList<items.LibraryItem> libraryItemList72 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList72, libraryItemArray71);
        boolean boolean74 = book34.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList72);
        items.LibraryItem[] libraryItemArray75 = new items.LibraryItem[] { book26, book34 };
        java.util.ArrayList<items.LibraryItem> libraryItemList76 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList76, libraryItemArray75);
        boolean boolean78 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean79 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList76);
        java.lang.String str80 = book6.getAuthor();
        java.lang.String str81 = book6.getAuthor();
        book6.setLocation("LibraryItem [itemId=2694, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(libraryItemArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getItemType();
        book6.setIsPurchasable(false);
        int int13 = book6.getItemId();
        boolean boolean14 = book6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book" + "'", str10, "Book");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4915 + "'", int13 == 4915);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.returnItem();
        java.lang.String str10 = book6.getBorrowerEmail();
        book6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        boolean boolean14 = book6.isRented();
        java.lang.String str15 = book6.getItemType();
        double double16 = book6.calculateOverduePenalty();
        double double17 = book6.calculateOverduePenalty();
        java.lang.String str18 = book6.toString();
        java.lang.String str19 = book6.getBorrowerEmail();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4924, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4924, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4924, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4924, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Book" + "'", str15, "Book");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "LibraryItem [itemId=4924, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str18, "LibraryItem [itemId=4924, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        book6.returnItem();
        java.lang.String str11 = book6.getBorrowerEmail();
        items.Book book18 = new items.Book("", "", true, true, "", "hi!");
        book18.returnItem();
        boolean boolean20 = book18.isPurchasable();
        boolean boolean21 = book18.isRented();
        java.lang.String str22 = book18.getLocation();
        items.Book book29 = new items.Book("", "", true, true, "", "hi!");
        book29.returnItem();
        items.Book book37 = new items.Book("", "", true, true, "", "hi!");
        book37.returnItem();
        java.lang.String str39 = book37.getAuthor();
        items.Book book46 = new items.Book("", "", true, true, "", "hi!");
        book46.returnItem();
        java.lang.String str48 = book46.getAuthor();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        java.lang.String str58 = book55.getAuthor();
        items.Book book65 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray66 = new items.LibraryItem[] { book37, book46, book55, book65 };
        java.util.ArrayList<items.LibraryItem> libraryItemList67 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList67, libraryItemArray66);
        boolean boolean69 = book29.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean70 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean71 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        java.lang.String str72 = book6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4934, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4934, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        items.Book book6 = new items.Book("LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", false, true, "", "Book:  by hi!. Location: . Purchasable: true");
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = book6.getLocation();
        java.lang.String str10 = book6.getBorrowerEmail();
        double double11 = book6.calculateOverduePenalty();
        java.lang.String str12 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str12, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.toString();
        java.lang.String str11 = book6.getLocation();
        java.lang.String str12 = book6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass13 = book6.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4953, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4953, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4953, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4953, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        items.Book book6 = new items.Book("LibraryItem [itemId=2588, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3461, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=1418, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=944, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        items.Book book6 = new items.Book("LibraryItem [itemId=791, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getTitle();
        java.lang.String str8 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=791, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str8, "Book: LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=791, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.returnItem();
        double double88 = book6.calculateOverduePenalty();
        java.lang.String str89 = book6.getAuthor();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean7 = book6.isOverdue();
        items.Book book14 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean15 = book14.isOverdue();
        items.Book book22 = new items.Book("", "", true, true, "", "hi!");
        book22.returnItem();
        items.Book book30 = new items.Book("", "", true, true, "", "hi!");
        book30.returnItem();
        java.lang.String str32 = book30.getAuthor();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        java.lang.String str51 = book48.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray59 = new items.LibraryItem[] { book30, book39, book48, book58 };
        java.util.ArrayList<items.LibraryItem> libraryItemList60 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList60, libraryItemArray59);
        boolean boolean62 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList60);
        items.LibraryItem[] libraryItemArray63 = new items.LibraryItem[] { book14, book22 };
        java.util.ArrayList<items.LibraryItem> libraryItemList64 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList64, libraryItemArray63);
        boolean boolean66 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList64);
        double double67 = book6.calculateOverduePenalty();
        java.lang.String str68 = book6.getBorrowerEmail();
        book6.returnItem();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(libraryItemArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        java.lang.String str48 = book6.getPrice();
        java.lang.String str49 = book6.getPrice();
        java.lang.String str50 = book6.getAuthor();
        java.lang.String str51 = book6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        double double7 = book6.calculateOverduePenalty();
        boolean boolean8 = book6.isOverdue();
        book6.setLocation("LibraryItem [itemId=3287, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        items.Book book6 = new items.Book("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book:  by hi!. Location: . Purchasable: true", true, false, "LibraryItem [itemId=291, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=677, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setLocation("LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = book6.getItemType();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Book" + "'", str9, "Book");
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getBorrowerEmail();
        boolean boolean11 = book6.isOverdue();
        java.lang.String str12 = book6.getDetails();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5014, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5014, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: false" + "'", str12, "Book: hi! by . Location: hi!. Purchasable: false");
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isOverdue();
        int int53 = book6.getItemId();
        book6.setBorrowerEmail("LibraryItem [itemId=403, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int56 = book6.getItemId();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=5022, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=5022, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5022 + "'", int53 == 5022);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5022 + "'", int56 == 5022);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        book6.setIsPurchasable(true);
        book6.returnItem();
        java.lang.String str10 = book6.getAuthor();
        java.lang.String str11 = book6.getPrice();
        boolean boolean12 = book6.isPurchasable();
        boolean boolean13 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.returnItem();
        int int9 = book6.getItemId();
        java.lang.String str10 = book6.getDetails();
        java.lang.String str11 = book6.getPrice();
        java.lang.String str12 = book6.getAuthor();
        int int13 = book6.getItemId();
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5035 + "'", int9 == 5035);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5035 + "'", int13 == 5035);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isOverdue();
        book6.returnItem();
        java.lang.String str11 = book6.getPrice();
        java.lang.String str12 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str53 = book6.getDetails();
        book6.setBorrowerEmail("LibraryItem [itemId=1015, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str56 = book6.toString();
        java.lang.String str57 = book6.getTitle();
        java.lang.String str58 = book6.getTitle();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=5045, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=5045, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str53, "Book:  by hi!. Location: . Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "LibraryItem [itemId=5045, itemType=Book, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str56, "LibraryItem [itemId=5045, itemType=Book, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        items.Book book6 = new items.Book("LibraryItem [itemId=939, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=385, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1168, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=939, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=939, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        int int10 = book6.getItemId();
        java.lang.String str11 = book6.getDetails();
        items.Book book18 = new items.Book("", "", true, true, "", "hi!");
        book18.returnItem();
        boolean boolean20 = book18.isPurchasable();
        items.Book book27 = new items.Book("hi!", "", true, false, "hi!", "");
        book27.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book36 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean37 = book36.isOverdue();
        items.Book book44 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean45 = book44.isOverdue();
        items.Book book52 = new items.Book("", "", true, true, "", "hi!");
        book52.returnItem();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        items.Book book69 = new items.Book("", "", true, true, "", "hi!");
        book69.returnItem();
        java.lang.String str71 = book69.getAuthor();
        items.Book book78 = new items.Book("", "", true, true, "", "hi!");
        book78.returnItem();
        java.lang.String str80 = book78.getAuthor();
        java.lang.String str81 = book78.getAuthor();
        items.Book book88 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray89 = new items.LibraryItem[] { book60, book69, book78, book88 };
        java.util.ArrayList<items.LibraryItem> libraryItemList90 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList90, libraryItemArray89);
        boolean boolean92 = book52.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList90);
        items.LibraryItem[] libraryItemArray93 = new items.LibraryItem[] { book44, book52 };
        java.util.ArrayList<items.LibraryItem> libraryItemList94 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList94, libraryItemArray93);
        boolean boolean96 = book36.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean97 = book27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean98 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean99 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5051, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5051, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5051 + "'", int10 == 5051);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str11, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(libraryItemArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.setIsPurchasable(true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5064, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5064, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str53 = book6.getDetails();
        book6.setBorrowerEmail("LibraryItem [itemId=1804, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=5065, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=5065, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str53, "Book:  by hi!. Location: . Purchasable: false");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        items.Book book6 = new items.Book("LibraryItem [itemId=1908, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=5051, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=3188, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book: Book by LibraryItem [itemId=131, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        items.Book book6 = new items.Book("LibraryItem [itemId=939, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=385, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1168, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(true);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        items.Book book6 = new items.Book("LibraryItem [itemId=3754, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1084, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1198, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int7 = book6.getItemId();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5073 + "'", int7 == 5073);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        boolean boolean51 = book6.isPurchasable();
        boolean boolean52 = book6.isOverdue();
        book6.setBorrowerEmail("LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str55 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=5074, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=5074, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        double double11 = book6.calculateOverduePenalty();
        java.lang.String str12 = book6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        items.Book book6 = new items.Book("LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "Book:  by hi!. Location: . Purchasable: false");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        java.lang.String str10 = book6.getPrice();
        java.lang.String str11 = book6.toString();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str10, "Book:  by hi!. Location: . Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5091, itemType=Book, location=LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5091, itemType=Book, location=LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        items.Book book6 = new items.Book("Book:  by hi!. Location: . Purchasable: true", "LibraryItem [itemId=197, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getDetails();
        int int8 = book6.getItemId();
        java.lang.String str9 = book6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: Book:  by hi!. Location: . Purchasable: true. Purchasable: true" + "'", str7, "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: Book:  by hi!. Location: . Purchasable: true. Purchasable: true");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5092 + "'", int8 == 5092);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        boolean boolean11 = book6.isPurchasable();
        boolean boolean12 = book6.isRented();
        java.lang.String str13 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str13, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        book6.returnItem();
        java.lang.String str11 = book6.getBorrowerEmail();
        boolean boolean12 = book6.isRented();
        java.lang.Class<?> wildcardClass13 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5094, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5094, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        java.lang.String str19 = book17.getAuthor();
        java.lang.String str20 = book17.getAuthor();
        double double21 = book17.calculateOverduePenalty();
        items.Book book28 = new items.Book("", "", true, true, "", "hi!");
        book28.returnItem();
        items.Book book36 = new items.Book("", "", true, true, "", "hi!");
        book36.returnItem();
        java.lang.String str38 = book36.getAuthor();
        items.Book book45 = new items.Book("", "", true, true, "", "hi!");
        book45.returnItem();
        java.lang.String str47 = book45.getAuthor();
        items.Book book54 = new items.Book("", "", true, true, "", "hi!");
        book54.returnItem();
        java.lang.String str56 = book54.getAuthor();
        java.lang.String str57 = book54.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray65 = new items.LibraryItem[] { book36, book45, book54, book64 };
        java.util.ArrayList<items.LibraryItem> libraryItemList66 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList66, libraryItemArray65);
        boolean boolean68 = book28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        boolean boolean69 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        boolean boolean70 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        book6.setLocation("Book: hi! by . Location: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
        int int73 = book6.getItemId();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5095 + "'", int73 == 5095);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isOverdue();
        boolean boolean11 = book6.isRented();
        java.lang.String str12 = book6.toString();
        java.lang.String str13 = book6.getItemType();
        book6.setBorrowerEmail("LibraryItem [itemId=1219, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean16 = book6.isPurchasable();
        java.lang.String str17 = book6.getPrice();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=5102, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=5102, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book" + "'", str13, "Book");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getLocation();
        java.lang.String str13 = book6.getBorrowerEmail();
        java.lang.String str14 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str14, "Book:  by hi!. Location: . Purchasable: true");
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        java.lang.String str10 = book6.getDetails();
        double double11 = book6.calculateOverduePenalty();
        items.Book book18 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean19 = book18.isOverdue();
        items.Book book26 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean27 = book26.isOverdue();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        book42.returnItem();
        java.lang.String str44 = book42.getAuthor();
        items.Book book51 = new items.Book("", "", true, true, "", "hi!");
        book51.returnItem();
        java.lang.String str53 = book51.getAuthor();
        items.Book book60 = new items.Book("", "", true, true, "", "hi!");
        book60.returnItem();
        java.lang.String str62 = book60.getAuthor();
        java.lang.String str63 = book60.getAuthor();
        items.Book book70 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray71 = new items.LibraryItem[] { book42, book51, book60, book70 };
        java.util.ArrayList<items.LibraryItem> libraryItemList72 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList72, libraryItemArray71);
        boolean boolean74 = book34.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList72);
        items.LibraryItem[] libraryItemArray75 = new items.LibraryItem[] { book26, book34 };
        java.util.ArrayList<items.LibraryItem> libraryItemList76 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList76, libraryItemArray75);
        boolean boolean78 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean79 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList76);
        java.lang.String str80 = book6.getAuthor();
        java.lang.String str81 = book6.getAuthor();
        java.lang.String str82 = book6.getItemType();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(libraryItemArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Book" + "'", str82, "Book");
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getTitle();
        book6.setLocation("LibraryItem [itemId=737, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = book6.getDetails();
        boolean boolean12 = book6.isRented();
        double double13 = book6.calculateOverduePenalty();
        book6.setLocation("LibraryItem [itemId=1576, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Book: hi! by . Location: LibraryItem [itemId=737, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str11, "Book: hi! by . Location: LibraryItem [itemId=737, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.toString();
        java.lang.String str8 = book6.getPrice();
        boolean boolean9 = book6.isOverdue();
        java.lang.String str10 = book6.getDetails();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=5124, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=5124, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str10, "Book: hi! by . Location: hi!. Purchasable: true");
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        java.lang.String str48 = book6.getPrice();
        java.lang.String str49 = book6.toString();
        java.lang.String str50 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=5135, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=5135, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        items.Book book6 = new items.Book("LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book");
        items.Book book13 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = book13.isRented();
        book13.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean17 = book13.isRented();
        items.Book book24 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str25 = book24.getDetails();
        book24.returnItem();
        boolean boolean27 = book24.isPurchasable();
        double double28 = book24.calculateOverduePenalty();
        items.Book book35 = new items.Book("", "", true, true, "", "hi!");
        book35.returnItem();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        java.lang.String str45 = book43.getAuthor();
        items.Book book52 = new items.Book("", "", true, true, "", "hi!");
        book52.returnItem();
        java.lang.String str54 = book52.getAuthor();
        items.Book book61 = new items.Book("", "", true, true, "", "hi!");
        book61.returnItem();
        java.lang.String str63 = book61.getAuthor();
        java.lang.String str64 = book61.getAuthor();
        items.Book book71 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { book43, book52, book61, book71 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = book35.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = book13.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean78 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList73);
        java.time.LocalDate localDate79 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate79, 3135, "Book:  by LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: Book. Purchasable: false");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str25, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.setBorrowerEmail("LibraryItem [itemId=886, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str13 = book6.getBorrowerEmail();
        java.lang.String str14 = book6.getPrice();
        book6.setBorrowerEmail("LibraryItem [itemId=1726, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate17, 894, "LibraryItem [itemId=941, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5166, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5166, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=886, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=886, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str53 = book6.getDetails();
        java.lang.String str54 = book6.getBorrowerEmail();
        boolean boolean55 = book6.isOverdue();
        boolean boolean56 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=5167, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=5167, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str53, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str54, "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        boolean boolean10 = book6.isPurchasable();
        boolean boolean11 = book6.isPurchasable();
        items.Book book18 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str19 = book18.getDetails();
        java.lang.String str20 = book18.getDetails();
        boolean boolean21 = book18.isOverdue();
        items.Book book28 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean29 = book28.isOverdue();
        items.Book book36 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean37 = book36.isOverdue();
        items.Book book44 = new items.Book("", "", true, true, "", "hi!");
        book44.returnItem();
        items.Book book52 = new items.Book("", "", true, true, "", "hi!");
        book52.returnItem();
        java.lang.String str54 = book52.getAuthor();
        items.Book book61 = new items.Book("", "", true, true, "", "hi!");
        book61.returnItem();
        java.lang.String str63 = book61.getAuthor();
        items.Book book70 = new items.Book("", "", true, true, "", "hi!");
        book70.returnItem();
        java.lang.String str72 = book70.getAuthor();
        java.lang.String str73 = book70.getAuthor();
        items.Book book80 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book52, book61, book70, book80 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book44.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        items.LibraryItem[] libraryItemArray85 = new items.LibraryItem[] { book36, book44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList86 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList86, libraryItemArray85);
        boolean boolean88 = book28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList86);
        boolean boolean89 = book18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList86);
        boolean boolean90 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList86);
        boolean boolean91 = book6.isOverdue();
        java.lang.String str92 = book6.getLocation();
        java.lang.String str93 = book6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass94 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str19, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str20, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(libraryItemArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        boolean boolean10 = book6.isOverdue();
        java.lang.String str11 = book6.toString();
        java.lang.String str12 = book6.getAuthor();
        boolean boolean13 = book6.isPurchasable();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5181, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5181, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5181, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5181, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        java.lang.String str52 = book6.getTitle();
        java.lang.String str53 = book6.getLocation();
        java.lang.String str54 = book6.getItemType();
        java.lang.String str55 = book6.getAuthor();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=5182, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=5182, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Book" + "'", str54, "Book");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        boolean boolean49 = book6.isPurchasable();
        boolean boolean50 = book6.isRented();
        java.time.LocalDate localDate51 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate51, 3671, "LibraryItem [itemId=2588, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        items.Book book6 = new items.Book("LibraryItem [itemId=2381, itemType=Book, location=LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book: hi! by . Location: LibraryItem [itemId=1154, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", true, true, "LibraryItem [itemId=2683, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2904, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.getItemType();
        java.lang.String str10 = book6.getBorrowerEmail();
        double double11 = book6.calculateOverduePenalty();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate12, 4543, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Book" + "'", str9, "Book");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        int int89 = book6.getItemId();
        java.lang.String str90 = book6.getBorrowerEmail();
        book6.setLocation("LibraryItem [itemId=2183, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass93 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5199 + "'", int89 == 5199);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str90, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.getTitle();
        java.lang.String str49 = book6.getAuthor();
        java.time.LocalDate localDate50 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate50, 3663, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setBorrowerEmail("Book:  by hi!. Location: . Purchasable: true");
        boolean boolean89 = book6.isPurchasable();
        java.lang.String str90 = book6.getItemType();
        java.lang.String str91 = book6.toString();
        java.lang.String str92 = book6.getLocation();
        java.lang.String str93 = book6.getItemType();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Book" + "'", str90, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "LibraryItem [itemId=5216, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str91, "LibraryItem [itemId=5216, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Book" + "'", str93, "Book");
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getDetails();
        java.lang.String str52 = book6.getTitle();
        java.lang.String str53 = book6.getTitle();
        java.lang.String str54 = book6.getItemType();
        double double55 = book6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=5225, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=5225, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Book" + "'", str54, "Book");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getDetails();
        boolean boolean11 = book6.isPurchasable();
        book6.returnItem();
        java.lang.Class<?> wildcardClass13 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5230, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5230, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str10, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        items.Book book6 = new items.Book("LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=92, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "Book");
        java.lang.String str7 = book6.getLocation();
        java.lang.String str8 = book6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass9 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=178, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        items.Book book6 = new items.Book("Book", "LibraryItem [itemId=474, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "", "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isRented();
        book6.setBorrowerEmail("LibraryItem [itemId=597, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean10 = book6.isRented();
        items.Book book17 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str18 = book17.getDetails();
        book17.returnItem();
        boolean boolean20 = book17.isPurchasable();
        double double21 = book17.calculateOverduePenalty();
        items.Book book28 = new items.Book("", "", true, true, "", "hi!");
        book28.returnItem();
        items.Book book36 = new items.Book("", "", true, true, "", "hi!");
        book36.returnItem();
        java.lang.String str38 = book36.getAuthor();
        items.Book book45 = new items.Book("", "", true, true, "", "hi!");
        book45.returnItem();
        java.lang.String str47 = book45.getAuthor();
        items.Book book54 = new items.Book("", "", true, true, "", "hi!");
        book54.returnItem();
        java.lang.String str56 = book54.getAuthor();
        java.lang.String str57 = book54.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray65 = new items.LibraryItem[] { book36, book45, book54, book64 };
        java.util.ArrayList<items.LibraryItem> libraryItemList66 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList66, libraryItemArray65);
        boolean boolean68 = book28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        boolean boolean69 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        boolean boolean70 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList66);
        java.lang.String str71 = book6.getAuthor();
        int int72 = book6.getItemId();
        java.lang.String str73 = book6.toString();
        java.lang.String str74 = book6.getPrice();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str18, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str71, "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5233 + "'", int72 == 5233);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "LibraryItem [itemId=5233, itemType=Book, location=Book, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str73, "LibraryItem [itemId=5233, itemType=Book, location=Book, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str74, "LibraryItem [itemId=172, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        java.lang.String str9 = book6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5240, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5240, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setIsPurchasable(false);
        book6.setLocation("LibraryItem [itemId=951, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book19 = new items.Book("", "", true, true, "", "hi!");
        book19.returnItem();
        java.lang.String str21 = book19.getAuthor();
        book19.setIsPurchasable(true);
        items.Book book30 = new items.Book("", "", true, true, "", "hi!");
        book30.returnItem();
        java.lang.String str32 = book30.getAuthor();
        java.lang.String str33 = book30.getAuthor();
        double double34 = book30.calculateOverduePenalty();
        items.Book book41 = new items.Book("", "", true, true, "", "hi!");
        book41.returnItem();
        items.Book book49 = new items.Book("", "", true, true, "", "hi!");
        book49.returnItem();
        java.lang.String str51 = book49.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        book58.returnItem();
        java.lang.String str60 = book58.getAuthor();
        items.Book book67 = new items.Book("", "", true, true, "", "hi!");
        book67.returnItem();
        java.lang.String str69 = book67.getAuthor();
        java.lang.String str70 = book67.getAuthor();
        items.Book book77 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { book49, book58, book67, book77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = book41.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = book30.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = book19.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean84 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        int int85 = book6.getItemId();
        java.lang.Class<?> wildcardClass86 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 5241 + "'", int85 == 5241);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        boolean boolean14 = book6.isRented();
        java.lang.String str15 = book6.getItemType();
        java.lang.Class<?> wildcardClass16 = book6.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5256, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5256, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=5256, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=5256, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Book" + "'", str15, "Book");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        java.lang.String str52 = book6.getDetails();
        int int53 = book6.getItemId();
        java.lang.Class<?> wildcardClass54 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=5257, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=5257, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str52, "Book:  by hi!. Location: . Purchasable: true");
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5257 + "'", int53 == 5257);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean7 = book6.isOverdue();
        items.Book book14 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean15 = book14.isOverdue();
        items.Book book22 = new items.Book("", "", true, true, "", "hi!");
        book22.returnItem();
        items.Book book30 = new items.Book("", "", true, true, "", "hi!");
        book30.returnItem();
        java.lang.String str32 = book30.getAuthor();
        items.Book book39 = new items.Book("", "", true, true, "", "hi!");
        book39.returnItem();
        java.lang.String str41 = book39.getAuthor();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        java.lang.String str51 = book48.getAuthor();
        items.Book book58 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray59 = new items.LibraryItem[] { book30, book39, book48, book58 };
        java.util.ArrayList<items.LibraryItem> libraryItemList60 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList60, libraryItemArray59);
        boolean boolean62 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList60);
        items.LibraryItem[] libraryItemArray63 = new items.LibraryItem[] { book14, book22 };
        java.util.ArrayList<items.LibraryItem> libraryItemList64 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList64, libraryItemArray63);
        boolean boolean66 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList64);
        java.lang.String str67 = book6.getTitle();
        double double68 = book6.calculateOverduePenalty();
        book6.setIsPurchasable(true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(libraryItemArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        double double7 = book6.calculateOverduePenalty();
        boolean boolean8 = book6.isPurchasable();
        java.lang.String str9 = book6.getItemType();
        book6.setLocation("LibraryItem [itemId=3523, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.returnItem();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Book" + "'", str9, "Book");
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        book6.setLocation("LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.returnItem();
        boolean boolean12 = book6.isOverdue();
        double double13 = book6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        items.Book book6 = new items.Book("LibraryItem [itemId=1757, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2013, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=2477, itemType=Book, location=LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3944, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.setBorrowerEmail("");
        book6.setIsPurchasable(false);
        boolean boolean15 = book6.isRented();
        java.lang.String str16 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5286, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5286, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: false" + "'", str16, "Book: hi! by . Location: hi!. Purchasable: false");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getBorrowerEmail();
        boolean boolean11 = book6.isOverdue();
        double double12 = book6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass13 = book6.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        book6.returnItem();
        book6.returnItem();
        boolean boolean15 = book6.isPurchasable();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5290, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5290, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=5290, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=5290, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        items.Book book6 = new items.Book("LibraryItem [itemId=2143, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3947, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "", "LibraryItem [itemId=4218, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = book6.isOverdue();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        boolean boolean14 = book6.isRented();
        java.lang.String str15 = book6.getItemType();
        boolean boolean16 = book6.isPurchasable();
        java.lang.String str17 = book6.getAuthor();
        java.lang.String str18 = book6.getAuthor();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5305, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5305, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=5305, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=5305, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Book" + "'", str15, "Book");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str53 = book6.getDetails();
        java.lang.String str54 = book6.getBorrowerEmail();
        java.lang.String str55 = book6.getDetails();
        java.lang.String str56 = book6.getLocation();
        java.lang.String str57 = book6.toString();
        java.lang.String str58 = book6.toString();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=5306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=5306, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str53, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str54, "LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Book:  by hi!. Location: . Purchasable: false" + "'", str55, "Book:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "LibraryItem [itemId=5306, itemType=Book, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str57, "LibraryItem [itemId=5306, itemType=Book, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "LibraryItem [itemId=5306, itemType=Book, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str58, "LibraryItem [itemId=5306, itemType=Book, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        double double47 = book6.calculateOverduePenalty();
        java.lang.String str48 = book6.getPrice();
        java.lang.String str49 = book6.getPrice();
        java.lang.String str50 = book6.getBorrowerEmail();
        book6.setLocation("LibraryItem [itemId=2850, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isPurchasable();
        book6.setLocation("LibraryItem [itemId=1535, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int13 = book6.getItemId();
        boolean boolean14 = book6.isOverdue();
        java.lang.String str15 = book6.getBorrowerEmail();
        java.lang.String str16 = book6.toString();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5322 + "'", int13 == 5322);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=5322, itemType=Book, location=LibraryItem [itemId=1535, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=5322, itemType=Book, location=LibraryItem [itemId=1535, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        book6.setBorrowerEmail("Book");
        java.lang.String str10 = book6.getDetails();
        int int11 = book6.getItemId();
        java.lang.String str12 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str10, "Book:  by hi!. Location: . Purchasable: true");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5323 + "'", int11 == 5323);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        int int8 = book6.getItemId();
        boolean boolean9 = book6.isOverdue();
        boolean boolean10 = book6.isOverdue();
        book6.setBorrowerEmail("LibraryItem [itemId=1113, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean13 = book6.isRented();
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5324 + "'", int8 == 5324);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        items.Book book6 = new items.Book("LibraryItem [itemId=791, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=288, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=322, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int7 = book6.getItemId();
        java.time.LocalDate localDate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate8, 4444, "LibraryItem [itemId=2143, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5325 + "'", int7 == 5325);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        double double9 = book6.calculateOverduePenalty();
        book6.setLocation("LibraryItem [itemId=4139, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setLocation("LibraryItem [itemId=5256, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getTitle();
        java.lang.String str9 = book6.toString();
        book6.setLocation("LibraryItem [itemId=3186, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5327, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5327, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.String str9 = book6.getAuthor();
        double double10 = book6.calculateOverduePenalty();
        items.Book book17 = new items.Book("", "", true, true, "", "hi!");
        book17.returnItem();
        items.Book book25 = new items.Book("", "", true, true, "", "hi!");
        book25.returnItem();
        java.lang.String str27 = book25.getAuthor();
        items.Book book34 = new items.Book("", "", true, true, "", "hi!");
        book34.returnItem();
        java.lang.String str36 = book34.getAuthor();
        items.Book book43 = new items.Book("", "", true, true, "", "hi!");
        book43.returnItem();
        java.lang.String str45 = book43.getAuthor();
        java.lang.String str46 = book43.getAuthor();
        items.Book book53 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { book25, book34, book43, book53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = book17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = book6.isRented();
        java.lang.String str60 = book6.getLocation();
        java.lang.String str61 = book6.getTitle();
        java.lang.String str62 = book6.getAuthor();
        java.lang.String str63 = book6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getBorrowerEmail();
        java.lang.String str11 = book6.getDetails();
        book6.returnItem();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5362, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5362, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: false" + "'", str11, "Book: hi! by . Location: hi!. Purchasable: false");
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isOverdue();
        java.lang.String str53 = book6.toString();
        boolean boolean54 = book6.isPurchasable();
        int int55 = book6.getItemId();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=5364, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=5364, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "LibraryItem [itemId=5364, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str53, "LibraryItem [itemId=5364, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5364 + "'", int55 == 5364);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getDetails();
        java.lang.String str11 = book6.toString();
        java.lang.String str12 = book6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5369, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5369, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str10, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5369, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5369, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        boolean boolean10 = book6.isOverdue();
        boolean boolean11 = book6.isRented();
        java.lang.String str12 = book6.toString();
        book6.setIsPurchasable(false);
        double double15 = book6.calculateOverduePenalty();
        book6.setBorrowerEmail("LibraryItem [itemId=933, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate18 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate18, 4776, "Book: hi! by . Location: LibraryItem [itemId=1154, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=5371, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=5371, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        items.Book book6 = new items.Book("LibraryItem [itemId=2306, itemType=Book, location=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=4139, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=4192, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=5287, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        book6.returnItem();
        java.lang.String str11 = book6.getBorrowerEmail();
        items.Book book18 = new items.Book("", "", true, true, "", "hi!");
        book18.returnItem();
        boolean boolean20 = book18.isPurchasable();
        boolean boolean21 = book18.isRented();
        java.lang.String str22 = book18.getLocation();
        items.Book book29 = new items.Book("", "", true, true, "", "hi!");
        book29.returnItem();
        items.Book book37 = new items.Book("", "", true, true, "", "hi!");
        book37.returnItem();
        java.lang.String str39 = book37.getAuthor();
        items.Book book46 = new items.Book("", "", true, true, "", "hi!");
        book46.returnItem();
        java.lang.String str48 = book46.getAuthor();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        java.lang.String str58 = book55.getAuthor();
        items.Book book65 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray66 = new items.LibraryItem[] { book37, book46, book55, book65 };
        java.util.ArrayList<items.LibraryItem> libraryItemList67 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList67, libraryItemArray66);
        boolean boolean69 = book29.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean70 = book18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean71 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        book6.setLocation("LibraryItem [itemId=1114, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setIsPurchasable(false);
        java.lang.String str76 = book6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5385, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5385, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Book: hi! by . Location: LibraryItem [itemId=1114, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str76, "Book: hi! by . Location: LibraryItem [itemId=1114, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        items.Book book6 = new items.Book("LibraryItem [itemId=2339, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2111, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=1908, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getPrice();
        boolean boolean8 = book6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=1908, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=1908, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        items.Book book6 = new items.Book("LibraryItem [itemId=2298, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2111, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=5125, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2300, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isOverdue();
        boolean boolean53 = book6.isPurchasable();
        book6.setIsPurchasable(false);
        book6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=5404, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=5404, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        java.lang.String str51 = book6.getLocation();
        boolean boolean52 = book6.isOverdue();
        java.time.LocalDate localDate53 = null;
        // The following exception was thrown during execution in test generation
        try {
            book6.rentItem(localDate53, 1314, "LibraryItem [itemId=1833, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=5416, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=5416, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        items.Book book6 = new items.Book("LibraryItem [itemId=4995, itemType=Book, location=LibraryItem [itemId=2387, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=1842, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2381, itemType=Book, location=LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=4924, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=5028, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        boolean boolean12 = book6.isOverdue();
        java.lang.String str13 = book6.getItemType();
        double double14 = book6.calculateOverduePenalty();
        java.lang.String str15 = book6.getTitle();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5422, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5422, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book" + "'", str13, "Book");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        items.Book book6 = new items.Book("LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=251, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book13 = new items.Book("", "", true, true, "", "hi!");
        book13.returnItem();
        boolean boolean15 = book13.isPurchasable();
        items.Book book22 = new items.Book("hi!", "", true, false, "hi!", "");
        book22.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book31 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean32 = book31.isOverdue();
        items.Book book39 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean40 = book39.isOverdue();
        items.Book book47 = new items.Book("", "", true, true, "", "hi!");
        book47.returnItem();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        book64.returnItem();
        java.lang.String str66 = book64.getAuthor();
        items.Book book73 = new items.Book("", "", true, true, "", "hi!");
        book73.returnItem();
        java.lang.String str75 = book73.getAuthor();
        java.lang.String str76 = book73.getAuthor();
        items.Book book83 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book55, book64, book73, book83 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book47.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { book39, book47 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = book13.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        java.lang.String str95 = book6.getItemType();
        book6.setIsPurchasable(true);
        book6.returnItem();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Book" + "'", str95, "Book");
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isOverdue();
        java.lang.String str53 = book6.toString();
        boolean boolean54 = book6.isPurchasable();
        book6.setIsPurchasable(false);
        boolean boolean57 = book6.isOverdue();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=5436, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=5436, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "LibraryItem [itemId=5436, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str53, "LibraryItem [itemId=5436, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        boolean boolean9 = book6.isRented();
        int int10 = book6.getItemId();
        java.lang.String str11 = book6.getLocation();
        boolean boolean12 = book6.isRented();
        boolean boolean13 = book6.isOverdue();
        book6.setLocation("LibraryItem [itemId=1022, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setBorrowerEmail("Book: Book by LibraryItem [itemId=131, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        java.lang.String str18 = book6.getDetails();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5442 + "'", int10 == 5442);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Book:  by hi!. Location: LibraryItem [itemId=1022, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str18, "Book:  by hi!. Location: LibraryItem [itemId=1022, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        items.Book book6 = new items.Book("LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=229, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book13 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean14 = book13.isOverdue();
        items.Book book21 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean22 = book21.isOverdue();
        items.Book book29 = new items.Book("", "", true, true, "", "hi!");
        book29.returnItem();
        items.Book book37 = new items.Book("", "", true, true, "", "hi!");
        book37.returnItem();
        java.lang.String str39 = book37.getAuthor();
        items.Book book46 = new items.Book("", "", true, true, "", "hi!");
        book46.returnItem();
        java.lang.String str48 = book46.getAuthor();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        java.lang.String str58 = book55.getAuthor();
        items.Book book65 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray66 = new items.LibraryItem[] { book37, book46, book55, book65 };
        java.util.ArrayList<items.LibraryItem> libraryItemList67 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList67, libraryItemArray66);
        boolean boolean69 = book29.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { book21, book29 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = book13.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        double double75 = book6.calculateOverduePenalty();
        java.lang.String str76 = book6.getDetails();
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str76, "Book: LibraryItem [itemId=170, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=110, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=383, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        java.lang.String str8 = book6.getDetails();
        boolean boolean9 = book6.isOverdue();
        book6.returnItem();
        book6.setBorrowerEmail("LibraryItem [itemId=1148, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setBorrowerEmail("LibraryItem [itemId=1846, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setLocation("LibraryItem [itemId=1413, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book23 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str24 = book23.getDetails();
        java.lang.String str25 = book23.getDetails();
        boolean boolean26 = book23.isOverdue();
        items.Book book33 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean34 = book33.isOverdue();
        items.Book book41 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean42 = book41.isOverdue();
        items.Book book49 = new items.Book("", "", true, true, "", "hi!");
        book49.returnItem();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        items.Book book75 = new items.Book("", "", true, true, "", "hi!");
        book75.returnItem();
        java.lang.String str77 = book75.getAuthor();
        java.lang.String str78 = book75.getAuthor();
        items.Book book85 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray86 = new items.LibraryItem[] { book57, book66, book75, book85 };
        java.util.ArrayList<items.LibraryItem> libraryItemList87 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList87, libraryItemArray86);
        boolean boolean89 = book49.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList87);
        items.LibraryItem[] libraryItemArray90 = new items.LibraryItem[] { book41, book49 };
        java.util.ArrayList<items.LibraryItem> libraryItemList91 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList91, libraryItemArray90);
        boolean boolean93 = book33.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean94 = book23.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean95 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean96 = book6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str8, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str24, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str25, "Book: hi! by . Location: hi!. Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(libraryItemArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        items.Book book6 = new items.Book("LibraryItem [itemId=1758, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1219, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "Book: LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", "LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = book6.getPrice();
        book6.setBorrowerEmail("LibraryItem [itemId=1859, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str10 = book6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=1121, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5487, itemType=Book, location=LibraryItem [itemId=1758, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=Book: LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5487, itemType=Book, location=LibraryItem [itemId=1758, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=Book: LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        items.Book book6 = new items.Book("LibraryItem [itemId=3480, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", true, true, "LibraryItem [itemId=1099, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=4414, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        double double48 = book6.calculateOverduePenalty();
        java.lang.String str49 = book6.toString();
        boolean boolean50 = book6.isOverdue();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        items.Book book65 = new items.Book("", "", true, true, "", "hi!");
        book65.returnItem();
        java.lang.String str67 = book65.getAuthor();
        items.Book book74 = new items.Book("", "", true, true, "", "hi!");
        book74.returnItem();
        java.lang.String str76 = book74.getAuthor();
        items.Book book83 = new items.Book("", "", true, true, "", "hi!");
        book83.returnItem();
        java.lang.String str85 = book83.getAuthor();
        java.lang.String str86 = book83.getAuthor();
        items.Book book93 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray94 = new items.LibraryItem[] { book65, book74, book83, book93 };
        java.util.ArrayList<items.LibraryItem> libraryItemList95 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList95, libraryItemArray94);
        boolean boolean97 = book57.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList95);
        boolean boolean98 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList95);
        java.lang.String str99 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "LibraryItem [itemId=5494, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str49, "LibraryItem [itemId=5494, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getDetails();
        java.lang.String str11 = book6.toString();
        java.lang.String str12 = book6.getAuthor();
        boolean boolean13 = book6.isPurchasable();
        java.lang.String str14 = book6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5504, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5504, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str10, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5504, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5504, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        book6.setIsPurchasable(true);
        java.lang.String str11 = book6.getAuthor();
        java.lang.String str12 = book6.getLocation();
        book6.returnItem();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        items.Book book6 = new items.Book("LibraryItem [itemId=409, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=601, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=434, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=615, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        book6.setBorrowerEmail("LibraryItem [itemId=933, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = book6.getPrice();
        java.lang.String str10 = book6.getBorrowerEmail();
        java.lang.String str11 = book6.getLocation();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=615, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=615, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=933, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=933, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=409, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=409, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        items.Book book14 = new items.Book("", "", true, true, "", "hi!");
        book14.returnItem();
        java.lang.String str16 = book14.getAuthor();
        items.Book book23 = new items.Book("", "", true, true, "", "hi!");
        book23.returnItem();
        java.lang.String str25 = book23.getAuthor();
        items.Book book32 = new items.Book("", "", true, true, "", "hi!");
        book32.returnItem();
        java.lang.String str34 = book32.getAuthor();
        java.lang.String str35 = book32.getAuthor();
        items.Book book42 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { book14, book23, book32, book42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str47 = book6.getItemType();
        java.lang.String str48 = book6.toString();
        book6.setBorrowerEmail("LibraryItem [itemId=90, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str51 = book6.getDetails();
        boolean boolean52 = book6.isOverdue();
        java.lang.String str53 = book6.toString();
        java.lang.String str54 = book6.getItemType();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Book" + "'", str47, "Book");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LibraryItem [itemId=5509, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str48, "LibraryItem [itemId=5509, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Book:  by hi!. Location: . Purchasable: true" + "'", str51, "Book:  by hi!. Location: . Purchasable: true");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "LibraryItem [itemId=5509, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str53, "LibraryItem [itemId=5509, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Book" + "'", str54, "Book");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        items.Book book6 = new items.Book("hi!", "", true, false, "hi!", "");
        java.lang.String str7 = book6.getDetails();
        book6.returnItem();
        java.lang.String str9 = book6.toString();
        book6.returnItem();
        java.lang.String str11 = book6.getBorrowerEmail();
        boolean boolean12 = book6.isRented();
        book6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Book: hi! by . Location: hi!. Purchasable: true" + "'", str7, "Book: hi! by . Location: hi!. Purchasable: true");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5514, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5514, itemType=Book, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.getAuthor();
        java.lang.Class<?> wildcardClass9 = book6.getClass();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        java.lang.String str8 = book6.toString();
        java.lang.String str9 = book6.toString();
        book6.returnItem();
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5516, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5516, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5516, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5516, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        boolean boolean13 = book6.isRented();
        boolean boolean14 = book6.isRented();
        java.lang.String str15 = book6.getItemType();
        boolean boolean16 = book6.isPurchasable();
        java.lang.String str17 = book6.getAuthor();
        java.util.List<items.LibraryItem> libraryItemList18 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = book6.hasExceededBorrowingLimit(libraryItemList18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5522, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5522, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=5522, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=5522, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Book" + "'", str15, "Book");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        items.Book book6 = new items.Book("LibraryItem [itemId=263, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=251, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=136, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=64, itemType=Book, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.Book book13 = new items.Book("", "", true, true, "", "hi!");
        book13.returnItem();
        boolean boolean15 = book13.isPurchasable();
        items.Book book22 = new items.Book("hi!", "", true, false, "hi!", "");
        book22.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book31 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean32 = book31.isOverdue();
        items.Book book39 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean40 = book39.isOverdue();
        items.Book book47 = new items.Book("", "", true, true, "", "hi!");
        book47.returnItem();
        items.Book book55 = new items.Book("", "", true, true, "", "hi!");
        book55.returnItem();
        java.lang.String str57 = book55.getAuthor();
        items.Book book64 = new items.Book("", "", true, true, "", "hi!");
        book64.returnItem();
        java.lang.String str66 = book64.getAuthor();
        items.Book book73 = new items.Book("", "", true, true, "", "hi!");
        book73.returnItem();
        java.lang.String str75 = book73.getAuthor();
        java.lang.String str76 = book73.getAuthor();
        items.Book book83 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { book55, book64, book73, book83 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = book47.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { book39, book47 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = book31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = book22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = book13.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = book6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        java.lang.String str95 = book6.getItemType();
        int int96 = book6.getItemId();
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Book" + "'", str95, "Book");
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 5537 + "'", int96 == 5537);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        java.lang.String str9 = book6.toString();
        java.lang.String str10 = book6.getTitle();
        book6.returnItem();
        java.lang.String str12 = book6.toString();
        java.lang.String str13 = book6.getLocation();
        book6.setIsPurchasable(true);
        java.lang.String str16 = book6.getItemType();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5547, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5547, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=5547, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=5547, itemType=Book, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Book" + "'", str16, "Book");
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        items.Book book6 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        book6.setIsPurchasable(false);
        book6.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        book6.setLocation("");
        java.lang.String str13 = book6.getItemType();
        int int14 = book6.getItemId();
        java.lang.String str15 = book6.getDetails();
        book6.returnItem();
        boolean boolean17 = book6.isRented();
        int int18 = book6.getItemId();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Book" + "'", str13, "Book");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5548 + "'", int14 == 5548);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Book: hi! by . Location: . Purchasable: false" + "'", str15, "Book: hi! by . Location: . Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5548 + "'", int18 == 5548);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        items.Book book6 = new items.Book("", "", true, true, "", "hi!");
        book6.returnItem();
        boolean boolean8 = book6.isPurchasable();
        items.Book book15 = new items.Book("hi!", "", true, false, "hi!", "");
        book15.setBorrowerEmail("Book: hi! by . Location: hi!. Purchasable: true");
        items.Book book24 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean25 = book24.isOverdue();
        items.Book book32 = new items.Book("hi!", "hi!", true, true, "hi!", "");
        boolean boolean33 = book32.isOverdue();
        items.Book book40 = new items.Book("", "", true, true, "", "hi!");
        book40.returnItem();
        items.Book book48 = new items.Book("", "", true, true, "", "hi!");
        book48.returnItem();
        java.lang.String str50 = book48.getAuthor();
        items.Book book57 = new items.Book("", "", true, true, "", "hi!");
        book57.returnItem();
        java.lang.String str59 = book57.getAuthor();
        items.Book book66 = new items.Book("", "", true, true, "", "hi!");
        book66.returnItem();
        java.lang.String str68 = book66.getAuthor();
        java.lang.String str69 = book66.getAuthor();
        items.Book book76 = new items.Book("", "", true, true, "", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { book48, book57, book66, book76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = book40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { book32, book40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = book24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = book15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = book6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        book6.setIsPurchasable(false);
        java.lang.String str89 = book6.getPrice();
        boolean boolean90 = book6.isOverdue();
        java.lang.Class<?> wildcardClass91 = book6.getClass();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }
}
