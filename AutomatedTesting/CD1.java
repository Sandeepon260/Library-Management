package AutomatedTesting;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class CD1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2260, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1281, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=1941, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        java.lang.String str38 = cD6.getLocation();
        cD6.returnItem();
        java.lang.String str40 = cD6.getArtist();
        int int41 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4453 + "'", int41 == 4453);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str75 = cD6.getPrice();
        boolean boolean76 = cD6.isRented();
        cD6.returnItem();
        double double78 = cD6.calculateOverduePenalty();
        java.lang.String str79 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        boolean boolean13 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4470, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4470, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.toString();
        java.lang.String str13 = cD6.getPrice();
        java.lang.String str14 = cD6.getItemType();
        java.lang.String str15 = cD6.getAuthor();
        boolean boolean16 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4471, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4471, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4471, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4471, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD" + "'", str14, "CD");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        cD6.setLocation("LibraryItem [itemId=1153, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean11 = cD6.isPurchasable();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate12, 3019, "LibraryItem [itemId=2155, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4482 + "'", int7 == 4482);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getTitle();
        int int8 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4483 + "'", int8 == 4483);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=163, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=396, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=357, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=357, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=357, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getArtist();
        java.lang.String str16 = cD6.getTitle();
        items.CD cD23 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double24 = cD23.calculateOverduePenalty();
        java.lang.String str25 = cD23.getBorrowerEmail();
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.toString();
        java.lang.String str35 = cD32.getBorrowerEmail();
        java.lang.String str36 = cD32.getPrice();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD43.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str53 = cD52.getLocation();
        java.lang.String str54 = cD52.getLocation();
        items.CD cD61 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str69 = cD68.getLocation();
        java.lang.String str70 = cD68.getLocation();
        items.CD cD77 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { cD61, cD68, cD77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = cD52.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = cD43.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = cD32.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean84 = cD23.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean86 = cD6.isOverdue();
        java.lang.String str87 = cD6.getTitle();
        java.lang.Class<?> wildcardClass88 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "LibraryItem [itemId=4487, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str34, "LibraryItem [itemId=4487, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        items.CD cD6 = new items.CD("LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", false, false, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2706, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        double double11 = cD6.calculateOverduePenalty();
        double double12 = cD6.calculateOverduePenalty();
        boolean boolean13 = cD6.isOverdue();
        boolean boolean14 = cD6.isRented();
        cD6.setLocation("LibraryItem [itemId=1031, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4499, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4499, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate10, 841, "LibraryItem [itemId=1463, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getPrice();
        double double51 = cD6.calculateOverduePenalty();
        cD6.returnItem();
        java.lang.String str53 = cD6.getTitle();
        java.lang.String str54 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4503 + "'", int9 == 4503);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        cD6.setBorrowerEmail("LibraryItem [itemId=658, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate40 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate40, 1746, "LibraryItem [itemId=2992, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        items.CD cD6 = new items.CD("LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1364, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=1031, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getArtist();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getAuthor();
        java.lang.String str11 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getTitle();
        java.lang.String str14 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.toString();
        double double8 = cD6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass9 = cD6.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=4533, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=4533, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double9 = cD6.calculateOverduePenalty();
        cD6.setIsPurchasable(true);
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getDetails();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: true" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: true");
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        items.CD cD6 = new items.CD("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("hi!");
        java.lang.String str9 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: hi!. Purchasable: false" + "'", str9, "CD: LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getTitle();
        boolean boolean92 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4538, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4538, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getTitle();
        items.CD cD15 = new items.CD("LibraryItem [itemId=1910, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2226, itemType=CD, location=LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=930, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD22 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double23 = cD22.calculateOverduePenalty();
        java.lang.String str24 = cD22.getBorrowerEmail();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.toString();
        java.lang.String str34 = cD31.getBorrowerEmail();
        java.lang.String str35 = cD31.getPrice();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD42.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str52 = cD51.getLocation();
        java.lang.String str53 = cD51.getLocation();
        items.CD cD60 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str68 = cD67.getLocation();
        java.lang.String str69 = cD67.getLocation();
        items.CD cD76 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { cD60, cD67, cD76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = cD51.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean81 = cD42.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean82 = cD31.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean83 = cD22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean84 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean85 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "LibraryItem [itemId=4554, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str33, "LibraryItem [itemId=4554, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str16 = cD6.getLocation();
        java.lang.String str17 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CD" + "'", str17, "CD");
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.toString();
        java.lang.String str12 = cD6.getTitle();
        java.lang.String str13 = cD6.getItemType();
        boolean boolean14 = cD6.isOverdue();
        boolean boolean15 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=4570, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=4570, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        int int10 = cD6.getItemId();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate11, 2344, "LibraryItem [itemId=2598, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4572, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4572, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4572 + "'", int10 == 4572);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        boolean boolean12 = cD6.isRented();
        double double13 = cD6.calculateOverduePenalty();
        java.time.LocalDate localDate14 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate14, 1948, "LibraryItem [itemId=3006, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4575 + "'", int9 == 4575);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        boolean boolean14 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean17 = cD6.isOverdue();
        java.lang.String str18 = cD6.getArtist();
        java.lang.String str19 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4582, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4582, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        java.lang.String str38 = cD6.getLocation();
        cD6.returnItem();
        items.CD cD46 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str47 = cD46.getBorrowerEmail();
        java.lang.String str48 = cD46.getBorrowerEmail();
        cD46.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD57 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD57.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str67 = cD66.getLocation();
        java.lang.String str68 = cD66.getLocation();
        items.CD cD75 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD82 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str83 = cD82.getLocation();
        java.lang.String str84 = cD82.getLocation();
        items.CD cD91 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray92 = new items.LibraryItem[] { cD75, cD82, cD91 };
        java.util.ArrayList<items.LibraryItem> libraryItemList93 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList93, libraryItemArray92);
        boolean boolean95 = cD66.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean96 = cD57.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean97 = cD46.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean98 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        java.lang.Class<?> wildcardClass99 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2746, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=977, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=3646, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3339, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4604 + "'", int9 == 4604);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        boolean boolean10 = cD6.isRented();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str48 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4607, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4607, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getPrice();
        boolean boolean15 = cD6.isPurchasable();
        java.lang.String str16 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        java.lang.Class<?> wildcardClass15 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4622 + "'", int9 == 4622);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1188, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1122, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getTitle();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getItemType();
        cD6.returnItem();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4624, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4624, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getItemType();
        java.lang.String str40 = cD6.toString();
        double double41 = cD6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass42 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4625 + "'", int37 == 4625);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CD" + "'", str39, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "LibraryItem [itemId=4625, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str40, "LibraryItem [itemId=4625, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=163, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=396, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=357, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isOverdue();
        boolean boolean8 = cD6.isPurchasable();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD22.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD47 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str48 = cD47.getLocation();
        java.lang.String str49 = cD47.getLocation();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray57 = new items.LibraryItem[] { cD40, cD47, cD56 };
        java.util.ArrayList<items.LibraryItem> libraryItemList58 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList58, libraryItemArray57);
        boolean boolean60 = cD31.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList58);
        boolean boolean61 = cD22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList58);
        boolean boolean62 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList58);
        int int63 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4630 + "'", int63 == 4630);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=95, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getBorrowerEmail();
        java.lang.String str15 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4636 + "'", int9 == 4636);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4636, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4636, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=95, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: LibraryItem [itemId=95, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        cD6.setLocation("LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double52 = cD6.calculateOverduePenalty();
        java.lang.String str53 = cD6.getPrice();
        java.lang.Class<?> wildcardClass54 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4637 + "'", int9 == 4637);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        java.lang.String str11 = cD6.getTitle();
        cD6.setIsPurchasable(false);
        cD6.setBorrowerEmail("LibraryItem [itemId=4550, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str12 = cD6.getPrice();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4654, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4654, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getItemType();
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4664 + "'", int9 == 4664);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4664 + "'", int12 == 4664);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getTitle();
        java.lang.String str16 = cD6.getLocation();
        items.CD cD23 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str24 = cD23.getBorrowerEmail();
        java.lang.String str25 = cD23.getBorrowerEmail();
        cD23.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD34.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str44 = cD43.getLocation();
        java.lang.String str45 = cD43.getLocation();
        items.CD cD52 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD59 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str60 = cD59.getLocation();
        java.lang.String str61 = cD59.getLocation();
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray69 = new items.LibraryItem[] { cD52, cD59, cD68 };
        java.util.ArrayList<items.LibraryItem> libraryItemList70 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList70, libraryItemArray69);
        boolean boolean72 = cD43.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList70);
        boolean boolean73 = cD34.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        boolean boolean74 = cD23.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList70);
        boolean boolean75 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        cD6.setBorrowerEmail("LibraryItem [itemId=644, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4672 + "'", int9 == 4672);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4672, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4672, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setIsPurchasable(false);
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str25 = cD24.getBorrowerEmail();
        java.lang.String str26 = cD24.getBorrowerEmail();
        cD24.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD35.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD35.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean75 = cD24.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean76 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        int int77 = cD6.getItemId();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4680 + "'", int77 == 4680);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        boolean boolean14 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean17 = cD6.isOverdue();
        java.lang.String str18 = cD6.getArtist();
        boolean boolean19 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4698, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4698, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean75 = cD6.isPurchasable();
        java.lang.String str76 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        java.lang.String str12 = cD6.toString();
        items.CD cD19 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD19.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD28 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str29 = cD28.getLocation();
        java.lang.String str30 = cD28.getLocation();
        items.CD cD37 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { cD37, cD44, cD53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = cD28.isOverdue();
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str66 = cD65.getLocation();
        java.lang.String str67 = cD65.getLocation();
        items.CD cD74 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str82 = cD81.getLocation();
        java.lang.String str83 = cD81.getLocation();
        items.CD cD90 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray91 = new items.LibraryItem[] { cD74, cD81, cD90 };
        java.util.ArrayList<items.LibraryItem> libraryItemList92 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList92, libraryItemArray91);
        boolean boolean94 = cD65.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean95 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean96 = cD19.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean97 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4718, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4718, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getArtist();
        cD6.returnItem();
        double double9 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str16 = cD6.getDetails();
        cD6.setIsPurchasable(true);
        java.lang.String str19 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: true" + "'", str19, "CD: hi! by hi!. Location: hi!. Purchasable: true");
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        cD6.setLocation("LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str19 = cD6.getItemType();
        java.lang.String str20 = cD6.getLocation();
        boolean boolean21 = cD6.isRented();
        java.lang.Class<?> wildcardClass22 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=4734, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=4734, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CD" + "'", str19, "CD");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getTitle();
        boolean boolean12 = cD6.isPurchasable();
        java.time.LocalDate localDate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate13, 978, "LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4735 + "'", int7 == 4735);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getDetails();
        cD6.setLocation("LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=1463, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str7, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.toString();
        java.lang.Class<?> wildcardClass8 = cD6.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=4738, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=4738, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        items.CD cD6 = new items.CD("LibraryItem [itemId=3294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3869, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=2007, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1232, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int7 = cD6.getItemId();
        java.lang.String str8 = cD6.getAuthor();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4752 + "'", int7 == 4752);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str16 = cD6.getDetails();
        cD6.setIsPurchasable(true);
        cD6.setBorrowerEmail("LibraryItem [itemId=3882, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        cD6.setLocation("LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=3594, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=4754, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=4754, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass12 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4755, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4755, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4755, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4755, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        items.CD cD14 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str15 = cD14.getLocation();
        java.lang.String str16 = cD14.toString();
        java.lang.String str17 = cD14.getBorrowerEmail();
        java.lang.String str18 = cD14.getBorrowerEmail();
        items.CD cD25 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str26 = cD25.getLocation();
        java.lang.String str27 = cD25.getLocation();
        items.CD cD34 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str42 = cD41.getLocation();
        java.lang.String str43 = cD41.getLocation();
        items.CD cD50 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray51 = new items.LibraryItem[] { cD34, cD41, cD50 };
        java.util.ArrayList<items.LibraryItem> libraryItemList52 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList52, libraryItemArray51);
        boolean boolean54 = cD25.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList52);
        boolean boolean55 = cD25.isOverdue();
        items.CD cD62 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str63 = cD62.getLocation();
        java.lang.String str64 = cD62.getLocation();
        items.CD cD71 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD78 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str79 = cD78.getLocation();
        java.lang.String str80 = cD78.getLocation();
        items.CD cD87 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { cD71, cD78, cD87 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = cD62.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = cD25.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = cD14.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean95 = cD6.isPurchasable();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4757 + "'", int7 == 4757);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=4758, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=4758, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1945, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=2677, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        cD6.returnItem();
        java.lang.String str8 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2677, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2677, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getPrice();
        java.lang.String str40 = cD6.getPrice();
        boolean boolean41 = cD6.isOverdue();
        boolean boolean42 = cD6.isOverdue();
        double double43 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        java.lang.String str18 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        boolean boolean13 = cD6.isPurchasable();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.toString();
        java.lang.String str16 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=4781, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=4781, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        int int12 = cD6.getItemId();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.toString();
        java.lang.String str22 = cD19.getBorrowerEmail();
        java.lang.String str23 = cD19.getBorrowerEmail();
        cD19.setIsPurchasable(false);
        java.lang.String str26 = cD19.getArtist();
        int int27 = cD19.getItemId();
        boolean boolean28 = cD19.isRented();
        cD19.returnItem();
        items.CD cD36 = new items.CD("LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true", "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD36.setBorrowerEmail("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD45 = new items.CD("", "", false, true, "", "hi!");
        int int46 = cD45.getItemId();
        boolean boolean47 = cD45.isPurchasable();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD45.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD36.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean87 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str88 = cD6.toString();
        java.lang.Class<?> wildcardClass89 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4785 + "'", int9 == 4785);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4785, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4785, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4785 + "'", int12 == 4785);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "LibraryItem [itemId=4786, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str21, "LibraryItem [itemId=4786, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4786 + "'", int27 == 4786);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4788 + "'", int46 == 4788);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "LibraryItem [itemId=4785, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str88, "LibraryItem [itemId=4785, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        double double11 = cD6.calculateOverduePenalty();
        double double12 = cD6.calculateOverduePenalty();
        boolean boolean13 = cD6.isOverdue();
        boolean boolean14 = cD6.isRented();
        java.lang.Class<?> wildcardClass15 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4804, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4804, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getArtist();
        java.lang.String str40 = cD6.getItemType();
        java.lang.String str41 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4805 + "'", int37 == 4805);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CD" + "'", str40, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "LibraryItem [itemId=4805, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str41, "LibraryItem [itemId=4805, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        items.CD cD6 = new items.CD("LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=215, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        boolean boolean8 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD: LibraryItem [itemId=205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str7, "CD: LibraryItem [itemId=205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.toString();
        cD6.returnItem();
        java.lang.String str11 = cD6.getLocation();
        cD6.returnItem();
        java.lang.String str13 = cD6.toString();
        java.lang.String str14 = cD6.getPrice();
        java.util.List<items.LibraryItem> libraryItemList15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = cD6.hasBorrowingPrivileges(libraryItemList15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4822, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4822, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=4822, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=4822, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getAuthor();
        boolean boolean10 = cD6.isPurchasable();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4831 + "'", int7 == 4831);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        int int18 = cD15.getItemId();
        cD15.setBorrowerEmail("CD");
        java.lang.String str21 = cD15.getArtist();
        items.CD cD28 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str29 = cD28.getLocation();
        java.lang.String str30 = cD28.getLocation();
        items.CD cD37 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { cD37, cD44, cD53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        java.lang.String str60 = cD6.getDetails();
        java.lang.Class<?> wildcardClass61 = cD6.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4833 + "'", int18 == 4833);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str60, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isRented();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        java.lang.String str8 = cD6.getPrice();
        cD6.setIsPurchasable(false);
        java.lang.String str11 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=4849, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=4849, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        items.CD cD20 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str21 = cD20.getLocation();
        java.lang.String str22 = cD20.getLocation();
        boolean boolean23 = cD20.isPurchasable();
        boolean boolean24 = cD20.isOverdue();
        cD20.returnItem();
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        int int35 = cD32.getItemId();
        cD32.setBorrowerEmail("CD");
        java.lang.String str38 = cD32.getArtist();
        items.CD cD45 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str46 = cD45.getLocation();
        java.lang.String str47 = cD45.getLocation();
        items.CD cD54 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD61 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str62 = cD61.getLocation();
        java.lang.String str63 = cD61.getLocation();
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray71 = new items.LibraryItem[] { cD54, cD61, cD70 };
        java.util.ArrayList<items.LibraryItem> libraryItemList72 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList72, libraryItemArray71);
        boolean boolean74 = cD45.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList72);
        boolean boolean75 = cD32.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList72);
        boolean boolean76 = cD20.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList72);
        boolean boolean77 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList72);
        java.lang.Class<?> wildcardClass78 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4852, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4852, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4854 + "'", int35 == 4854);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        items.CD cD6 = new items.CD("LibraryItem [itemId=397, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=452, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass7 = cD6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getBorrowerEmail();
        cD6.returnItem();
        java.lang.Class<?> wildcardClass19 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4868, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4868, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        boolean boolean15 = cD6.isRented();
        java.lang.String str16 = cD6.getAuthor();
        java.lang.String str17 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str13 = cD6.getArtist();
        int int14 = cD6.getItemId();
        boolean boolean15 = cD6.isRented();
        java.lang.String str16 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4884, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4884, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4884 + "'", int14 == 4884);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str75 = cD6.getTitle();
        java.lang.String str76 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "LibraryItem [itemId=4885, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str76, "LibraryItem [itemId=4885, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getTitle();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        cD6.setBorrowerEmail("LibraryItem [itemId=2000, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str41 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1326, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1461, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=291, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=1030, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=1927, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        items.CD cD6 = new items.CD("LibraryItem [itemId=4246, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=4118, itemType=CD, location=LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=956, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        items.CD cD6 = new items.CD("LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=751, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=559, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=862, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isOverdue();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getAuthor();
        java.lang.String str16 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=4903, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=4903, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        cD6.setBorrowerEmail("LibraryItem [itemId=3557, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str88 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4906, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4906, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isOverdue();
        java.util.List<items.LibraryItem> libraryItemList11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = cD6.hasBorrowingPrivileges(libraryItemList11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4925 + "'", int9 == 4925);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = cD6.toString();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getArtist();
        double double14 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=4926, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=4926, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        double double9 = cD6.calculateOverduePenalty();
        cD6.setLocation("LibraryItem [itemId=2840, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4927, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4927, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        items.CD cD6 = new items.CD("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", true, false, "LibraryItem [itemId=505, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=224, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD" + "'", str7, "CD");
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int7 = cD6.getItemId();
        cD6.setIsPurchasable(false);
        java.lang.String str10 = cD6.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4946 + "'", int7 == 4946);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4946, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4946, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        boolean boolean14 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=1038, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4947, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4947, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getAuthor();
        java.lang.String str92 = cD6.getLocation();
        java.lang.String str93 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        cD6.setBorrowerEmail("LibraryItem [itemId=3830, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4949, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4949, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str92, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        double double11 = cD6.calculateOverduePenalty();
        double double12 = cD6.calculateOverduePenalty();
        boolean boolean13 = cD6.isOverdue();
        java.lang.String str14 = cD6.getLocation();
        java.lang.String str15 = cD6.getItemType();
        cD6.setIsPurchasable(true);
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4958, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4958, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        int int36 = cD6.getItemId();
        java.lang.String str37 = cD6.getTitle();
        java.lang.Class<?> wildcardClass38 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4959 + "'", int36 == 4959);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=1235, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str94 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4963, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4963, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str94, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getBorrowerEmail();
        items.CD cD24 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str25 = cD24.getLocation();
        java.lang.String str26 = cD24.toString();
        java.lang.String str27 = cD24.getDetails();
        boolean boolean28 = cD24.isRented();
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str52 = cD51.getLocation();
        java.lang.String str53 = cD51.getLocation();
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray61 = new items.LibraryItem[] { cD44, cD51, cD60 };
        java.util.ArrayList<items.LibraryItem> libraryItemList62 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList62, libraryItemArray61);
        boolean boolean64 = cD35.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList62);
        boolean boolean65 = cD24.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList62);
        boolean boolean66 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList62);
        java.lang.String str67 = cD6.getBorrowerEmail();
        java.lang.String str68 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4972, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4972, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "LibraryItem [itemId=4973, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str26, "LibraryItem [itemId=4973, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str27, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str67, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str68, "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getDetails();
        items.CD cD20 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double21 = cD20.calculateOverduePenalty();
        java.lang.String str22 = cD20.getBorrowerEmail();
        items.CD cD29 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str30 = cD29.getLocation();
        java.lang.String str31 = cD29.toString();
        java.lang.String str32 = cD29.getBorrowerEmail();
        java.lang.String str33 = cD29.getPrice();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD40.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD49 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str50 = cD49.getLocation();
        java.lang.String str51 = cD49.getLocation();
        items.CD cD58 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str66 = cD65.getLocation();
        java.lang.String str67 = cD65.getLocation();
        items.CD cD74 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray75 = new items.LibraryItem[] { cD58, cD65, cD74 };
        java.util.ArrayList<items.LibraryItem> libraryItemList76 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList76, libraryItemArray75);
        boolean boolean78 = cD49.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean79 = cD40.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean80 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean81 = cD20.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        boolean boolean82 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList76);
        java.lang.String str83 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4981, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4981, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "LibraryItem [itemId=4983, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str31, "LibraryItem [itemId=4983, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        double double11 = cD6.calculateOverduePenalty();
        double double12 = cD6.calculateOverduePenalty();
        boolean boolean13 = cD6.isOverdue();
        boolean boolean14 = cD6.isRented();
        java.time.LocalDate localDate15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate15, 3704, "LibraryItem [itemId=3413, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4998, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4998, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        java.lang.String str8 = cD6.getAuthor();
        cD6.setLocation("LibraryItem [itemId=232, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.getItemType();
        boolean boolean13 = cD6.isOverdue();
        java.time.LocalDate localDate14 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate14, 464, "LibraryItem [itemId=4393, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5011 + "'", int11 == 5011);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD" + "'", str12, "CD");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getTitle();
        boolean boolean13 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5012 + "'", int9 == 5012);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5012, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5012, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        java.lang.String str38 = cD6.getDetails();
        java.lang.String str39 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=485, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str42 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str38, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getTitle();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5019, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5019, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        int int38 = cD6.getItemId();
        double double39 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5028 + "'", int38 == 5028);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        java.lang.String str17 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=5032, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=5032, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        java.lang.String str12 = cD6.getLocation();
        java.time.LocalDate localDate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate13, 3248, "LibraryItem [itemId=1541, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getDetails();
        cD6.setIsPurchasable(true);
        double double13 = cD6.calculateOverduePenalty();
        java.lang.String str14 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5037, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5037, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str10, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: true" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: true");
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        java.lang.String str38 = cD6.getAuthor();
        java.lang.String str39 = cD6.getAuthor();
        java.lang.String str40 = cD6.getLocation();
        java.lang.String str41 = cD6.getPrice();
        java.lang.String str42 = cD6.getLocation();
        boolean boolean43 = cD6.isOverdue();
        java.lang.String str44 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CD" + "'", str44, "CD");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getTitle();
        boolean boolean12 = cD6.isPurchasable();
        java.lang.String str13 = cD6.getTitle();
        boolean boolean14 = cD6.isPurchasable();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5044 + "'", int7 == 5044);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        java.lang.String str14 = cD6.getArtist();
        boolean boolean15 = cD6.isRented();
        cD6.setBorrowerEmail("LibraryItem [itemId=3147, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5045, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5045, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getPrice();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD17.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str27 = cD26.getLocation();
        java.lang.String str28 = cD26.getLocation();
        items.CD cD35 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray52 = new items.LibraryItem[] { cD35, cD42, cD51 };
        java.util.ArrayList<items.LibraryItem> libraryItemList53 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList53, libraryItemArray52);
        boolean boolean55 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean56 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean57 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean58 = cD6.isRented();
        java.lang.Class<?> wildcardClass59 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5046, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5046, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        java.lang.String str87 = cD6.getAuthor();
        double double88 = cD6.calculateOverduePenalty();
        boolean boolean89 = cD6.isRented();
        java.lang.String str90 = cD6.getArtist();
        java.lang.String str91 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5058, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5058, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        items.CD cD6 = new items.CD("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("hi!");
        cD6.setIsPurchasable(true);
        java.lang.Class<?> wildcardClass11 = cD6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getPrice();
        java.lang.String str15 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        double double15 = cD6.calculateOverduePenalty();
        java.lang.String str16 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5071 + "'", int14 == 5071);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("");
        java.lang.String str20 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5072 + "'", int9 == 5072);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5072, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5072, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5072, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5072, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5072 + "'", int12 == 5072);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CD" + "'", str20, "CD");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        cD6.setBorrowerEmail("LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=1126, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=4755, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getAuthor();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setBorrowerEmail("LibraryItem [itemId=3904, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str13 = cD6.getDetails();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5085 + "'", int7 == 5085);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD:  by hi!. Location: . Purchasable: false" + "'", str13, "CD:  by hi!. Location: . Purchasable: false");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getPrice();
        boolean boolean40 = cD6.isOverdue();
        boolean boolean41 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        cD6.setBorrowerEmail("LibraryItem [itemId=3557, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str88 = cD6.getAuthor();
        java.lang.Class<?> wildcardClass89 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5091, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5091, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=1451, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5101 + "'", int9 == 5101);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5101, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5101, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5101, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5101, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5101 + "'", int12 == 5101);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=3194, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate11, 1783, "LibraryItem [itemId=4217, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD17.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str27 = cD26.getLocation();
        java.lang.String str28 = cD26.getLocation();
        items.CD cD35 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray52 = new items.LibraryItem[] { cD35, cD42, cD51 };
        java.util.ArrayList<items.LibraryItem> libraryItemList53 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList53, libraryItemArray52);
        boolean boolean55 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean56 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean57 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean58 = cD6.isRented();
        java.lang.String str59 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str59, "LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = cD6.toString();
        java.lang.String str12 = cD6.getLocation();
        java.lang.String str13 = cD6.toString();
        java.util.List<items.LibraryItem> libraryItemList14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = cD6.hasExceededBorrowingLimit(libraryItemList14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5117, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5117, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=5117, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=5117, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getPrice();
        cD6.setBorrowerEmail("LibraryItem [itemId=3294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5119 + "'", int9 == 5119);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5119, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5119, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5119, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5119, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5119 + "'", int12 == 5119);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getTitle();
        boolean boolean12 = cD6.isPurchasable();
        java.lang.String str13 = cD6.getAuthor();
        java.lang.String str14 = cD6.getAuthor();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5120 + "'", int7 == 5120);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.toString();
        boolean boolean10 = cD6.isPurchasable();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5125, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5125, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getPrice();
        java.lang.Class<?> wildcardClass13 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5126 + "'", int9 == 5126);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.getItemType();
        boolean boolean14 = cD6.isOverdue();
        boolean boolean15 = cD6.isOverdue();
        cD6.returnItem();
        java.lang.Class<?> wildcardClass17 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        int int12 = cD6.getItemId();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.toString();
        java.lang.String str22 = cD19.getBorrowerEmail();
        java.lang.String str23 = cD19.getBorrowerEmail();
        cD19.setIsPurchasable(false);
        java.lang.String str26 = cD19.getArtist();
        int int27 = cD19.getItemId();
        boolean boolean28 = cD19.isRented();
        cD19.returnItem();
        items.CD cD36 = new items.CD("LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true", "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD36.setBorrowerEmail("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD45 = new items.CD("", "", false, true, "", "hi!");
        int int46 = cD45.getItemId();
        boolean boolean47 = cD45.isPurchasable();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD45.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD36.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean87 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5137 + "'", int9 == 5137);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5137, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5137, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5137 + "'", int12 == 5137);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "LibraryItem [itemId=5138, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str21, "LibraryItem [itemId=5138, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5138 + "'", int27 == 5138);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5140 + "'", int46 == 5140);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        cD6.returnItem();
        cD6.setBorrowerEmail("LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str18 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=5145, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=5145, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.toString();
        java.lang.String str18 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5146 + "'", int14 == 5146);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=5146, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=5146, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        items.CD cD14 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str15 = cD14.getLocation();
        java.lang.String str16 = cD14.getLocation();
        items.CD cD23 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD30 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str31 = cD30.getLocation();
        java.lang.String str32 = cD30.getLocation();
        items.CD cD39 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray40 = new items.LibraryItem[] { cD23, cD30, cD39 };
        java.util.ArrayList<items.LibraryItem> libraryItemList41 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList41, libraryItemArray40);
        boolean boolean43 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList41);
        boolean boolean44 = cD14.isOverdue();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str52 = cD51.getLocation();
        java.lang.String str53 = cD51.getLocation();
        items.CD cD60 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str68 = cD67.getLocation();
        java.lang.String str69 = cD67.getLocation();
        items.CD cD76 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { cD60, cD67, cD76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = cD51.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean81 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean82 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        java.lang.String str83 = cD6.getBorrowerEmail();
        java.lang.String str84 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str84, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getItemType();
        java.lang.String str40 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5158 + "'", int37 == 5158);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CD" + "'", str39, "CD");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        cD6.setLocation("LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str52 = cD6.getItemType();
        java.lang.String str53 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5162 + "'", int9 == 5162);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "CD" + "'", str52, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "LibraryItem [itemId=5162, itemType=CD, location=LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str53, "LibraryItem [itemId=5162, itemType=CD, location=LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        cD6.returnItem();
        cD6.setIsPurchasable(false);
        boolean boolean90 = cD6.isRented();
        java.lang.String str91 = cD6.getBorrowerEmail();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.time.LocalDate localDate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate8, 2005, "LibraryItem [itemId=1188, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        items.CD cD6 = new items.CD("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "CD: hi! by hi!. Location: hi!. Purchasable: false", "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getTitle();
        cD6.setIsPurchasable(false);
        java.lang.String str10 = cD6.getPrice();
        java.lang.String str11 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str7, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5202, itemType=CD, location=LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=CD: hi! by hi!. Location: hi!. Purchasable: false, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5202, itemType=CD, location=LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=CD: hi! by hi!. Location: hi!. Purchasable: false, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str13 = cD6.getArtist();
        int int14 = cD6.getItemId();
        boolean boolean15 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5203, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5203, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5203 + "'", int14 == 5203);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        cD6.setLocation("LibraryItem [itemId=610, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=1724, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str18 = cD6.getDetails();
        java.lang.String str19 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=1724, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str18, "CD: hi! by hi!. Location: LibraryItem [itemId=1724, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=1724, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str19, "CD: hi! by hi!. Location: LibraryItem [itemId=1724, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        items.CD cD6 = new items.CD("LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=2639, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass10 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        boolean boolean18 = cD6.isRented();
        cD6.setIsPurchasable(true);
        cD6.returnItem();
        java.lang.String str22 = cD6.getItemType();
        boolean boolean23 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CD" + "'", str22, "CD");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getPrice();
        boolean boolean18 = cD6.isRented();
        java.lang.String str19 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5209 + "'", int14 == 5209);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str19, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        items.CD cD6 = new items.CD("LibraryItem [itemId=4026, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1724, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=1326, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1950, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.toString();
        java.lang.String str8 = cD6.getArtist();
        cD6.setBorrowerEmail("LibraryItem [itemId=1326, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=5215, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=5215, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getAuthor();
        java.lang.String str92 = cD6.getLocation();
        java.lang.String str93 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        java.lang.Class<?> wildcardClass96 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5216, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5216, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str92, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str75 = cD6.getPrice();
        boolean boolean76 = cD6.isRented();
        cD6.returnItem();
        cD6.setLocation("LibraryItem [itemId=2298, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=94, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getPrice();
        java.lang.String str8 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        items.CD cD6 = new items.CD("LibraryItem [itemId=368, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=484, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=536, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1155, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isOverdue();
        java.lang.Class<?> wildcardClass8 = cD6.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        items.CD cD6 = new items.CD("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getItemType();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=4042, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean11 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD" + "'", str7, "CD");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        double double11 = cD6.calculateOverduePenalty();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate12, 3902, "LibraryItem [itemId=3669, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5256, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5256, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1945, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=2677, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        double double7 = cD6.calculateOverduePenalty();
        java.lang.String str8 = cD6.getAuthor();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str8, "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        items.CD cD6 = new items.CD("LibraryItem [itemId=817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isPurchasable();
        cD6.setLocation("LibraryItem [itemId=1964, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        int int19 = cD16.getItemId();
        java.lang.String str20 = cD16.toString();
        double double21 = cD16.calculateOverduePenalty();
        int int22 = cD16.getItemId();
        items.CD cD29 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str30 = cD29.getLocation();
        java.lang.String str31 = cD29.toString();
        java.lang.String str32 = cD29.getBorrowerEmail();
        java.lang.String str33 = cD29.getBorrowerEmail();
        cD29.setIsPurchasable(false);
        java.lang.String str36 = cD29.getArtist();
        int int37 = cD29.getItemId();
        boolean boolean38 = cD29.isRented();
        cD29.returnItem();
        items.CD cD46 = new items.CD("LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true", "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD46.setBorrowerEmail("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD55 = new items.CD("", "", false, true, "", "hi!");
        int int56 = cD55.getItemId();
        boolean boolean57 = cD55.isPurchasable();
        items.CD cD64 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str65 = cD64.getLocation();
        java.lang.String str66 = cD64.getLocation();
        items.CD cD73 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD80 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str81 = cD80.getLocation();
        java.lang.String str82 = cD80.getLocation();
        items.CD cD89 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray90 = new items.LibraryItem[] { cD73, cD80, cD89 };
        java.util.ArrayList<items.LibraryItem> libraryItemList91 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList91, libraryItemArray90);
        boolean boolean93 = cD64.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean94 = cD55.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean95 = cD46.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean96 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean97 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean98 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5259 + "'", int19 == 5259);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=5259, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=5259, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5259 + "'", int22 == 5259);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "LibraryItem [itemId=5260, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str31, "LibraryItem [itemId=5260, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5260 + "'", int37 == 5260);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5262 + "'", int56 == 5262);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str12 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5271, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5271, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray41 = new items.LibraryItem[] { cD24, cD31, cD40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList42 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList42, libraryItemArray41);
        boolean boolean44 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList42);
        boolean boolean45 = cD15.isOverdue();
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str53 = cD52.getLocation();
        java.lang.String str54 = cD52.getLocation();
        items.CD cD61 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str69 = cD68.getLocation();
        java.lang.String str70 = cD68.getLocation();
        items.CD cD77 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { cD61, cD68, cD77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = cD52.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        cD6.returnItem();
        cD6.setLocation("LibraryItem [itemId=1233, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate87 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate87, 1497, "LibraryItem [itemId=3727, itemType=CD, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        java.lang.String str14 = cD6.getArtist();
        boolean boolean15 = cD6.isRented();
        java.lang.String str16 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=4687, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5292, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5292, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        items.CD cD6 = new items.CD("LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD: hi! by hi!. Location: LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", true, true, "LibraryItem [itemId=1187, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1707, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=1707, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=1707, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isRented();
        items.CD cD14 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str15 = cD14.getLocation();
        java.lang.String str16 = cD14.toString();
        java.lang.String str17 = cD14.getBorrowerEmail();
        java.lang.String str18 = cD14.getBorrowerEmail();
        items.CD cD25 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str26 = cD25.getLocation();
        java.lang.String str27 = cD25.getLocation();
        items.CD cD34 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str42 = cD41.getLocation();
        java.lang.String str43 = cD41.getLocation();
        items.CD cD50 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray51 = new items.LibraryItem[] { cD34, cD41, cD50 };
        java.util.ArrayList<items.LibraryItem> libraryItemList52 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList52, libraryItemArray51);
        boolean boolean54 = cD25.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList52);
        boolean boolean55 = cD25.isOverdue();
        items.CD cD62 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str63 = cD62.getLocation();
        java.lang.String str64 = cD62.getLocation();
        items.CD cD71 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD78 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str79 = cD78.getLocation();
        java.lang.String str80 = cD78.getLocation();
        items.CD cD87 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { cD71, cD78, cD87 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = cD62.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = cD25.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = cD14.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        java.lang.String str95 = cD6.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=5304, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=5304, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "LibraryItem [itemId=5303, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str95, "LibraryItem [itemId=5303, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getAuthor();
        boolean boolean15 = cD6.isRented();
        cD6.setBorrowerEmail("LibraryItem [itemId=497, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=1928, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        double double8 = cD6.calculateOverduePenalty();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str10, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str16 = cD6.getDetails();
        cD6.setIsPurchasable(true);
        java.lang.String str19 = cD6.getAuthor();
        java.lang.String str20 = cD6.getLocation();
        java.lang.String str21 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        java.lang.String str38 = cD6.getAuthor();
        java.lang.String str39 = cD6.getAuthor();
        java.lang.String str40 = cD6.getLocation();
        java.lang.String str41 = cD6.getPrice();
        java.lang.String str42 = cD6.getArtist();
        java.lang.Class<?> wildcardClass43 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getBorrowerEmail();
        boolean boolean16 = cD6.isPurchasable();
        java.lang.String str17 = cD6.getLocation();
        java.lang.String str18 = cD6.getPrice();
        java.lang.String str19 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5341 + "'", int9 == 5341);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5341, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5341, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str19, "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isPurchasable();
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean16 = cD15.isRented();
        java.lang.String str17 = cD15.getBorrowerEmail();
        items.CD cD24 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str25 = cD24.getLocation();
        java.lang.String str26 = cD24.toString();
        java.lang.String str27 = cD24.getBorrowerEmail();
        java.lang.String str28 = cD24.getPrice();
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD35.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD35.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean75 = cD24.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean76 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean77 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str78 = cD6.getBorrowerEmail();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "LibraryItem [itemId=5344, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str26, "LibraryItem [itemId=5344, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getAuthor();
        java.lang.String str15 = cD6.getDetails();
        java.time.LocalDate localDate16 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate16, 1452, "LibraryItem [itemId=1361, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getTitle();
        boolean boolean15 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        java.lang.String str36 = cD6.getDetails();
        boolean boolean37 = cD6.isOverdue();
        java.lang.String str38 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str36, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getArtist();
        java.lang.String str8 = cD6.toString();
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        boolean boolean18 = cD15.isPurchasable();
        boolean boolean19 = cD15.isOverdue();
        cD15.returnItem();
        items.CD cD27 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str28 = cD27.getLocation();
        java.lang.String str29 = cD27.getLocation();
        items.CD cD36 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str44 = cD43.getLocation();
        java.lang.String str45 = cD43.getLocation();
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray53 = new items.LibraryItem[] { cD36, cD43, cD52 };
        java.util.ArrayList<items.LibraryItem> libraryItemList54 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList54, libraryItemArray53);
        boolean boolean56 = cD27.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList54);
        boolean boolean57 = cD27.isOverdue();
        java.lang.String str58 = cD27.getLocation();
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str66 = cD65.getLocation();
        java.lang.String str67 = cD65.getLocation();
        items.CD cD74 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str82 = cD81.getLocation();
        java.lang.String str83 = cD81.getLocation();
        items.CD cD90 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray91 = new items.LibraryItem[] { cD74, cD81, cD90 };
        java.util.ArrayList<items.LibraryItem> libraryItemList92 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList92, libraryItemArray91);
        boolean boolean94 = cD65.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean95 = cD27.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean96 = cD15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean97 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5357, itemType=CD, location=LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5357, itemType=CD, location=LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getDetails();
        java.lang.String str13 = cD6.getPrice();
        double double14 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5367, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5367, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        java.lang.String str11 = cD6.getTitle();
        double double12 = cD6.calculateOverduePenalty();
        boolean boolean13 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        int int15 = cD6.getItemId();
        java.lang.String str16 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5373 + "'", int15 == 5373);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=1127, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str89 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5374, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5374, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str89, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        java.lang.String str10 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5385, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5385, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getAuthor();
        boolean boolean8 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        java.lang.String str11 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=1233, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double14 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        boolean boolean89 = cD6.isOverdue();
        cD6.setLocation("LibraryItem [itemId=1892, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str92 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5390, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5390, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getPrice();
        double double51 = cD6.calculateOverduePenalty();
        java.time.LocalDate localDate52 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate52, 1301, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5399 + "'", int9 == 5399);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getLocation();
        java.lang.String str13 = cD6.toString();
        cD6.setBorrowerEmail("LibraryItem [itemId=663, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.getItemType();
        java.lang.String str17 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5404 + "'", int9 == 5404);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=5404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=5404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isPurchasable();
        cD6.setIsPurchasable(false);
        boolean boolean39 = cD6.isPurchasable();
        boolean boolean40 = cD6.isOverdue();
        boolean boolean41 = cD6.isOverdue();
        java.lang.String str42 = cD6.getTitle();
        java.util.List<items.LibraryItem> libraryItemList43 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = cD6.hasBorrowingPrivileges(libraryItemList43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        items.CD cD6 = new items.CD("LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=610, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isPurchasable();
        java.lang.String str8 = cD6.getLocation();
        java.time.LocalDate localDate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate9, 3513, "LibraryItem [itemId=1765, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getDetails();
        java.lang.String str11 = cD6.getAuthor();
        boolean boolean12 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5410, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5410, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str10, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass12 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5411 + "'", int9 == 5411);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5411, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5411, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        java.lang.String str38 = cD6.toString();
        java.lang.String str39 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "LibraryItem [itemId=5414, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str38, "LibraryItem [itemId=5414, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5418, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5418, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD" + "'", str9, "CD");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        double double9 = cD6.calculateOverduePenalty();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5420, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5420, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.toString();
        java.lang.String str14 = cD6.getLocation();
        boolean boolean15 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=5431, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=5431, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        items.CD cD6 = new items.CD("LibraryItem [itemId=929, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2142, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=2205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=452, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isPurchasable();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getTitle();
        cD6.returnItem();
        cD6.setBorrowerEmail("LibraryItem [itemId=1496, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5434 + "'", int9 == 5434);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5434, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5434, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5434, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5434, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5434 + "'", int12 == 5434);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        items.CD cD6 = new items.CD("LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isOverdue();
        java.lang.String str8 = cD6.getTitle();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5435, itemType=CD, location=LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5435, itemType=CD, location=LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=94, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isRented();
        boolean boolean9 = cD6.isRented();
        java.lang.String str10 = cD6.getItemType();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5436 + "'", int7 == 5436);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD" + "'", str10, "CD");
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        double double11 = cD6.calculateOverduePenalty();
        double double12 = cD6.calculateOverduePenalty();
        boolean boolean13 = cD6.isOverdue();
        boolean boolean14 = cD6.isRented();
        java.lang.String str15 = cD6.getDetails();
        boolean boolean16 = cD6.isRented();
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate17, 1739, "LibraryItem [itemId=2679, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5446, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5446, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        boolean boolean38 = cD6.isOverdue();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getPrice();
        java.lang.String str18 = cD6.getTitle();
        java.lang.Class<?> wildcardClass19 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        cD6.setLocation("LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str19 = cD6.getItemType();
        java.lang.String str20 = cD6.getLocation();
        cD6.setLocation("LibraryItem [itemId=878, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str23 = cD6.getDetails();
        java.lang.Class<?> wildcardClass24 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=5459, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=5459, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CD" + "'", str19, "CD");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=878, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str23, "CD: hi! by hi!. Location: LibraryItem [itemId=878, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.setBorrowerEmail("LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double15 = cD6.calculateOverduePenalty();
        java.time.LocalDate localDate16 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate16, 598, "LibraryItem [itemId=4422, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5460 + "'", int9 == 5460);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5460, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5460, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        cD6.setBorrowerEmail("LibraryItem [itemId=433, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5461, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5461, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getPrice();
        boolean boolean18 = cD6.isRented();
        cD6.setLocation("LibraryItem [itemId=1231, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5470 + "'", int14 == 5470);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5471, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5471, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        int int12 = cD6.getItemId();
        boolean boolean13 = cD6.isPurchasable();
        java.lang.String str14 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5473 + "'", int9 == 5473);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5473, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5473, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5473 + "'", int12 == 5473);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getDetails();
        cD6.setIsPurchasable(false);
        java.lang.String str15 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str17 = cD6.toString();
        java.lang.String str18 = cD6.getPrice();
        java.lang.String str19 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5476 + "'", int9 == 5476);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=5476, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=5476, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getBorrowerEmail();
        boolean boolean16 = cD6.isPurchasable();
        java.lang.String str17 = cD6.getDetails();
        java.lang.String str18 = cD6.getTitle();
        cD6.returnItem();
        java.lang.String str20 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5478 + "'", int9 == 5478);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5478, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5478, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str17, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=5478, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=5478, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getTitle();
        java.lang.String str16 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5488, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5488, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean7 = cD6.isRented();
        java.lang.Class<?> wildcardClass8 = cD6.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=5492, itemType=CD, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=5492, itemType=CD, location=, purchasable=true, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=295, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5525, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5525, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getLocation();
        java.lang.String str9 = cD6.getArtist();
        java.lang.Class<?> wildcardClass10 = cD6.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        double double11 = cD6.calculateOverduePenalty();
        double double12 = cD6.calculateOverduePenalty();
        boolean boolean13 = cD6.isOverdue();
        boolean boolean14 = cD6.isRented();
        cD6.setLocation("LibraryItem [itemId=1031, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5528, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5528, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean13 = cD6.isPurchasable();
        java.time.LocalDate localDate14 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate14, 2808, "LibraryItem [itemId=435, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5531 + "'", int9 == 5531);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5531, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5531, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getDetails();
        cD6.setIsPurchasable(true);
        double double13 = cD6.calculateOverduePenalty();
        java.lang.String str14 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5532, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5532, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str10, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getPrice();
        double double51 = cD6.calculateOverduePenalty();
        int int52 = cD6.getItemId();
        java.lang.Class<?> wildcardClass53 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5533 + "'", int9 == 5533);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5533 + "'", int52 == 5533);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        boolean boolean13 = cD6.isPurchasable();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.toString();
        int int16 = cD6.getItemId();
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate17, 5386, "LibraryItem [itemId=2167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=5538, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=5538, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5538 + "'", int16 == 5538);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2343, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2139, itemType=CD, location=LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=978, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=929, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        boolean boolean8 = cD6.isOverdue();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        items.CD cD6 = new items.CD("LibraryItem [itemId=933, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3882, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=4393, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3746, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getDetails();
        items.CD cD14 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double15 = cD14.calculateOverduePenalty();
        boolean boolean16 = cD14.isPurchasable();
        items.CD cD23 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean24 = cD23.isRented();
        java.lang.String str25 = cD23.getBorrowerEmail();
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.toString();
        java.lang.String str35 = cD32.getBorrowerEmail();
        java.lang.String str36 = cD32.getPrice();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD43.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str53 = cD52.getLocation();
        java.lang.String str54 = cD52.getLocation();
        items.CD cD61 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str69 = cD68.getLocation();
        java.lang.String str70 = cD68.getLocation();
        items.CD cD77 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { cD61, cD68, cD77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = cD52.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = cD43.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = cD32.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean84 = cD23.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean85 = cD14.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean86 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str7, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "LibraryItem [itemId=5544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str34, "LibraryItem [itemId=5544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getPrice();
        java.lang.String str40 = cD6.getPrice();
        java.lang.String str41 = cD6.getPrice();
        int int42 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5551 + "'", int42 == 5551);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getItemType();
        java.lang.String str40 = cD6.toString();
        boolean boolean41 = cD6.isOverdue();
        java.lang.String str42 = cD6.getArtist();
        boolean boolean43 = cD6.isOverdue();
        cD6.setLocation("LibraryItem [itemId=2818, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5555 + "'", int37 == 5555);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CD" + "'", str39, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "LibraryItem [itemId=5555, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str40, "LibraryItem [itemId=5555, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        java.lang.String str38 = cD6.getDetails();
        java.lang.String str39 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=485, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate42 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate42, 5126, "LibraryItem [itemId=3931, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str38, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        int int21 = cD18.getItemId();
        cD18.setBorrowerEmail("CD");
        java.lang.String str24 = cD18.getArtist();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD47 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str48 = cD47.getLocation();
        java.lang.String str49 = cD47.getLocation();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray57 = new items.LibraryItem[] { cD40, cD47, cD56 };
        java.util.ArrayList<items.LibraryItem> libraryItemList58 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList58, libraryItemArray57);
        boolean boolean60 = cD31.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList58);
        boolean boolean61 = cD18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList58);
        boolean boolean62 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList58);
        cD6.returnItem();
        boolean boolean64 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5575 + "'", int21 == 5575);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        java.lang.String str10 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5589, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5589, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean17 = cD6.isOverdue();
        java.lang.Class<?> wildcardClass18 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=5590, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=5590, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getDetails();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD: hi! by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: hi!. Purchasable: false" + "'", str8, "CD: hi! by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getAuthor();
        java.lang.String str18 = cD6.getItemType();
        java.lang.String str19 = cD6.getAuthor();
        java.lang.String str20 = cD6.toString();
        java.lang.String str21 = cD6.getItemType();
        boolean boolean22 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=5596, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=5596, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CD" + "'", str18, "CD");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=5596, itemType=CD, location=LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=5596, itemType=CD, location=LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CD" + "'", str21, "CD");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str75 = cD6.getPrice();
        boolean boolean76 = cD6.isRented();
        java.lang.String str77 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=4754, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str80 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "LibraryItem [itemId=4754, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str80, "LibraryItem [itemId=4754, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        int int15 = cD6.getItemId();
        double double16 = cD6.calculateOverduePenalty();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5605 + "'", int15 == 5605);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getItemType();
        java.lang.String str40 = cD6.toString();
        boolean boolean41 = cD6.isOverdue();
        java.lang.String str42 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=3729, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5610 + "'", int37 == 5610);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CD" + "'", str39, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "LibraryItem [itemId=5610, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str40, "LibraryItem [itemId=5610, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD17.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str27 = cD26.getLocation();
        java.lang.String str28 = cD26.getLocation();
        items.CD cD35 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray52 = new items.LibraryItem[] { cD35, cD42, cD51 };
        java.util.ArrayList<items.LibraryItem> libraryItemList53 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList53, libraryItemArray52);
        boolean boolean55 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean56 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean57 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        java.lang.String str58 = cD6.getAuthor();
        cD6.setIsPurchasable(false);
        boolean boolean61 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isRented();
        boolean boolean12 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setBorrowerEmail("LibraryItem [itemId=3558, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate17, 2103, "LibraryItem [itemId=1348, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5620, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5620, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str12 = cD6.getPrice();
        java.lang.String str13 = cD6.getItemType();
        java.lang.String str14 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5624, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5624, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD" + "'", str14, "CD");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1809, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=425, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=1708, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1299, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getItemType();
        java.lang.String str8 = cD6.getTitle();
        java.lang.Class<?> wildcardClass9 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD" + "'", str7, "CD");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2059, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=3383, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=144, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getAuthor();
        java.lang.String str18 = cD6.getItemType();
        int int19 = cD6.getItemId();
        boolean boolean20 = cD6.isPurchasable();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=5633, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=5633, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CD" + "'", str18, "CD");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5633 + "'", int19 == 5633);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1080, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=674, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        java.lang.Class<?> wildcardClass9 = cD6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setLocation("LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str38 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getTitle();
        java.lang.String str16 = cD6.getLocation();
        items.CD cD23 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str24 = cD23.getBorrowerEmail();
        java.lang.String str25 = cD23.getBorrowerEmail();
        cD23.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD34.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str44 = cD43.getLocation();
        java.lang.String str45 = cD43.getLocation();
        items.CD cD52 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD59 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str60 = cD59.getLocation();
        java.lang.String str61 = cD59.getLocation();
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray69 = new items.LibraryItem[] { cD52, cD59, cD68 };
        java.util.ArrayList<items.LibraryItem> libraryItemList70 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList70, libraryItemArray69);
        boolean boolean72 = cD43.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList70);
        boolean boolean73 = cD34.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        boolean boolean74 = cD23.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList70);
        boolean boolean75 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        java.lang.String str76 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5642 + "'", int9 == 5642);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5642, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5642, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "LibraryItem [itemId=5642, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str76, "LibraryItem [itemId=5642, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.toString();
        cD6.returnItem();
        java.lang.String str11 = cD6.getItemType();
        cD6.returnItem();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        int int22 = cD19.getItemId();
        cD19.setBorrowerEmail("CD");
        java.lang.String str25 = cD19.getArtist();
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD48 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str49 = cD48.getLocation();
        java.lang.String str50 = cD48.getLocation();
        items.CD cD57 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray58 = new items.LibraryItem[] { cD41, cD48, cD57 };
        java.util.ArrayList<items.LibraryItem> libraryItemList59 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList59, libraryItemArray58);
        boolean boolean61 = cD32.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList59);
        boolean boolean62 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList59);
        boolean boolean63 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList59);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=5649, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=5649, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5650 + "'", int22 == 5650);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        items.CD cD6 = new items.CD("LibraryItem [itemId=817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isPurchasable();
        cD6.setLocation("LibraryItem [itemId=1964, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD16 = new items.CD("LibraryItem [itemId=1945, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=2677, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        java.lang.String str17 = cD16.getArtist();
        items.CD cD24 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str25 = cD24.getLocation();
        java.lang.String str26 = cD24.getLocation();
        int int27 = cD24.getItemId();
        java.lang.String str28 = cD24.getBorrowerEmail();
        boolean boolean29 = cD24.isOverdue();
        java.lang.String str30 = cD24.getAuthor();
        java.lang.String str31 = cD24.getBorrowerEmail();
        items.CD cD38 = new items.CD("LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true", "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD38.setBorrowerEmail("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD47 = new items.CD("", "", false, true, "", "hi!");
        int int48 = cD47.getItemId();
        boolean boolean49 = cD47.isPurchasable();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD72 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str73 = cD72.getLocation();
        java.lang.String str74 = cD72.getLocation();
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray82 = new items.LibraryItem[] { cD65, cD72, cD81 };
        java.util.ArrayList<items.LibraryItem> libraryItemList83 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList83, libraryItemArray82);
        boolean boolean85 = cD56.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean86 = cD47.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean87 = cD38.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean88 = cD24.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean89 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean90 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean91 = cD6.isPurchasable();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str17, "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5657 + "'", int27 == 5657);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5659 + "'", int48 == 5659);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.toString();
        cD6.setIsPurchasable(true);
        cD6.setIsPurchasable(false);
        java.time.LocalDate localDate18 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate18, 922, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=5672, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=5672, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        boolean boolean14 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean17 = cD6.isOverdue();
        java.lang.String str18 = cD6.getDetails();
        java.time.LocalDate localDate19 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate19, 5186, "LibraryItem [itemId=4859, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5673, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5673, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str18, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        items.CD cD6 = new items.CD("LibraryItem [itemId=817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isPurchasable();
        cD6.setLocation("LibraryItem [itemId=1964, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass10 = cD6.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getBorrowerEmail();
        boolean boolean16 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5675 + "'", int9 == 5675);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5675, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5675, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        cD6.setLocation("LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str19 = cD6.getItemType();
        java.lang.String str20 = cD6.getDetails();
        boolean boolean21 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=5685, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=5685, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CD" + "'", str19, "CD");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str20, "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD17.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str27 = cD26.getLocation();
        java.lang.String str28 = cD26.getLocation();
        items.CD cD35 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray52 = new items.LibraryItem[] { cD35, cD42, cD51 };
        java.util.ArrayList<items.LibraryItem> libraryItemList53 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList53, libraryItemArray52);
        boolean boolean55 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean56 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean57 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        java.lang.String str58 = cD6.getAuthor();
        boolean boolean59 = cD6.isPurchasable();
        boolean boolean60 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getAuthor();
        items.CD cD20 = new items.CD("", "", false, true, "", "hi!");
        int int21 = cD20.getItemId();
        boolean boolean22 = cD20.isPurchasable();
        java.lang.String str23 = cD20.getBorrowerEmail();
        java.lang.String str24 = cD20.getArtist();
        java.lang.String str25 = cD20.getTitle();
        boolean boolean26 = cD20.isPurchasable();
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.toString();
        java.lang.String str36 = cD33.getDetails();
        boolean boolean37 = cD33.isRented();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD33.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean75 = cD20.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean76 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str77 = cD6.getItemType();
        java.time.LocalDate localDate78 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate78, 0, "LibraryItem [itemId=5550, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5693 + "'", int9 == 5693);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5693, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5693, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5693 + "'", int12 == 5693);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5694 + "'", int21 == 5694);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "LibraryItem [itemId=5695, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str35, "LibraryItem [itemId=5695, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str36, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "CD" + "'", str77, "CD");
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        items.CD cD6 = new items.CD("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD");
        java.lang.String str7 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean10 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=95, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getPrice();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5702 + "'", int9 == 5702);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5702, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5702, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        cD6.setLocation("LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str52 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5703 + "'", int9 == 5703);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "CD" + "'", str52, "CD");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getArtist();
        cD6.setBorrowerEmail("LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass20 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5713 + "'", int14 == 5713);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        items.CD cD27 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str35 = cD34.getLocation();
        java.lang.String str36 = cD34.getLocation();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray44 = new items.LibraryItem[] { cD27, cD34, cD43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList45 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList45, libraryItemArray44);
        boolean boolean47 = cD18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList45);
        boolean boolean48 = cD18.isOverdue();
        java.lang.String str49 = cD18.getLocation();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD72 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str73 = cD72.getLocation();
        java.lang.String str74 = cD72.getLocation();
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray82 = new items.LibraryItem[] { cD65, cD72, cD81 };
        java.util.ArrayList<items.LibraryItem> libraryItemList83 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList83, libraryItemArray82);
        boolean boolean85 = cD56.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean86 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean87 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        java.lang.String str88 = cD6.getTitle();
        java.lang.String str89 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        double double9 = cD6.calculateOverduePenalty();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getDetails();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getAuthor();
        items.CD cD20 = new items.CD("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=436, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=842, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=163, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD27 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str28 = cD27.getLocation();
        java.lang.String str29 = cD27.getLocation();
        boolean boolean30 = cD27.isPurchasable();
        boolean boolean31 = cD27.isOverdue();
        boolean boolean32 = cD27.isPurchasable();
        boolean boolean33 = cD27.isOverdue();
        java.lang.String str34 = cD27.getDetails();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str42 = cD41.getLocation();
        java.lang.String str43 = cD41.toString();
        java.lang.String str44 = cD41.getBorrowerEmail();
        java.lang.String str45 = cD41.getPrice();
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD52.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD61 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str62 = cD61.getLocation();
        java.lang.String str63 = cD61.getLocation();
        items.CD cD70 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD77 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str78 = cD77.getLocation();
        java.lang.String str79 = cD77.getLocation();
        items.CD cD86 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray87 = new items.LibraryItem[] { cD70, cD77, cD86 };
        java.util.ArrayList<items.LibraryItem> libraryItemList88 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList88, libraryItemArray87);
        boolean boolean90 = cD61.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean91 = cD52.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean92 = cD41.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean93 = cD27.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean94 = cD20.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean95 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList88);
        java.lang.String str96 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5723, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5723, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5723 + "'", int12 == 5723);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str34, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "LibraryItem [itemId=5726, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str43, "LibraryItem [itemId=5726, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "CD" + "'", str96, "CD");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        java.lang.String str18 = cD6.getTitle();
        java.lang.Class<?> wildcardClass19 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getLocation();
        java.lang.String str13 = cD6.getPrice();
        java.lang.String str14 = cD6.getArtist();
        cD6.setBorrowerEmail("LibraryItem [itemId=3939, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double17 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getTitle();
        java.lang.String str16 = cD6.getLocation();
        items.CD cD23 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str24 = cD23.getBorrowerEmail();
        java.lang.String str25 = cD23.getBorrowerEmail();
        cD23.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD34.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str44 = cD43.getLocation();
        java.lang.String str45 = cD43.getLocation();
        items.CD cD52 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD59 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str60 = cD59.getLocation();
        java.lang.String str61 = cD59.getLocation();
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray69 = new items.LibraryItem[] { cD52, cD59, cD68 };
        java.util.ArrayList<items.LibraryItem> libraryItemList70 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList70, libraryItemArray69);
        boolean boolean72 = cD43.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList70);
        boolean boolean73 = cD34.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        boolean boolean74 = cD23.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList70);
        boolean boolean75 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList70);
        java.lang.String str76 = cD6.getAuthor();
        java.lang.String str77 = cD6.getArtist();
        java.lang.Class<?> wildcardClass78 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5734 + "'", int9 == 5734);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5734, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5734, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.toString();
        java.lang.String str12 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str14 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5741 + "'", int9 == 5741);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5741, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5741, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getArtist();
        java.lang.String str40 = cD6.getItemType();
        cD6.setLocation("LibraryItem [itemId=3319, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5747 + "'", int37 == 5747);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CD" + "'", str40, "CD");
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str11 = cD6.getArtist();
        java.lang.String str12 = cD6.getAuthor();
        boolean boolean13 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5755, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5755, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(false);
        boolean boolean9 = cD6.isOverdue();
        boolean boolean10 = cD6.isRented();
        int int11 = cD6.getItemId();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5757 + "'", int11 == 5757);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getAuthor();
        java.lang.String str8 = cD6.getTitle();
        java.lang.String str9 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=5723, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str9, "CD: LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        java.lang.String str38 = cD6.getAuthor();
        java.lang.String str39 = cD6.getAuthor();
        java.lang.String str40 = cD6.getLocation();
        java.lang.String str41 = cD6.getPrice();
        java.lang.String str42 = cD6.getLocation();
        java.lang.String str43 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getAuthor();
        java.lang.String str92 = cD6.getItemType();
        int int93 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5765, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5765, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "CD" + "'", str92, "CD");
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 5765 + "'", int93 == 5765);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getPrice();
        double double51 = cD6.calculateOverduePenalty();
        boolean boolean52 = cD6.isOverdue();
        double double53 = cD6.calculateOverduePenalty();
        cD6.setLocation("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5774 + "'", int9 == 5774);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        items.CD cD6 = new items.CD("LibraryItem [itemId=5590, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=644, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=3904, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2048, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isRented();
        boolean boolean12 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        boolean boolean15 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5784, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5784, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.setBorrowerEmail("LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getArtist();
        cD6.setBorrowerEmail("LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean18 = cD6.isPurchasable();
        java.lang.String str19 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5787 + "'", int9 == 5787);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5787, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5787, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str19, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setIsPurchasable(false);
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str25 = cD24.getBorrowerEmail();
        java.lang.String str26 = cD24.getBorrowerEmail();
        cD24.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD35.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD35.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean75 = cD24.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean76 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        int int77 = cD6.getItemId();
        java.lang.String str78 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5788 + "'", int77 == 5788);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "LibraryItem [itemId=5788, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str78, "LibraryItem [itemId=5788, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getPrice();
        java.lang.String str51 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=3860, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean54 = cD6.isOverdue();
        java.time.LocalDate localDate55 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate55, 3069, "LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5795 + "'", int9 == 5795);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getBorrowerEmail();
        java.lang.String str38 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getBorrowerEmail();
        boolean boolean16 = cD6.isPurchasable();
        java.lang.String str17 = cD6.getLocation();
        java.lang.String str18 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5804 + "'", int9 == 5804);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5804, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5804, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "LibraryItem [itemId=5804, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str18, "LibraryItem [itemId=5804, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        java.util.List<items.LibraryItem> libraryItemList89 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = cD6.hasExceededBorrowingLimit(libraryItemList89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5807, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5807, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        java.lang.Class<?> wildcardClass9 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getPrice();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD17.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str27 = cD26.getLocation();
        java.lang.String str28 = cD26.getLocation();
        items.CD cD35 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray52 = new items.LibraryItem[] { cD35, cD42, cD51 };
        java.util.ArrayList<items.LibraryItem> libraryItemList53 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList53, libraryItemArray52);
        boolean boolean55 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean56 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean57 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean58 = cD6.isRented();
        java.lang.String str59 = cD6.getTitle();
        java.lang.String str60 = cD6.getLocation();
        java.lang.String str61 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getLocation();
        cD6.setBorrowerEmail("CD:  by hi!. Location: . Purchasable: false");
        java.lang.String str15 = cD6.getLocation();
        java.lang.Class<?> wildcardClass16 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5823 + "'", int9 == 5823);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5823, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5823, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        items.CD cD6 = new items.CD("CD", "LibraryItem [itemId=1232, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1279, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "");
        cD6.setBorrowerEmail("LibraryItem [itemId=5032, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        cD6.setLocation("LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str52 = cD6.getDetails();
        double double53 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5826 + "'", int9 == 5826);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str52, "CD: hi! by hi!. Location: LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isPurchasable();
        cD6.setIsPurchasable(false);
        boolean boolean39 = cD6.isPurchasable();
        boolean boolean40 = cD6.isOverdue();
        boolean boolean41 = cD6.isOverdue();
        java.lang.String str42 = cD6.getTitle();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1945, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=2677, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        cD6.setBorrowerEmail("LibraryItem [itemId=3879, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        java.lang.String str36 = cD6.getDetails();
        int int37 = cD6.getItemId();
        boolean boolean38 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str36, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5841 + "'", int37 == 5841);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        double double8 = cD6.calculateOverduePenalty();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        items.CD cD6 = new items.CD("LibraryItem [itemId=4422, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", false, false, "LibraryItem [itemId=439, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2962, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2226, itemType=CD, location=LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1724, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getLocation();
        java.time.LocalDate localDate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate8, 3773, "LibraryItem [itemId=1584, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=2226, itemType=CD, location=LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=2226, itemType=CD, location=LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str11 = cD6.getArtist();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=3056, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean16 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5849, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5849, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=1452, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5850 + "'", int9 == 5850);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.toString();
        java.lang.String str20 = cD17.getBorrowerEmail();
        java.lang.String str21 = cD17.getBorrowerEmail();
        items.CD cD28 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str29 = cD28.getLocation();
        java.lang.String str30 = cD28.getLocation();
        items.CD cD37 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { cD37, cD44, cD53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = cD28.isOverdue();
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str66 = cD65.getLocation();
        java.lang.String str67 = cD65.getLocation();
        items.CD cD74 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str82 = cD81.getLocation();
        java.lang.String str83 = cD81.getLocation();
        items.CD cD90 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray91 = new items.LibraryItem[] { cD74, cD81, cD90 };
        java.util.ArrayList<items.LibraryItem> libraryItemList92 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList92, libraryItemArray91);
        boolean boolean94 = cD65.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean95 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean96 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean97 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean98 = cD6.isOverdue();
        boolean boolean99 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5851 + "'", int9 == 5851);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5851, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5851, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "LibraryItem [itemId=5852, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str19, "LibraryItem [itemId=5852, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getLocation();
        java.lang.String str9 = cD6.getArtist();
        boolean boolean10 = cD6.isOverdue();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        double double8 = cD6.calculateOverduePenalty();
        java.lang.String str9 = cD6.getPrice();
        java.lang.String str10 = cD6.getItemType();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD" + "'", str10, "CD");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        java.lang.String str36 = cD6.getDetails();
        boolean boolean37 = cD6.isOverdue();
        double double38 = cD6.calculateOverduePenalty();
        java.lang.String str39 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str36, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getAuthor();
        java.lang.String str14 = cD6.getPrice();
        cD6.setBorrowerEmail("LibraryItem [itemId=1453, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5867 + "'", int9 == 5867);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        boolean boolean18 = cD6.isRented();
        cD6.setIsPurchasable(true);
        cD6.returnItem();
        java.lang.String str22 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        items.CD cD6 = new items.CD("LibraryItem [itemId=485, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=452, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=1321, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=846, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        double double8 = cD6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass9 = cD6.getClass();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        items.CD cD6 = new items.CD("LibraryItem [itemId=362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=814, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=676, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isRented();
        cD6.returnItem();
        double double9 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        double double13 = cD6.calculateOverduePenalty();
        java.lang.String str14 = cD6.getTitle();
        java.lang.String str15 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5871, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5871, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getLocation();
        java.lang.String str13 = cD6.toString();
        cD6.setBorrowerEmail("LibraryItem [itemId=663, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        java.lang.String str17 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5872 + "'", int9 == 5872);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5872, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5872, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=5872, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=5872, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2934, itemType=CD, location=LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", true, true, "LibraryItem [itemId=2497, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=2497, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=2497, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        boolean boolean12 = cD6.isOverdue();
        java.lang.String str13 = cD6.getDetails();
        boolean boolean14 = cD6.isRented();
        cD6.returnItem();
        java.lang.Class<?> wildcardClass16 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getItemType();
        java.lang.String str17 = cD6.getPrice();
        java.lang.String str18 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=5877, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=5877, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        java.lang.String str38 = cD6.getLocation();
        boolean boolean39 = cD6.isRented();
        java.lang.String str40 = cD6.getDetails();
        cD6.setLocation("LibraryItem [itemId=1718, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str43 = cD6.getPrice();
        java.time.LocalDate localDate44 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate44, 1670, "LibraryItem [itemId=2022, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str40, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        boolean boolean12 = cD6.isOverdue();
        java.lang.String str13 = cD6.getDetails();
        items.CD cD20 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str21 = cD20.getLocation();
        java.lang.String str22 = cD20.toString();
        java.lang.String str23 = cD20.getBorrowerEmail();
        java.lang.String str24 = cD20.getPrice();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD31.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str41 = cD40.getLocation();
        java.lang.String str42 = cD40.getLocation();
        items.CD cD49 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray66 = new items.LibraryItem[] { cD49, cD56, cD65 };
        java.util.ArrayList<items.LibraryItem> libraryItemList67 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList67, libraryItemArray66);
        boolean boolean69 = cD40.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean70 = cD31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean71 = cD20.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean72 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        java.lang.Class<?> wildcardClass73 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "LibraryItem [itemId=5883, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str22, "LibraryItem [itemId=5883, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        cD6.setBorrowerEmail("LibraryItem [itemId=2000, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass41 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.toString();
        boolean boolean13 = cD6.isRented();
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5893, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5893, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5893 + "'", int11 == 5893);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=5893, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=5893, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2048, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=980, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=370, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2226, itemType=CD, location=LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1724, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=861, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=3317, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getLocation();
        cD6.setBorrowerEmail("CD:  by hi!. Location: . Purchasable: false");
        java.lang.Class<?> wildcardClass15 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5897 + "'", int9 == 5897);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5897, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5897, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getDetails();
        cD6.setIsPurchasable(false);
        items.CD cD21 = new items.CD("CD", "LibraryItem [itemId=1232, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1279, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "");
        items.CD cD28 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str29 = cD28.getLocation();
        java.lang.String str30 = cD28.getLocation();
        items.CD cD37 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { cD37, cD44, cD53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = cD21.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        cD6.returnItem();
        cD6.setLocation("LibraryItem [itemId=976, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5898 + "'", int9 == 5898);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1907, itemType=CD, location=LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3126, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=399, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=4352, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isOverdue();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        cD6.returnItem();
        java.lang.String str87 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5914, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5914, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=144, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=2239, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str18 = cD6.getLocation();
        java.lang.String str19 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.toString();
        java.lang.String str12 = cD6.getTitle();
        java.lang.Class<?> wildcardClass13 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=5924, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=5924, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("");
        java.lang.String str18 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getLocation();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getLocation();
        cD6.setBorrowerEmail("CD:  by hi!. Location: . Purchasable: false");
        java.lang.String str15 = cD6.getLocation();
        java.lang.String str16 = cD6.getBorrowerEmail();
        java.lang.String str17 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=2781, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5928 + "'", int9 == 5928);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5928, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5928, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD:  by hi!. Location: . Purchasable: false" + "'", str16, "CD:  by hi!. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CD:  by hi!. Location: . Purchasable: false" + "'", str17, "CD:  by hi!. Location: . Purchasable: false");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.toString();
        java.lang.String str20 = cD17.getBorrowerEmail();
        java.lang.String str21 = cD17.getBorrowerEmail();
        items.CD cD28 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str29 = cD28.getLocation();
        java.lang.String str30 = cD28.getLocation();
        items.CD cD37 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { cD37, cD44, cD53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = cD28.isOverdue();
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str66 = cD65.getLocation();
        java.lang.String str67 = cD65.getLocation();
        items.CD cD74 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str82 = cD81.getLocation();
        java.lang.String str83 = cD81.getLocation();
        items.CD cD90 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray91 = new items.LibraryItem[] { cD74, cD81, cD90 };
        java.util.ArrayList<items.LibraryItem> libraryItemList92 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList92, libraryItemArray91);
        boolean boolean94 = cD65.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean95 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean96 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean97 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean98 = cD6.isPurchasable();
        java.lang.String str99 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5929 + "'", int9 == 5929);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=5929, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=5929, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "LibraryItem [itemId=5930, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str19, "LibraryItem [itemId=5930, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "hi!" + "'", str99, "hi!");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        double double13 = cD6.calculateOverduePenalty();
        int int14 = cD6.getItemId();
        items.CD cD21 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str22 = cD21.getLocation();
        java.lang.String str23 = cD21.getLocation();
        boolean boolean24 = cD21.isPurchasable();
        boolean boolean25 = cD21.isOverdue();
        java.lang.String str26 = cD21.getItemType();
        java.lang.String str27 = cD21.getAuthor();
        cD21.returnItem();
        int int29 = cD21.getItemId();
        cD21.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str32 = cD21.getArtist();
        cD21.setBorrowerEmail("LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD21.returnItem();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        int int45 = cD42.getItemId();
        cD42.setBorrowerEmail("CD");
        java.lang.String str48 = cD42.getArtist();
        items.CD cD55 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str56 = cD55.getLocation();
        java.lang.String str57 = cD55.getLocation();
        items.CD cD64 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD71 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str72 = cD71.getLocation();
        java.lang.String str73 = cD71.getLocation();
        items.CD cD80 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray81 = new items.LibraryItem[] { cD64, cD71, cD80 };
        java.util.ArrayList<items.LibraryItem> libraryItemList82 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList82, libraryItemArray81);
        boolean boolean84 = cD55.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean85 = cD42.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean86 = cD21.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        boolean boolean87 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList82);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5939, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5939, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5939 + "'", int14 == 5939);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CD" + "'", str26, "CD");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5940 + "'", int29 == 5940);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5941 + "'", int45 == 5941);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5946 + "'", int9 == 5946);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getDetails();
        boolean boolean13 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5947, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5947, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        boolean boolean15 = cD6.isOverdue();
        cD6.returnItem();
        items.CD cD23 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str24 = cD23.getLocation();
        java.lang.String str25 = cD23.getLocation();
        items.CD cD32 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD39 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str40 = cD39.getLocation();
        java.lang.String str41 = cD39.getLocation();
        items.CD cD48 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray49 = new items.LibraryItem[] { cD32, cD39, cD48 };
        java.util.ArrayList<items.LibraryItem> libraryItemList50 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList50, libraryItemArray49);
        boolean boolean52 = cD23.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList50);
        boolean boolean53 = cD23.isOverdue();
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD76 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str77 = cD76.getLocation();
        java.lang.String str78 = cD76.getLocation();
        items.CD cD85 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray86 = new items.LibraryItem[] { cD69, cD76, cD85 };
        java.util.ArrayList<items.LibraryItem> libraryItemList87 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList87, libraryItemArray86);
        boolean boolean89 = cD60.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList87);
        boolean boolean90 = cD23.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList87);
        boolean boolean91 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList87);
        java.lang.String str92 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5948 + "'", int14 == 5948);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=3194, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double11 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5958, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5958, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        items.CD cD6 = new items.CD("LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=298, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isOverdue();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getItemType();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD" + "'", str10, "CD");
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getBorrowerEmail();
        java.lang.String str18 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5960, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5960, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CD" + "'", str18, "CD");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getDetails();
        cD6.setIsPurchasable(false);
        java.lang.String str15 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str17 = cD6.toString();
        java.lang.String str18 = cD6.getPrice();
        cD6.setBorrowerEmail("LibraryItem [itemId=1250, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5961 + "'", int9 == 5961);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=5961, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=5961, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        items.CD cD6 = new items.CD("LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=751, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=559, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=862, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getPrice();
        double double8 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=862, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=862, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=5983, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=5983, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        items.CD cD18 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD18.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD27 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str28 = cD27.getLocation();
        java.lang.String str29 = cD27.getLocation();
        items.CD cD36 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str44 = cD43.getLocation();
        java.lang.String str45 = cD43.getLocation();
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray53 = new items.LibraryItem[] { cD36, cD43, cD52 };
        java.util.ArrayList<items.LibraryItem> libraryItemList54 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList54, libraryItemArray53);
        boolean boolean56 = cD27.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList54);
        boolean boolean57 = cD27.isOverdue();
        items.CD cD64 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str65 = cD64.getLocation();
        java.lang.String str66 = cD64.getLocation();
        items.CD cD73 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD80 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str81 = cD80.getLocation();
        java.lang.String str82 = cD80.getLocation();
        items.CD cD89 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray90 = new items.LibraryItem[] { cD73, cD80, cD89 };
        java.util.ArrayList<items.LibraryItem> libraryItemList91 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList91, libraryItemArray90);
        boolean boolean93 = cD64.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean94 = cD27.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean95 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean96 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList91);
        cD6.setBorrowerEmail("LibraryItem [itemId=2240, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean99 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getPrice();
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6011 + "'", int9 == 6011);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str12 = cD6.getAuthor();
        boolean boolean13 = cD6.isOverdue();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6012, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6012, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        items.CD cD14 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str15 = cD14.getLocation();
        java.lang.String str16 = cD14.getLocation();
        items.CD cD23 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD30 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str31 = cD30.getLocation();
        java.lang.String str32 = cD30.getLocation();
        items.CD cD39 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray40 = new items.LibraryItem[] { cD23, cD30, cD39 };
        java.util.ArrayList<items.LibraryItem> libraryItemList41 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList41, libraryItemArray40);
        boolean boolean43 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList41);
        boolean boolean44 = cD14.isOverdue();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str52 = cD51.getLocation();
        java.lang.String str53 = cD51.getLocation();
        items.CD cD60 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str68 = cD67.getLocation();
        java.lang.String str69 = cD67.getLocation();
        items.CD cD76 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { cD60, cD67, cD76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = cD51.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean81 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean82 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        java.lang.String str83 = cD6.getTitle();
        java.lang.String str84 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        items.CD cD6 = new items.CD("LibraryItem [itemId=5488, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1840, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=3882, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=4805, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        java.lang.String str15 = cD6.getDetails();
        double double16 = cD6.calculateOverduePenalty();
        boolean boolean17 = cD6.isOverdue();
        int int18 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6024 + "'", int14 == 6024);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6024 + "'", int18 == 6024);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getItemType();
        java.lang.String str40 = cD6.getDetails();
        java.lang.String str41 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6026 + "'", int37 == 6026);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CD" + "'", str39, "CD");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str40, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        items.CD cD6 = new items.CD("CD", "LibraryItem [itemId=1232, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1279, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "");
        items.CD cD13 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str14 = cD13.getLocation();
        java.lang.String str15 = cD13.getLocation();
        items.CD cD22 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD29 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str30 = cD29.getLocation();
        java.lang.String str31 = cD29.getLocation();
        items.CD cD38 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray39 = new items.LibraryItem[] { cD22, cD29, cD38 };
        java.util.ArrayList<items.LibraryItem> libraryItemList40 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList40, libraryItemArray39);
        boolean boolean42 = cD13.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList40);
        boolean boolean43 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList40);
        java.lang.String str44 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "LibraryItem [itemId=1279, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str44, "LibraryItem [itemId=1279, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean17 = cD6.isOverdue();
        cD6.setLocation("LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str20 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=6044, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=6044, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        double double11 = cD6.calculateOverduePenalty();
        double double12 = cD6.calculateOverduePenalty();
        boolean boolean13 = cD6.isOverdue();
        cD6.setLocation("LibraryItem [itemId=5678, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6045, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6045, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        boolean boolean15 = cD6.isRented();
        java.lang.String str16 = cD6.getAuthor();
        java.lang.String str17 = cD6.getLocation();
        boolean boolean18 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getAuthor();
        java.lang.String str10 = cD6.toString();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate11, 1363, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6049 + "'", int7 == 6049);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6049, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6049, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getArtist();
        java.lang.String str16 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        cD6.returnItem();
        boolean boolean88 = cD6.isPurchasable();
        java.lang.String str89 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6051, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6051, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getLocation();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getItemType();
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate17, 5551, "LibraryItem [itemId=5692, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6066 + "'", int9 == 6066);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6066, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6066, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=6066, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=6066, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        items.CD cD6 = new items.CD("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        boolean boolean8 = cD6.isPurchasable();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        items.CD cD6 = new items.CD("LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=372, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.toString();
        cD6.returnItem();
        java.lang.String str9 = cD6.getItemType();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=6069, itemType=CD, location=LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=6069, itemType=CD, location=LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD" + "'", str9, "CD");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getTitle();
        cD6.setLocation("");
        java.lang.String str17 = cD6.getAuthor();
        java.lang.String str18 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str11 = cD6.getArtist();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=3056, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD22 = new items.CD("", "LibraryItem [itemId=94, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str23 = cD22.getPrice();
        items.CD cD30 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str31 = cD30.getLocation();
        java.lang.String str32 = cD30.getLocation();
        int int33 = cD30.getItemId();
        java.lang.String str34 = cD30.getBorrowerEmail();
        cD30.setBorrowerEmail("LibraryItem [itemId=167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str37 = cD30.getItemType();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD30.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean75 = cD22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean76 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6084, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6084, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str23, "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6086 + "'", int33 == 6086);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CD" + "'", str37, "CD");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1616, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=846, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=1462, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2425, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        items.CD cD6 = new items.CD("LibraryItem [itemId=861, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1809, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=2568, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=4068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean11 = cD6.isPurchasable();
        double double12 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getTitle();
        cD6.returnItem();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6104 + "'", int7 == 6104);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        java.lang.String str38 = cD6.getPrice();
        boolean boolean39 = cD6.isRented();
        java.lang.String str40 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CD" + "'", str40, "CD");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setIsPurchasable(false);
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str25 = cD24.getBorrowerEmail();
        java.lang.String str26 = cD24.getBorrowerEmail();
        cD24.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD35.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD35.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean75 = cD24.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean76 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        int int77 = cD6.getItemId();
        java.lang.String str78 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 6118 + "'", int77 == 6118);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "CD" + "'", str78, "CD");
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getAuthor();
        java.lang.String str14 = cD6.getPrice();
        java.lang.String str15 = cD6.toString();
        double double16 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6125 + "'", int9 == 6125);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=6125, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=6125, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getPrice();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD17.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str27 = cD26.getLocation();
        java.lang.String str28 = cD26.getLocation();
        items.CD cD35 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray52 = new items.LibraryItem[] { cD35, cD42, cD51 };
        java.util.ArrayList<items.LibraryItem> libraryItemList53 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList53, libraryItemArray52);
        boolean boolean55 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean56 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean57 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean58 = cD6.isRented();
        java.lang.String str59 = cD6.getTitle();
        java.lang.String str60 = cD6.getLocation();
        java.time.LocalDate localDate61 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate61, 4980, "LibraryItem [itemId=4652, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6126, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6126, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        int int12 = cD6.getItemId();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.toString();
        java.lang.String str22 = cD19.getBorrowerEmail();
        java.lang.String str23 = cD19.getBorrowerEmail();
        cD19.setIsPurchasable(false);
        java.lang.String str26 = cD19.getArtist();
        int int27 = cD19.getItemId();
        boolean boolean28 = cD19.isRented();
        cD19.returnItem();
        items.CD cD36 = new items.CD("LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true", "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD36.setBorrowerEmail("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD45 = new items.CD("", "", false, true, "", "hi!");
        int int46 = cD45.getItemId();
        boolean boolean47 = cD45.isPurchasable();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD45.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD36.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean87 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str88 = cD6.toString();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6132 + "'", int9 == 6132);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6132, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6132, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6132 + "'", int12 == 6132);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "LibraryItem [itemId=6133, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str21, "LibraryItem [itemId=6133, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6133 + "'", int27 == 6133);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6135 + "'", int46 == 6135);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "LibraryItem [itemId=6132, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str88, "LibraryItem [itemId=6132, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(false);
        boolean boolean9 = cD6.isOverdue();
        boolean boolean10 = cD6.isRented();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.toString();
        java.lang.String str20 = cD17.getBorrowerEmail();
        java.lang.String str21 = cD17.getBorrowerEmail();
        java.lang.String str22 = cD17.getBorrowerEmail();
        java.lang.String str23 = cD17.getBorrowerEmail();
        cD17.returnItem();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        boolean boolean34 = cD31.isPurchasable();
        boolean boolean35 = cD31.isOverdue();
        cD31.returnItem();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str44 = cD43.getLocation();
        java.lang.String str45 = cD43.getLocation();
        int int46 = cD43.getItemId();
        cD43.setBorrowerEmail("CD");
        java.lang.String str49 = cD43.getArtist();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD72 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str73 = cD72.getLocation();
        java.lang.String str74 = cD72.getLocation();
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray82 = new items.LibraryItem[] { cD65, cD72, cD81 };
        java.util.ArrayList<items.LibraryItem> libraryItemList83 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList83, libraryItemArray82);
        boolean boolean85 = cD56.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean86 = cD43.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean87 = cD31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean88 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean89 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        java.lang.String str90 = cD6.getItemType();
        cD6.setBorrowerEmail("LibraryItem [itemId=1928, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "LibraryItem [itemId=6142, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str19, "LibraryItem [itemId=6142, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6144 + "'", int46 == 6144);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "CD" + "'", str90, "CD");
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getLocation();
        java.time.LocalDate localDate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate9, 6104, "LibraryItem [itemId=2687, itemType=CD, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getLocation();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=6151, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=6151, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isPurchasable();
        java.lang.String str37 = cD6.getBorrowerEmail();
        cD6.setBorrowerEmail("LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass40 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getBorrowerEmail();
        cD6.setBorrowerEmail("CD: hi! by hi!. Location: hi!. Purchasable: true");
        java.lang.String str17 = cD6.getBorrowerEmail();
        java.lang.String str18 = cD6.getItemType();
        java.time.LocalDate localDate19 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate19, 936, "LibraryItem [itemId=2821, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6156 + "'", int9 == 6156);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6156, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6156, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=6156, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=6156, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: true" + "'", str17, "CD: hi! by hi!. Location: hi!. Purchasable: true");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CD" + "'", str18, "CD");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.toString();
        cD6.setLocation("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6157 + "'", int14 == 6157);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=6157, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=6157, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=582, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean17 = cD6.isPurchasable();
        cD6.setLocation("LibraryItem [itemId=770, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str20 = cD6.getBorrowerEmail();
        java.lang.String str21 = cD6.getAuthor();
        double double22 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6158, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6158, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=582, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=582, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        items.CD cD6 = new items.CD("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("hi!");
        cD6.setIsPurchasable(true);
        boolean boolean11 = cD6.isRented();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getArtist();
        java.lang.String str14 = cD6.getItemType();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD" + "'", str14, "CD");
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getAuthor();
        java.lang.String str51 = cD6.getItemType();
        boolean boolean52 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6160 + "'", int9 == 6160);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CD" + "'", str51, "CD");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        items.CD cD6 = new items.CD("LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=298, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isOverdue();
        java.lang.String str9 = cD6.toString();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate10, 4310, "LibraryItem [itemId=2689, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=6165, itemType=CD, location=LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=6165, itemType=CD, location=LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        cD6.returnItem();
        boolean boolean39 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getArtist();
        java.lang.String str40 = cD6.getItemType();
        java.lang.String str41 = cD6.getPrice();
        java.lang.String str42 = cD6.toString();
        cD6.setBorrowerEmail("LibraryItem [itemId=2690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6170 + "'", int37 == 6170);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CD" + "'", str40, "CD");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "LibraryItem [itemId=6170, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str42, "LibraryItem [itemId=6170, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getBorrowerEmail();
        boolean boolean16 = cD6.isPurchasable();
        java.lang.String str17 = cD6.getDetails();
        java.lang.String str18 = cD6.getTitle();
        cD6.returnItem();
        int int20 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6176 + "'", int9 == 6176);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str17, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6176 + "'", int20 == 6176);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1801, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1137, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=928, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1123, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        java.lang.String str38 = cD6.getDetails();
        java.lang.String str39 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=485, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str42 = cD6.getAuthor();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str38, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int18 = cD6.getItemId();
        java.lang.String str19 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6182 + "'", int18 == 6182);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "LibraryItem [itemId=6182, itemType=CD, location=LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str19, "LibraryItem [itemId=6182, itemType=CD, location=LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        double double15 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        items.CD cD6 = new items.CD("LibraryItem [itemId=368, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=853, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=4754, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2788, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=6184, itemType=CD, location=LibraryItem [itemId=368, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=4754, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=6184, itemType=CD, location=LibraryItem [itemId=368, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=4754, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getPrice();
        java.lang.String str40 = cD6.getPrice();
        java.lang.String str41 = cD6.getPrice();
        boolean boolean42 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(false);
        boolean boolean9 = cD6.isOverdue();
        cD6.returnItem();
        cD6.returnItem();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=931, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=2206, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=5877, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        items.CD cD27 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str35 = cD34.getLocation();
        java.lang.String str36 = cD34.getLocation();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray44 = new items.LibraryItem[] { cD27, cD34, cD43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList45 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList45, libraryItemArray44);
        boolean boolean47 = cD18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList45);
        boolean boolean48 = cD18.isOverdue();
        java.lang.String str49 = cD18.getLocation();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD72 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str73 = cD72.getLocation();
        java.lang.String str74 = cD72.getLocation();
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray82 = new items.LibraryItem[] { cD65, cD72, cD81 };
        java.util.ArrayList<items.LibraryItem> libraryItemList83 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList83, libraryItemArray82);
        boolean boolean85 = cD56.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean86 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean87 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        java.lang.String str88 = cD6.getBorrowerEmail();
        int int89 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 6206 + "'", int89 == 6206);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getTitle();
        boolean boolean12 = cD6.isPurchasable();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.toString();
        java.lang.String str22 = cD19.getDetails();
        boolean boolean23 = cD19.isRented();
        items.CD cD30 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str31 = cD30.getLocation();
        java.lang.String str32 = cD30.getLocation();
        items.CD cD39 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD46 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str47 = cD46.getLocation();
        java.lang.String str48 = cD46.getLocation();
        items.CD cD55 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray56 = new items.LibraryItem[] { cD39, cD46, cD55 };
        java.util.ArrayList<items.LibraryItem> libraryItemList57 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList57, libraryItemArray56);
        boolean boolean59 = cD30.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList57);
        boolean boolean60 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList57);
        boolean boolean61 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList57);
        cD6.setBorrowerEmail("LibraryItem [itemId=862, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean64 = cD6.isPurchasable();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6215 + "'", int7 == 6215);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "LibraryItem [itemId=6216, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str21, "LibraryItem [itemId=6216, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str22, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        items.CD cD6 = new items.CD("LibraryItem [itemId=362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=814, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=676, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isOverdue();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        items.CD cD6 = new items.CD("LibraryItem [itemId=3729, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3764, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1705, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3939, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass7 = cD6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        boolean boolean13 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        java.lang.String str16 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6223 + "'", int9 == 6223);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6223, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6223, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=6223, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=6223, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6223 + "'", int12 == 6223);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=6223, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=6223, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getItemType();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD" + "'", str7, "CD");
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        items.CD cD6 = new items.CD("CD: LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", "LibraryItem [itemId=6170, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=5787, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2226, itemType=CD, location=LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1724, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getItemType();
        java.lang.String str8 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD" + "'", str7, "CD");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD" + "'", str8, "CD");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getLocation();
        cD6.returnItem();
        cD6.setBorrowerEmail("LibraryItem [itemId=3557, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate12, 1707, "LibraryItem [itemId=2748, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getLocation();
        double double17 = cD6.calculateOverduePenalty();
        int int18 = cD6.getItemId();
        cD6.setLocation("LibraryItem [itemId=3845, itemType=CD, location=LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=1322, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=6229, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=6229, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6229 + "'", int18 == 6229);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        items.CD cD6 = new items.CD("LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1364, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=1031, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getItemType();
        java.lang.String str8 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD" + "'", str7, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6230, itemType=CD, location=LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=1031, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6230, itemType=CD, location=LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=1031, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        double double7 = cD6.calculateOverduePenalty();
        java.lang.String str8 = cD6.getPrice();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        items.CD cD27 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str35 = cD34.getLocation();
        java.lang.String str36 = cD34.getLocation();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray44 = new items.LibraryItem[] { cD27, cD34, cD43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList45 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList45, libraryItemArray44);
        boolean boolean47 = cD18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList45);
        boolean boolean48 = cD18.isOverdue();
        java.lang.String str49 = cD18.getLocation();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD72 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str73 = cD72.getLocation();
        java.lang.String str74 = cD72.getLocation();
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray82 = new items.LibraryItem[] { cD65, cD72, cD81 };
        java.util.ArrayList<items.LibraryItem> libraryItemList83 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList83, libraryItemArray82);
        boolean boolean85 = cD56.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean86 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean87 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        cD6.setIsPurchasable(true);
        double double90 = cD6.calculateOverduePenalty();
        boolean boolean91 = cD6.isOverdue();
        java.lang.String str92 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        items.CD cD6 = new items.CD("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD");
        java.lang.String str7 = cD6.getTitle();
        java.lang.String str8 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        boolean boolean11 = cD6.isPurchasable();
        java.lang.String str12 = cD6.getItemType();
        java.lang.String str13 = cD6.getPrice();
        java.lang.String str14 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD" + "'", str8, "CD");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD" + "'", str12, "CD");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD" + "'", str14, "CD");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        java.lang.String str9 = cD6.getItemType();
        java.lang.Class<?> wildcardClass10 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD" + "'", str9, "CD");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isRented();
        java.lang.String str12 = cD6.getDetails();
        java.lang.String str13 = cD6.getTitle();
        java.lang.String str14 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6247, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6247, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        boolean boolean15 = cD6.isRented();
        java.util.List<items.LibraryItem> libraryItemList16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = cD6.hasBorrowingPrivileges(libraryItemList16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        java.lang.String str11 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=1233, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getTitle();
        boolean boolean15 = cD6.isOverdue();
        java.lang.String str16 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=1233, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str16, "CD: hi! by hi!. Location: LibraryItem [itemId=1233, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setBorrowerEmail("LibraryItem [itemId=167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=153, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6250 + "'", int9 == 6250);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        cD6.setLocation("LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        int int54 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6251 + "'", int9 == 6251);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6251 + "'", int54 == 6251);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isPurchasable();
        cD6.setIsPurchasable(false);
        boolean boolean39 = cD6.isPurchasable();
        boolean boolean40 = cD6.isOverdue();
        java.lang.String str41 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getItemType();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6270 + "'", int9 == 6270);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD" + "'", str12, "CD");
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getArtist();
        cD6.returnItem();
        cD6.setLocation("LibraryItem [itemId=3415, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=6271, itemType=CD, location=LibraryItem [itemId=3415, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=6271, itemType=CD, location=LibraryItem [itemId=3415, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        int int38 = cD6.getItemId();
        items.CD cD45 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str46 = cD45.getLocation();
        java.lang.String str47 = cD45.toString();
        java.lang.String str48 = cD45.getBorrowerEmail();
        java.lang.String str49 = cD45.getPrice();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD56.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str66 = cD65.getLocation();
        java.lang.String str67 = cD65.getLocation();
        items.CD cD74 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str82 = cD81.getLocation();
        java.lang.String str83 = cD81.getLocation();
        items.CD cD90 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray91 = new items.LibraryItem[] { cD74, cD81, cD90 };
        java.util.ArrayList<items.LibraryItem> libraryItemList92 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList92, libraryItemArray91);
        boolean boolean94 = cD65.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean95 = cD56.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean96 = cD45.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean97 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6275 + "'", int38 == 6275);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "LibraryItem [itemId=6279, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str47, "LibraryItem [itemId=6279, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getPrice();
        java.lang.String str13 = cD6.toString();
        java.lang.String str14 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6285, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6285, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6285, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6285, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=6285, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=6285, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6286, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6286, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6287 + "'", int9 == 6287);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6287 + "'", int11 == 6287);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        java.lang.String str8 = cD6.getPrice();
        cD6.setIsPurchasable(false);
        boolean boolean11 = cD6.isRented();
        cD6.setBorrowerEmail("LibraryItem [itemId=1127, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        double double10 = cD6.calculateOverduePenalty();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        int int20 = cD17.getItemId();
        java.lang.String str21 = cD17.toString();
        java.lang.String str22 = cD17.getDetails();
        java.lang.String str23 = cD17.getArtist();
        items.CD cD30 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str31 = cD30.getLocation();
        java.lang.String str32 = cD30.getLocation();
        boolean boolean33 = cD30.isPurchasable();
        boolean boolean34 = cD30.isOverdue();
        boolean boolean35 = cD30.isPurchasable();
        boolean boolean36 = cD30.isOverdue();
        java.lang.String str37 = cD30.getDetails();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.toString();
        java.lang.String str47 = cD44.getBorrowerEmail();
        java.lang.String str48 = cD44.getPrice();
        items.CD cD55 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD55.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD64 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str65 = cD64.getLocation();
        java.lang.String str66 = cD64.getLocation();
        items.CD cD73 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD80 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str81 = cD80.getLocation();
        java.lang.String str82 = cD80.getLocation();
        items.CD cD89 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray90 = new items.LibraryItem[] { cD73, cD80, cD89 };
        java.util.ArrayList<items.LibraryItem> libraryItemList91 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList91, libraryItemArray90);
        boolean boolean93 = cD64.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean94 = cD55.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean95 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean96 = cD30.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean97 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean98 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6291 + "'", int20 == 6291);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "LibraryItem [itemId=6291, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str21, "LibraryItem [itemId=6291, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str22, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str37, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "LibraryItem [itemId=6293, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str46, "LibraryItem [itemId=6293, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        items.CD cD14 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str15 = cD14.getLocation();
        java.lang.String str16 = cD14.toString();
        java.lang.String str17 = cD14.getBorrowerEmail();
        java.lang.String str18 = cD14.getBorrowerEmail();
        items.CD cD25 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str26 = cD25.getLocation();
        java.lang.String str27 = cD25.getLocation();
        items.CD cD34 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str42 = cD41.getLocation();
        java.lang.String str43 = cD41.getLocation();
        items.CD cD50 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray51 = new items.LibraryItem[] { cD34, cD41, cD50 };
        java.util.ArrayList<items.LibraryItem> libraryItemList52 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList52, libraryItemArray51);
        boolean boolean54 = cD25.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList52);
        boolean boolean55 = cD25.isOverdue();
        items.CD cD62 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str63 = cD62.getLocation();
        java.lang.String str64 = cD62.getLocation();
        items.CD cD71 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD78 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str79 = cD78.getLocation();
        java.lang.String str80 = cD78.getLocation();
        items.CD cD87 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { cD71, cD78, cD87 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = cD62.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = cD25.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = cD14.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        int int95 = cD6.getItemId();
        java.lang.String str96 = cD6.getLocation();
        boolean boolean97 = cD6.isRented();
        boolean boolean98 = cD6.isRented();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6299 + "'", int7 == 6299);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=6300, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=6300, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 6299 + "'", int95 == 6299);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        items.CD cD14 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str15 = cD14.getLocation();
        java.lang.String str16 = cD14.getLocation();
        items.CD cD23 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD30 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str31 = cD30.getLocation();
        java.lang.String str32 = cD30.getLocation();
        items.CD cD39 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray40 = new items.LibraryItem[] { cD23, cD30, cD39 };
        java.util.ArrayList<items.LibraryItem> libraryItemList41 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList41, libraryItemArray40);
        boolean boolean43 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList41);
        boolean boolean44 = cD14.isOverdue();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str52 = cD51.getLocation();
        java.lang.String str53 = cD51.getLocation();
        items.CD cD60 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str68 = cD67.getLocation();
        java.lang.String str69 = cD67.getLocation();
        items.CD cD76 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { cD60, cD67, cD76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = cD51.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean81 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean82 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        cD6.returnItem();
        java.lang.String str84 = cD6.getPrice();
        java.lang.String str85 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str84, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str85, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getPrice();
        java.lang.String str14 = cD6.getArtist();
        boolean boolean15 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6319 + "'", int9 == 6319);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isRented();
        java.lang.String str12 = cD6.getDetails();
        java.lang.String str13 = cD6.getTitle();
        cD6.setBorrowerEmail("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6321, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6321, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        items.CD cD6 = new items.CD("LibraryItem [itemId=240, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2819, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=2035, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=440, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getArtist();
        java.lang.String str18 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6323 + "'", int14 == 6323);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        cD6.setLocation("LibraryItem [itemId=1153, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD17 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD17.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str20 = cD17.getLocation();
        items.CD cD27 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str28 = cD27.getLocation();
        java.lang.String str29 = cD27.getLocation();
        boolean boolean30 = cD27.isPurchasable();
        boolean boolean31 = cD27.isOverdue();
        double double32 = cD27.calculateOverduePenalty();
        cD27.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str35 = cD27.toString();
        java.lang.String str36 = cD27.getAuthor();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str44 = cD43.getLocation();
        java.lang.String str45 = cD43.getLocation();
        int int46 = cD43.getItemId();
        java.lang.String str47 = cD43.getBorrowerEmail();
        cD43.setBorrowerEmail("LibraryItem [itemId=167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str50 = cD43.getItemType();
        items.CD cD57 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str58 = cD57.getLocation();
        java.lang.String str59 = cD57.getLocation();
        items.CD cD66 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD73 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str74 = cD73.getLocation();
        java.lang.String str75 = cD73.getLocation();
        items.CD cD82 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray83 = new items.LibraryItem[] { cD66, cD73, cD82 };
        java.util.ArrayList<items.LibraryItem> libraryItemList84 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList84, libraryItemArray83);
        boolean boolean86 = cD57.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean87 = cD43.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean88 = cD27.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean89 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
        boolean boolean90 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList84);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6324 + "'", int7 == 6324);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "LibraryItem [itemId=6326, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str35, "LibraryItem [itemId=6326, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6327 + "'", int46 == 6327);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CD" + "'", str50, "CD");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        items.CD cD27 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str35 = cD34.getLocation();
        java.lang.String str36 = cD34.getLocation();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray44 = new items.LibraryItem[] { cD27, cD34, cD43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList45 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList45, libraryItemArray44);
        boolean boolean47 = cD18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList45);
        boolean boolean48 = cD18.isOverdue();
        java.lang.String str49 = cD18.getLocation();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD72 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str73 = cD72.getLocation();
        java.lang.String str74 = cD72.getLocation();
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray82 = new items.LibraryItem[] { cD65, cD72, cD81 };
        java.util.ArrayList<items.LibraryItem> libraryItemList83 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList83, libraryItemArray82);
        boolean boolean85 = cD56.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean86 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean87 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        cD6.setIsPurchasable(true);
        double double90 = cD6.calculateOverduePenalty();
        boolean boolean91 = cD6.isOverdue();
        java.lang.Class<?> wildcardClass92 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getDetails();
        java.lang.String str10 = cD6.toString();
        boolean boolean11 = cD6.isPurchasable();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6352, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6352, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.getLocation();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6353 + "'", int11 == 6353);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getAuthor();
        java.lang.String str92 = cD6.getLocation();
        java.lang.String str93 = cD6.getAuthor();
        cD6.returnItem();
        java.lang.String str95 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6365, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6365, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str92, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "hi!" + "'", str95, "hi!");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6376, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6376, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        cD6.setLocation("LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        java.lang.String str54 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6377 + "'", int9 == 6377);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str54, "CD: hi! by hi!. Location: LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        java.lang.String str38 = cD6.getAuthor();
        java.lang.String str39 = cD6.getAuthor();
        java.lang.String str40 = cD6.getLocation();
        java.lang.String str41 = cD6.getPrice();
        cD6.setBorrowerEmail("CD: LibraryItem [itemId=205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        java.lang.String str44 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        java.lang.String str12 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getDetails();
        cD6.setIsPurchasable(true);
        boolean boolean13 = cD6.isRented();
        boolean boolean14 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6387, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6387, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str10, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1188, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1122, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isRented();
        boolean boolean8 = cD6.isRented();
        java.time.LocalDate localDate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate9, 2206, "LibraryItem [itemId=5913, itemType=CD, location=LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getPrice();
        java.lang.String str14 = cD6.getBorrowerEmail();
        java.lang.String str15 = cD6.getBorrowerEmail();
        cD6.setBorrowerEmail("LibraryItem [itemId=3438, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean18 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6390 + "'", int9 == 6390);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6390, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6390, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=6390, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=6390, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6390 + "'", int12 == 6390);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(false);
        boolean boolean9 = cD6.isOverdue();
        cD6.returnItem();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate11, 1437, "LibraryItem [itemId=3008, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getTitle();
        java.lang.String str16 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        boolean boolean16 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=1328, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        java.lang.Class<?> wildcardClass20 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=6393, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=6393, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1322, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3764, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3646, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getPrice();
        cD6.setBorrowerEmail("LibraryItem [itemId=3082, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6399 + "'", int9 == 6399);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=6399, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=6399, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.getAuthor();
        boolean boolean17 = cD6.isRented();
        java.lang.String str18 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6400 + "'", int9 == 6400);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6400, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6400, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=6400, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=6400, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6400 + "'", int12 == 6400);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "LibraryItem [itemId=6400, itemType=CD, location=LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str18, "LibraryItem [itemId=6400, itemType=CD, location=LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getPrice();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6410 + "'", int14 == 6410);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getAuthor();
        boolean boolean15 = cD6.isRented();
        java.lang.String str16 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=6411, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=6411, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getTitle();
        int int11 = cD6.getItemId();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6418 + "'", int7 == 6418);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6418 + "'", int11 == 6418);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        cD6.returnItem();
        cD6.setIsPurchasable(true);
        double double89 = cD6.calculateOverduePenalty();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6420, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6420, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean17 = cD6.isOverdue();
        cD6.setLocation("LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean20 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=6429, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=6429, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        items.CD cD6 = new items.CD("LibraryItem [itemId=817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=566, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double9 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        cD6.setBorrowerEmail("LibraryItem [itemId=3557, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str88 = cD6.getAuthor();
        java.lang.String str89 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6435, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6435, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2923, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=4574, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=3056, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=4368, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        boolean boolean12 = cD6.isRented();
        java.lang.String str13 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=2497, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=4471, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6445 + "'", int9 == 6445);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=6445, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=6445, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getTitle();
        java.lang.String str13 = cD6.getItemType();
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getPrice();
        cD6.returnItem();
        java.lang.String str17 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6446 + "'", int9 == 6446);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6446, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6446, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=6446, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=6446, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.toString();
        java.util.List<items.LibraryItem> libraryItemList13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = cD6.hasExceededBorrowingLimit(libraryItemList13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=6448, itemType=CD, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=6448, itemType=CD, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        java.lang.String str16 = cD6.getItemType();
        java.lang.String str17 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6450, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6450, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CD" + "'", str17, "CD");
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=5596, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6451 + "'", int9 == 6451);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        cD6.returnItem();
        boolean boolean76 = cD6.isPurchasable();
        java.lang.String str77 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1910, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2226, itemType=CD, location=LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=930, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD13 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double14 = cD13.calculateOverduePenalty();
        java.lang.String str15 = cD13.getBorrowerEmail();
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.toString();
        java.lang.String str25 = cD22.getBorrowerEmail();
        java.lang.String str26 = cD22.getPrice();
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD33.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD58 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str59 = cD58.getLocation();
        java.lang.String str60 = cD58.getLocation();
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray68 = new items.LibraryItem[] { cD51, cD58, cD67 };
        java.util.ArrayList<items.LibraryItem> libraryItemList69 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList69, libraryItemArray68);
        boolean boolean71 = cD42.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList69);
        boolean boolean72 = cD33.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        boolean boolean73 = cD22.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList69);
        boolean boolean74 = cD13.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList69);
        boolean boolean75 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList69);
        java.lang.Class<?> wildcardClass76 = libraryItemList69.getClass();
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "LibraryItem [itemId=6463, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str24, "LibraryItem [itemId=6463, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        java.lang.String str36 = cD6.getDetails();
        java.lang.String str37 = cD6.getBorrowerEmail();
        java.lang.String str38 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str36, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        java.lang.String str8 = cD6.getPrice();
        cD6.setIsPurchasable(false);
        java.lang.String str11 = cD6.getDetails();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: false" + "'", str11, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: false");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getLocation();
        java.lang.String str13 = cD6.toString();
        cD6.setBorrowerEmail("LibraryItem [itemId=663, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double16 = cD6.calculateOverduePenalty();
        boolean boolean17 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6476 + "'", int9 == 6476);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6476, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6476, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=6476, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=6476, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.getBorrowerEmail();
        double double10 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getItemType();
        java.lang.String str10 = cD6.getPrice();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6486 + "'", int7 == 6486);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD" + "'", str9, "CD");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2934, itemType=CD, location=LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", true, true, "LibraryItem [itemId=2497, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD13 = new items.CD("LibraryItem [itemId=817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD13.isPurchasable();
        cD13.setLocation("LibraryItem [itemId=1964, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD23 = new items.CD("LibraryItem [itemId=1945, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=2677, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        java.lang.String str24 = cD23.getArtist();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        int int34 = cD31.getItemId();
        java.lang.String str35 = cD31.getBorrowerEmail();
        boolean boolean36 = cD31.isOverdue();
        java.lang.String str37 = cD31.getAuthor();
        java.lang.String str38 = cD31.getBorrowerEmail();
        items.CD cD45 = new items.CD("LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true", "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD45.setBorrowerEmail("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD54 = new items.CD("", "", false, true, "", "hi!");
        int int55 = cD54.getItemId();
        boolean boolean56 = cD54.isPurchasable();
        items.CD cD63 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str64 = cD63.getLocation();
        java.lang.String str65 = cD63.getLocation();
        items.CD cD72 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str80 = cD79.getLocation();
        java.lang.String str81 = cD79.getLocation();
        items.CD cD88 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray89 = new items.LibraryItem[] { cD72, cD79, cD88 };
        java.util.ArrayList<items.LibraryItem> libraryItemList90 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList90, libraryItemArray89);
        boolean boolean92 = cD63.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList90);
        boolean boolean93 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList90);
        boolean boolean94 = cD45.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList90);
        boolean boolean95 = cD31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList90);
        boolean boolean96 = cD23.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList90);
        boolean boolean97 = cD13.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList90);
        boolean boolean98 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList90);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str24, "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6490 + "'", int34 == 6490);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6492 + "'", int55 == 6492);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.toString();
        java.lang.String str13 = cD6.getPrice();
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.toString();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6498, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6498, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=6498, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=6498, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=6498, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=6498, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=6498, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=6498, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.Class<?> wildcardClass12 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6500 + "'", int9 == 6500);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getPrice();
        boolean boolean18 = cD6.isRented();
        cD6.returnItem();
        java.lang.String str20 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6501 + "'", int14 == 6501);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getPrice();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD17.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str27 = cD26.getLocation();
        java.lang.String str28 = cD26.getLocation();
        items.CD cD35 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray52 = new items.LibraryItem[] { cD35, cD42, cD51 };
        java.util.ArrayList<items.LibraryItem> libraryItemList53 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList53, libraryItemArray52);
        boolean boolean55 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean56 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean57 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean58 = cD6.isRented();
        java.lang.String str59 = cD6.getTitle();
        java.lang.String str60 = cD6.getLocation();
        java.lang.String str61 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6518, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6518, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6524 + "'", int9 == 6524);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD" + "'", str14, "CD");
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6525, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6525, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "CD" + "'", str86, "CD");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str13 = cD6.getLocation();
        java.lang.String str14 = cD6.getItemType();
        boolean boolean15 = cD6.isOverdue();
        double double16 = cD6.calculateOverduePenalty();
        boolean boolean17 = cD6.isRented();
        cD6.setBorrowerEmail("LibraryItem [itemId=4758, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6535, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6535, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD" + "'", str14, "CD");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str12 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6536, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6536, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=6536, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=6536, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getLocation();
        cD6.returnItem();
        java.lang.String str14 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1809, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=527, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=6271, itemType=CD, location=LibraryItem [itemId=3415, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1746, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        cD6.setBorrowerEmail("LibraryItem [itemId=3557, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str88 = cD6.getAuthor();
        cD6.setIsPurchasable(false);
        java.lang.String str91 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6539, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6539, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getTitle();
        double double14 = cD6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass15 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6548 + "'", int9 == 6548);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6548, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6548, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=6548, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=6548, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6548 + "'", int12 == 6548);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getLocation();
        java.lang.String str40 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "LibraryItem [itemId=6551, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str40, "LibraryItem [itemId=6551, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getLocation();
        java.lang.String str9 = cD6.getArtist();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate10, 4687, "LibraryItem [itemId=4554, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        items.CD cD6 = new items.CD("LibraryItem [itemId=6274, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3772, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=2097, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2689, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.toString();
        cD6.returnItem();
        java.lang.String str11 = cD6.getLocation();
        cD6.returnItem();
        java.lang.String str13 = cD6.toString();
        boolean boolean14 = cD6.isPurchasable();
        java.lang.String str15 = cD6.toString();
        java.lang.String str16 = cD6.getPrice();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=6569, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=6569, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=6569, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=6569, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=6569, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=6569, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getLocation();
        cD6.setIsPurchasable(false);
        java.lang.String str17 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6570 + "'", int9 == 6570);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6570, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6570, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=6570, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=6570, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        items.CD cD6 = new items.CD("LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=4211, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=6398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=4393, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        java.lang.String str8 = cD6.getItemType();
        java.lang.String str9 = cD6.getPrice();
        cD6.setIsPurchasable(true);
        cD6.setLocation("");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6579 + "'", int7 == 6579);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD" + "'", str8, "CD");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getArtist();
        java.lang.String str15 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=814, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray41 = new items.LibraryItem[] { cD24, cD31, cD40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList42 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList42, libraryItemArray41);
        boolean boolean44 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList42);
        boolean boolean45 = cD15.isOverdue();
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str53 = cD52.getLocation();
        java.lang.String str54 = cD52.getLocation();
        items.CD cD61 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str69 = cD68.getLocation();
        java.lang.String str70 = cD68.getLocation();
        items.CD cD77 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { cD61, cD68, cD77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = cD52.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        cD6.returnItem();
        java.lang.String str85 = cD6.getArtist();
        java.lang.String str86 = cD6.getItemType();
        int int87 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str85, "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "CD" + "'", str86, "CD");
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6582 + "'", int87 == 6582);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.toString();
        java.lang.String str14 = cD6.getLocation();
        java.time.LocalDate localDate15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate15, 1704, "LibraryItem [itemId=3148, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=6597, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=6597, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getArtist();
        cD6.setBorrowerEmail("LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        items.CD cD27 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str28 = cD27.getLocation();
        java.lang.String str29 = cD27.getLocation();
        int int30 = cD27.getItemId();
        cD27.setBorrowerEmail("CD");
        java.lang.String str33 = cD27.getArtist();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str41 = cD40.getLocation();
        java.lang.String str42 = cD40.getLocation();
        items.CD cD49 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray66 = new items.LibraryItem[] { cD49, cD56, cD65 };
        java.util.ArrayList<items.LibraryItem> libraryItemList67 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList67, libraryItemArray66);
        boolean boolean69 = cD40.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean70 = cD27.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean71 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        java.lang.String str72 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6607 + "'", int14 == 6607);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6608 + "'", int30 == 6608);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "CD" + "'", str72, "CD");
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        items.CD cD6 = new items.CD("CD: hi! by hi!. Location: LibraryItem [itemId=878, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", "LibraryItem [itemId=4972, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=1168, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=2226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=2226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str12 = cD6.getPrice();
        java.lang.String str13 = cD6.getItemType();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        java.lang.String str8 = cD6.getAuthor();
        cD6.setLocation("LibraryItem [itemId=232, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.getDetails();
        double double13 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6615 + "'", int11 == 6615);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=232, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str12, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=232, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getAuthor();
        java.lang.String str8 = cD6.getTitle();
        int int9 = cD6.getItemId();
        items.CD cD16 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str17 = cD16.toString();
        items.CD cD24 = new items.CD("LibraryItem [itemId=1080, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=674, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD24.setIsPurchasable(true);
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        boolean boolean36 = cD33.isPurchasable();
        boolean boolean37 = cD33.isOverdue();
        cD33.returnItem();
        items.CD cD45 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str46 = cD45.getLocation();
        java.lang.String str47 = cD45.getLocation();
        int int48 = cD45.getItemId();
        cD45.setBorrowerEmail("CD");
        java.lang.String str51 = cD45.getArtist();
        items.CD cD58 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str59 = cD58.getLocation();
        java.lang.String str60 = cD58.getLocation();
        items.CD cD67 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD74 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str75 = cD74.getLocation();
        java.lang.String str76 = cD74.getLocation();
        items.CD cD83 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray84 = new items.LibraryItem[] { cD67, cD74, cD83 };
        java.util.ArrayList<items.LibraryItem> libraryItemList85 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList85, libraryItemArray84);
        boolean boolean87 = cD58.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean88 = cD45.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean89 = cD33.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean90 = cD24.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean91 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        boolean boolean92 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList85);
        cD6.setIsPurchasable(true);
        java.time.LocalDate localDate95 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate95, 3051, "LibraryItem [itemId=1466, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6616 + "'", int9 == 6616);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=6617, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=6617, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6620 + "'", int48 == 6620);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getPrice();
        boolean boolean12 = cD6.isOverdue();
        java.lang.String str13 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6634, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6634, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        cD6.setIsPurchasable(true);
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2267, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2097, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=4805, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=440, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getAuthor();
        cD6.returnItem();
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.toString();
        boolean boolean18 = cD15.isOverdue();
        items.CD cD25 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str26 = cD25.getLocation();
        java.lang.String str27 = cD25.getLocation();
        items.CD cD34 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str42 = cD41.getLocation();
        java.lang.String str43 = cD41.getLocation();
        items.CD cD50 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray51 = new items.LibraryItem[] { cD34, cD41, cD50 };
        java.util.ArrayList<items.LibraryItem> libraryItemList52 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList52, libraryItemArray51);
        boolean boolean54 = cD25.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList52);
        boolean boolean55 = cD25.isOverdue();
        java.lang.String str56 = cD25.getLocation();
        items.CD cD63 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str64 = cD63.getLocation();
        java.lang.String str65 = cD63.getLocation();
        items.CD cD72 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str80 = cD79.getLocation();
        java.lang.String str81 = cD79.getLocation();
        items.CD cD88 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray89 = new items.LibraryItem[] { cD72, cD79, cD88 };
        java.util.ArrayList<items.LibraryItem> libraryItemList90 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList90, libraryItemArray89);
        boolean boolean92 = cD63.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList90);
        boolean boolean93 = cD25.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList90);
        boolean boolean94 = cD15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList90);
        boolean boolean95 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList90);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=6638, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=6638, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        boolean boolean18 = cD6.isRented();
        java.lang.String str19 = cD6.getPrice();
        java.lang.Class<?> wildcardClass20 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        boolean boolean12 = cD6.isOverdue();
        java.lang.String str13 = cD6.getDetails();
        items.CD cD20 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str21 = cD20.getLocation();
        java.lang.String str22 = cD20.toString();
        java.lang.String str23 = cD20.getBorrowerEmail();
        java.lang.String str24 = cD20.getPrice();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD31.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str41 = cD40.getLocation();
        java.lang.String str42 = cD40.getLocation();
        items.CD cD49 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray66 = new items.LibraryItem[] { cD49, cD56, cD65 };
        java.util.ArrayList<items.LibraryItem> libraryItemList67 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList67, libraryItemArray66);
        boolean boolean69 = cD40.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean70 = cD31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean71 = cD20.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean72 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        double double73 = cD6.calculateOverduePenalty();
        java.lang.String str74 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "LibraryItem [itemId=6657, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str22, "LibraryItem [itemId=6657, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        boolean boolean13 = cD6.isPurchasable();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.toString();
        java.lang.String str16 = cD6.getPrice();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=6663, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=6663, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=6673, itemType=CD, location=LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=6673, itemType=CD, location=LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        cD6.setLocation("LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str52 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6684 + "'", int9 == 6684);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "LibraryItem [itemId=6684, itemType=CD, location=LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str52, "LibraryItem [itemId=6684, itemType=CD, location=LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        java.lang.String str87 = cD6.getDetails();
        boolean boolean88 = cD6.isRented();
        java.lang.String str89 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=2702, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6694, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6694, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str87, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "LibraryItem [itemId=6694, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str89, "LibraryItem [itemId=6694, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        items.CD cD6 = new items.CD("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", true, false, "LibraryItem [itemId=505, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=224, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=2009, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        int int12 = cD6.getItemId();
        double double13 = cD6.calculateOverduePenalty();
        java.lang.String str14 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6713 + "'", int9 == 6713);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=6713, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=6713, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6713 + "'", int12 == 6713);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.getBorrowerEmail();
        int int10 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=2598, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6714 + "'", int10 == 6714);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getItemType();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        boolean boolean21 = cD18.isPurchasable();
        boolean boolean22 = cD18.isOverdue();
        double double23 = cD18.calculateOverduePenalty();
        cD18.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str26 = cD18.toString();
        java.lang.String str27 = cD18.getAuthor();
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str35 = cD34.getLocation();
        java.lang.String str36 = cD34.getLocation();
        int int37 = cD34.getItemId();
        java.lang.String str38 = cD34.getBorrowerEmail();
        cD34.setBorrowerEmail("LibraryItem [itemId=167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str41 = cD34.getItemType();
        items.CD cD48 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str49 = cD48.getLocation();
        java.lang.String str50 = cD48.getLocation();
        items.CD cD57 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD64 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str65 = cD64.getLocation();
        java.lang.String str66 = cD64.getLocation();
        items.CD cD73 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray74 = new items.LibraryItem[] { cD57, cD64, cD73 };
        java.util.ArrayList<items.LibraryItem> libraryItemList75 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList75, libraryItemArray74);
        boolean boolean77 = cD48.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList75);
        boolean boolean78 = cD34.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList75);
        boolean boolean79 = cD18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList75);
        boolean boolean80 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList75);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6715, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6715, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "LibraryItem [itemId=6716, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str26, "LibraryItem [itemId=6716, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6717 + "'", int37 == 6717);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "CD" + "'", str41, "CD");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        items.CD cD6 = new items.CD("LibraryItem [itemId=3541, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=506, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1705, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1628, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        cD6.setIsPurchasable(true);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6723 + "'", int7 == 6723);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getTitle();
        java.lang.String str15 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6725 + "'", int9 == 6725);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getTitle();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        int int21 = cD18.getItemId();
        java.lang.String str22 = cD18.getBorrowerEmail();
        boolean boolean23 = cD18.isOverdue();
        java.lang.String str24 = cD18.getAuthor();
        java.lang.String str25 = cD18.getBorrowerEmail();
        items.CD cD32 = new items.CD("LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true", "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD32.setBorrowerEmail("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD41 = new items.CD("", "", false, true, "", "hi!");
        int int42 = cD41.getItemId();
        boolean boolean43 = cD41.isPurchasable();
        items.CD cD50 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str51 = cD50.getLocation();
        java.lang.String str52 = cD50.getLocation();
        items.CD cD59 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str67 = cD66.getLocation();
        java.lang.String str68 = cD66.getLocation();
        items.CD cD75 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray76 = new items.LibraryItem[] { cD59, cD66, cD75 };
        java.util.ArrayList<items.LibraryItem> libraryItemList77 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList77, libraryItemArray76);
        boolean boolean79 = cD50.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList77);
        boolean boolean80 = cD41.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList77);
        boolean boolean81 = cD32.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList77);
        boolean boolean82 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList77);
        boolean boolean83 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList77);
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6727 + "'", int9 == 6727);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6728 + "'", int21 == 6728);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6730 + "'", int42 == 6730);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        items.CD cD6 = new items.CD("LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1038, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int7 = cD6.getItemId();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6736 + "'", int7 == 6736);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        double double14 = cD6.calculateOverduePenalty();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=6738, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=6738, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        boolean boolean12 = cD6.isRented();
        java.lang.String str13 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=2497, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.getAuthor();
        java.lang.String str17 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6739 + "'", int9 == 6739);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=6739, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=6739, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }
}
