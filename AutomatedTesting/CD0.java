package AutomatedTesting;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class CD0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        java.time.LocalDate localDate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate9, (int) (byte) -1, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate11, (int) (byte) 10, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=15, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=15, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.Class<?> wildcardClass7 = cD6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isPurchasable();
        java.time.LocalDate localDate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate9, 0, "CD");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        java.time.LocalDate localDate15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate15, 63, "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=70, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=70, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        cD6.returnItem();
        java.lang.Class<?> wildcardClass39 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        cD6.setLocation("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double12 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate10, (int) (byte) -1, "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        java.lang.String str8 = cD6.getArtist();
        java.lang.Class<?> wildcardClass9 = cD6.getClass();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.Class<?> wildcardClass38 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isRented();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate12, (int) (byte) 0, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=208, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=208, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.Class<?> wildcardClass13 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        java.time.LocalDate localDate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate13, (int) '#', "LibraryItem [itemId=153, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 257 + "'", int9 == 257);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=257, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=257, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        java.lang.String str9 = cD6.getItemType();
        cD6.setLocation("LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD" + "'", str9, "CD");
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.Class<?> wildcardClass7 = cD6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=94, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD" + "'", str7, "CD");
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getLocation();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate10, (int) (byte) 100, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=310, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=310, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate12, 139, "LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 311 + "'", int9 == 311);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        boolean boolean14 = cD6.isOverdue();
        java.time.LocalDate localDate15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate15, (int) (byte) -1, "LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=403, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=403, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        boolean boolean16 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getTitle();
        java.lang.String str13 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 435 + "'", int9 == 435);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=435, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=435, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=438, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=438, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        java.lang.Class<?> wildcardClass15 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate7, 270, "LibraryItem [itemId=452, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        java.time.LocalDate localDate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate9, 116, "LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.toString();
        boolean boolean21 = cD18.isOverdue();
        items.CD cD28 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str29 = cD28.getLocation();
        java.lang.String str30 = cD28.getLocation();
        items.CD cD37 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { cD37, cD44, cD53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = cD28.isOverdue();
        java.lang.String str59 = cD28.getLocation();
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str67 = cD66.getLocation();
        java.lang.String str68 = cD66.getLocation();
        items.CD cD75 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD82 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str83 = cD82.getLocation();
        java.lang.String str84 = cD82.getLocation();
        items.CD cD91 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray92 = new items.LibraryItem[] { cD75, cD82, cD91 };
        java.util.ArrayList<items.LibraryItem> libraryItemList93 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList93, libraryItemArray92);
        boolean boolean95 = cD66.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean96 = cD28.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean97 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean98 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 505 + "'", int9 == 505);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=505, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=505, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=506, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=506, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        cD6.setLocation("LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double19 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isPurchasable();
        cD6.setIsPurchasable(false);
        java.time.LocalDate localDate39 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate39, (int) (short) -1, "LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass12 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=566, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=566, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=95, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass15 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 576 + "'", int9 == 576);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getAuthor();
        java.lang.String str15 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        items.CD cD27 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str35 = cD34.getLocation();
        java.lang.String str36 = cD34.getLocation();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray44 = new items.LibraryItem[] { cD27, cD34, cD43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList45 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList45, libraryItemArray44);
        boolean boolean47 = cD18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList45);
        boolean boolean48 = cD18.isOverdue();
        java.lang.String str49 = cD18.getLocation();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD72 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str73 = cD72.getLocation();
        java.lang.String str74 = cD72.getLocation();
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray82 = new items.LibraryItem[] { cD65, cD72, cD81 };
        java.util.ArrayList<items.LibraryItem> libraryItemList83 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList83, libraryItemArray82);
        boolean boolean85 = cD56.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean86 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean87 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        java.lang.String str88 = cD6.getTitle();
        java.time.LocalDate localDate89 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate89, 0, "LibraryItem [itemId=295, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass15 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 644 + "'", int9 == 644);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=644, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=644, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=644, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=644, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        boolean boolean9 = cD6.isRented();
        boolean boolean10 = cD6.isPurchasable();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate11, (int) (byte) 1, "LibraryItem [itemId=536, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 675 + "'", int7 == 675);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getPrice();
        java.lang.String str12 = cD6.getDetails();
        java.lang.String str13 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.Class<?> wildcardClass10 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 718 + "'", int9 == 718);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.getAuthor();
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate17, (int) (byte) 100, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 731 + "'", int9 == 731);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=731, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=731, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=731, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=731, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 731 + "'", int12 == 731);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getPrice();
        java.lang.String str12 = cD6.getDetails();
        java.time.LocalDate localDate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate13, (int) (short) 10, "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=760, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=760, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        items.CD cD6 = new items.CD("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD");
        java.lang.Class<?> wildcardClass7 = cD6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getPrice();
        java.util.List<items.LibraryItem> libraryItemList40 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = cD6.hasExceededBorrowingLimit(libraryItemList40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isRented();
        java.util.List<items.LibraryItem> libraryItemList11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = cD6.hasExceededBorrowingLimit(libraryItemList11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getDetails();
        java.lang.Class<?> wildcardClass40 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: true" + "'", str39, "CD: hi! by hi!. Location: hi!. Purchasable: true");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        items.CD cD6 = new items.CD("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD");
        java.lang.String str7 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getPrice();
        double double51 = cD6.calculateOverduePenalty();
        boolean boolean52 = cD6.isOverdue();
        java.lang.Class<?> wildcardClass53 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 847 + "'", int9 == 847);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getLocation();
        java.lang.String str15 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 862 + "'", int9 == 862);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=862, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=862, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=862, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=862, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        items.CD cD14 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str15 = cD14.getLocation();
        java.lang.String str16 = cD14.getLocation();
        items.CD cD23 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD30 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str31 = cD30.getLocation();
        java.lang.String str32 = cD30.getLocation();
        items.CD cD39 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray40 = new items.LibraryItem[] { cD23, cD30, cD39 };
        java.util.ArrayList<items.LibraryItem> libraryItemList41 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList41, libraryItemArray40);
        boolean boolean43 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList41);
        boolean boolean44 = cD14.isOverdue();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str52 = cD51.getLocation();
        java.lang.String str53 = cD51.getLocation();
        items.CD cD60 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str68 = cD67.getLocation();
        java.lang.String str69 = cD67.getLocation();
        items.CD cD76 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { cD60, cD67, cD76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = cD51.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean81 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean82 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        boolean boolean12 = cD6.isOverdue();
        java.lang.Class<?> wildcardClass13 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        items.CD cD6 = new items.CD("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("hi!");
        java.time.LocalDate localDate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate9, 689, "LibraryItem [itemId=298, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isOverdue();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getItemType();
        double double17 = cD6.calculateOverduePenalty();
        java.time.LocalDate localDate18 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate18, 91, "LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=957, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=957, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getLocation();
        int int15 = cD6.getItemId();
        java.lang.String str16 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 976 + "'", int9 == 976);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=976, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=976, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=976, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=976, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 976 + "'", int15 == 976);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isRented();
        java.lang.String str12 = cD6.getDetails();
        java.lang.String str13 = cD6.getTitle();
        boolean boolean14 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=977, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=977, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str13 = cD6.getArtist();
        int int14 = cD6.getItemId();
        double double15 = cD6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass16 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=980, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=980, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 980 + "'", int14 == 980);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str75 = cD6.getPrice();
        boolean boolean76 = cD6.isRented();
        java.lang.String str77 = cD6.getPrice();
        java.lang.Class<?> wildcardClass78 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        java.lang.String str9 = cD6.getItemType();
        java.lang.String str10 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD" + "'", str9, "CD");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        items.CD cD6 = new items.CD("LibraryItem [itemId=368, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=475, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=941, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=1020, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=1020, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = cD6.toString();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate12, 401, "LibraryItem [itemId=610, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=1028, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=1028, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        cD6.returnItem();
        java.lang.Class<?> wildcardClass88 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1069, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1069, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isOverdue();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1079 + "'", int7 == 1079);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.toString();
        java.lang.String str12 = cD6.getTitle();
        java.lang.String str13 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=1084, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=1084, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getLocation();
        java.lang.String str17 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=1090, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=1090, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getPrice();
        java.lang.String str40 = cD6.getPrice();
        double double41 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getAuthor();
        java.lang.String str92 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1101, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1101, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "hi!" + "'", str92, "hi!");
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD20 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD20.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD29 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str30 = cD29.getLocation();
        java.lang.String str31 = cD29.getLocation();
        items.CD cD38 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD45 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str46 = cD45.getLocation();
        java.lang.String str47 = cD45.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray55 = new items.LibraryItem[] { cD38, cD45, cD54 };
        java.util.ArrayList<items.LibraryItem> libraryItemList56 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList56, libraryItemArray55);
        boolean boolean58 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList56);
        boolean boolean59 = cD29.isOverdue();
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str67 = cD66.getLocation();
        java.lang.String str68 = cD66.getLocation();
        items.CD cD75 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD82 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str83 = cD82.getLocation();
        java.lang.String str84 = cD82.getLocation();
        items.CD cD91 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray92 = new items.LibraryItem[] { cD75, cD82, cD91 };
        java.util.ArrayList<items.LibraryItem> libraryItemList93 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList93, libraryItemArray92);
        boolean boolean95 = cD66.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean96 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean97 = cD20.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean98 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getArtist();
        boolean boolean10 = cD6.isPurchasable();
        java.lang.Class<?> wildcardClass11 = cD6.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1125 + "'", int7 == 1125);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.getAuthor();
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate17, 976, "LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1139 + "'", int9 == 1139);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1139, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1139, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=1139, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=1139, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1139 + "'", int12 == 1139);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1153 + "'", int9 == 1153);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1153, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1153, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=1153, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=1153, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1153 + "'", int12 == 1153);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.toString();
        java.lang.String str21 = cD18.getBorrowerEmail();
        java.lang.String str22 = cD18.getBorrowerEmail();
        items.CD cD29 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str30 = cD29.getLocation();
        java.lang.String str31 = cD29.getLocation();
        items.CD cD38 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD45 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str46 = cD45.getLocation();
        java.lang.String str47 = cD45.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray55 = new items.LibraryItem[] { cD38, cD45, cD54 };
        java.util.ArrayList<items.LibraryItem> libraryItemList56 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList56, libraryItemArray55);
        boolean boolean58 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList56);
        boolean boolean59 = cD29.isOverdue();
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str67 = cD66.getLocation();
        java.lang.String str68 = cD66.getLocation();
        items.CD cD75 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD82 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str83 = cD82.getLocation();
        java.lang.String str84 = cD82.getLocation();
        items.CD cD91 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray92 = new items.LibraryItem[] { cD75, cD82, cD91 };
        java.util.ArrayList<items.LibraryItem> libraryItemList93 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList93, libraryItemArray92);
        boolean boolean95 = cD66.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean96 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean97 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean98 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        java.lang.String str99 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1154, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1154, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=1155, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=1155, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "hi!" + "'", str99, "hi!");
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getPrice();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate11, 72, "LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1174, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1174, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        boolean boolean15 = cD6.isOverdue();
        boolean boolean16 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1175 + "'", int14 == 1175);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getPrice();
        double double51 = cD6.calculateOverduePenalty();
        boolean boolean52 = cD6.isOverdue();
        java.lang.String str53 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1213 + "'", int9 == 1213);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "CD" + "'", str53, "CD");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.toString();
        java.lang.String str10 = cD6.getBorrowerEmail();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=1230, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=1230, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getPrice();
        java.lang.String str11 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1231, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1231, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean18 = cD6.isPurchasable();
        java.lang.Class<?> wildcardClass19 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        java.lang.String str38 = cD6.getLocation();
        boolean boolean39 = cD6.isRented();
        java.lang.String str40 = cD6.getDetails();
        java.lang.String str41 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str40, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=95, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getBorrowerEmail();
        java.lang.String str15 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1293 + "'", int9 == 1293);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1293, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1293, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=95, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=95, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        items.CD cD6 = new items.CD("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD");
        java.lang.String str7 = cD6.getTitle();
        java.lang.String str8 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD: LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by CD. Location: LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str8, "CD: LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by CD. Location: LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        items.CD cD6 = new items.CD("CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", "LibraryItem [itemId=498, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1084, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=998, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getAuthor();
        java.lang.String str18 = cD6.getItemType();
        boolean boolean19 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=1328, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=1328, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CD" + "'", str18, "CD");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        items.CD cD6 = new items.CD("LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=372, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate11, 539, "LibraryItem [itemId=1152, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1347 + "'", int9 == 1347);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1347, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1347, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1361 + "'", int9 == 1361);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1361, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1361, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        items.CD cD14 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str15 = cD14.getLocation();
        java.lang.String str16 = cD14.getLocation();
        items.CD cD23 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD30 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str31 = cD30.getLocation();
        java.lang.String str32 = cD30.getLocation();
        items.CD cD39 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray40 = new items.LibraryItem[] { cD23, cD30, cD39 };
        java.util.ArrayList<items.LibraryItem> libraryItemList41 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList41, libraryItemArray40);
        boolean boolean43 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList41);
        boolean boolean44 = cD14.isOverdue();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str52 = cD51.getLocation();
        java.lang.String str53 = cD51.getLocation();
        items.CD cD60 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str68 = cD67.getLocation();
        java.lang.String str69 = cD67.getLocation();
        items.CD cD76 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { cD60, cD67, cD76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = cD51.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean81 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean82 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        java.lang.String str83 = cD6.getTitle();
        java.lang.String str84 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str84, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str44 = cD43.getLocation();
        java.lang.String str45 = cD43.getLocation();
        items.CD cD52 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD59 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str60 = cD59.getLocation();
        java.lang.String str61 = cD59.getLocation();
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray69 = new items.LibraryItem[] { cD52, cD59, cD68 };
        java.util.ArrayList<items.LibraryItem> libraryItemList70 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList70, libraryItemArray69);
        boolean boolean72 = cD43.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList70);
        boolean boolean73 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList70);
        java.lang.String str74 = cD6.getArtist();
        java.lang.Class<?> wildcardClass75 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str13 = cD6.getArtist();
        java.lang.String str14 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1384, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1384, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        boolean boolean38 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        java.lang.String str8 = cD6.getPrice();
        java.lang.String str9 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=1152, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass89 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1391, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1391, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        int int12 = cD6.getItemId();
        java.util.List<items.LibraryItem> libraryItemList13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = cD6.hasBorrowingPrivileges(libraryItemList13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1401 + "'", int9 == 1401);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1401 + "'", int12 == 1401);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        items.CD cD6 = new items.CD("LibraryItem [itemId=434, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=327, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=94, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD: LibraryItem [itemId=94, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=434, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true" + "'", str7, "CD: LibraryItem [itemId=94, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=434, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: true");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getBorrowerEmail();
        java.lang.String str15 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1451 + "'", int9 == 1451);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1451, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1451, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=1451, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=1451, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getLocation();
        java.lang.String str13 = cD6.toString();
        boolean boolean14 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1461 + "'", int9 == 1461);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1461, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1461, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=1461, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=1461, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=95, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getPrice();
        java.lang.Class<?> wildcardClass15 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1463 + "'", int9 == 1463);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1463, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1463, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        boolean boolean89 = cD6.isOverdue();
        cD6.setLocation("LibraryItem [itemId=485, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1472, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1472, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getPrice();
        java.lang.String str40 = cD6.getPrice();
        java.lang.String str41 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        java.lang.String str87 = cD6.getLocation();
        java.lang.String str88 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1511, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1511, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getArtist();
        java.lang.Class<?> wildcardClass18 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1531 + "'", int14 == 1531);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getAuthor();
        java.lang.String str92 = cD6.getLocation();
        java.lang.String str93 = cD6.getAuthor();
        java.lang.String str94 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1532, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1532, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str92, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str94, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getTitle();
        java.lang.String str92 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1541, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1541, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setIsPurchasable(false);
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str25 = cD24.getBorrowerEmail();
        java.lang.String str26 = cD24.getBorrowerEmail();
        cD24.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD35.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD35.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean75 = cD24.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean76 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean77 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getPrice();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate12, 1461, "LibraryItem [itemId=342, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1557, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1557, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray41 = new items.LibraryItem[] { cD24, cD31, cD40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList42 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList42, libraryItemArray41);
        boolean boolean44 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList42);
        boolean boolean45 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList42);
        java.lang.Class<?> wildcardClass46 = libraryItemList42.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1583 + "'", int9 == 1583);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1583 + "'", int12 == 1583);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1584, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1584, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1584 + "'", int11 == 1584);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = cD6.toString();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setLocation("LibraryItem [itemId=1168, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=1585, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=1585, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getItemType();
        java.lang.String str40 = cD6.toString();
        java.lang.Class<?> wildcardClass41 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1596 + "'", int37 == 1596);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CD" + "'", str39, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "LibraryItem [itemId=1596, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str40, "LibraryItem [itemId=1596, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        items.CD cD6 = new items.CD("LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isOverdue();
        boolean boolean8 = cD6.isPurchasable();
        java.time.LocalDate localDate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate9, 210, "LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        cD6.setLocation("LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str19 = cD6.getItemType();
        java.time.LocalDate localDate20 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate20, 708, "LibraryItem [itemId=1297, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=1615, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=1615, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CD" + "'", str19, "CD");
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass18 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1626, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1626, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getArtist();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1629 + "'", int7 == 1629);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        items.CD cD6 = new items.CD("LibraryItem [itemId=298, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1127, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=1167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=644, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        java.lang.String str38 = cD6.getLocation();
        boolean boolean39 = cD6.isRented();
        java.lang.String str40 = cD6.getDetails();
        java.lang.String str41 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str40, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "CD" + "'", str41, "CD");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isRented();
        java.lang.String str12 = cD6.getDetails();
        java.lang.String str13 = cD6.getTitle();
        double double14 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1668, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1668, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isPurchasable();
        cD6.setIsPurchasable(false);
        int int39 = cD6.getItemId();
        java.lang.String str40 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1670 + "'", int39 == 1670);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str13 = cD6.getArtist();
        int int14 = cD6.getItemId();
        boolean boolean15 = cD6.isRented();
        cD6.returnItem();
        items.CD cD23 = new items.CD("LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true", "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD23.setBorrowerEmail("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD32 = new items.CD("", "", false, true, "", "hi!");
        int int33 = cD32.getItemId();
        boolean boolean34 = cD32.isPurchasable();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str42 = cD41.getLocation();
        java.lang.String str43 = cD41.getLocation();
        items.CD cD50 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD57 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str58 = cD57.getLocation();
        java.lang.String str59 = cD57.getLocation();
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray67 = new items.LibraryItem[] { cD50, cD57, cD66 };
        java.util.ArrayList<items.LibraryItem> libraryItemList68 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList68, libraryItemArray67);
        boolean boolean70 = cD41.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList68);
        boolean boolean71 = cD32.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList68);
        boolean boolean72 = cD23.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList68);
        boolean boolean73 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList68);
        java.lang.String str74 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1681, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1681, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1681 + "'", int14 == 1681);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1683 + "'", int33 == 1683);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str13 = cD6.getArtist();
        int int14 = cD6.getItemId();
        boolean boolean15 = cD6.isRented();
        cD6.returnItem();
        items.CD cD23 = new items.CD("LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true", "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD23.setBorrowerEmail("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD32 = new items.CD("", "", false, true, "", "hi!");
        int int33 = cD32.getItemId();
        boolean boolean34 = cD32.isPurchasable();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str42 = cD41.getLocation();
        java.lang.String str43 = cD41.getLocation();
        items.CD cD50 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD57 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str58 = cD57.getLocation();
        java.lang.String str59 = cD57.getLocation();
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray67 = new items.LibraryItem[] { cD50, cD57, cD66 };
        java.util.ArrayList<items.LibraryItem> libraryItemList68 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList68, libraryItemArray67);
        boolean boolean70 = cD41.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList68);
        boolean boolean71 = cD32.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList68);
        boolean boolean72 = cD23.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList68);
        boolean boolean73 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList68);
        java.time.LocalDate localDate74 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate74, 576, "LibraryItem [itemId=1250, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1688, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1688, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1688 + "'", int14 == 1688);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1690 + "'", int33 == 1690);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        double double8 = cD6.calculateOverduePenalty();
        java.lang.String str9 = cD6.getPrice();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate10, (int) '4', "LibraryItem [itemId=720, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        java.lang.String str87 = cD6.getAuthor();
        double double88 = cD6.calculateOverduePenalty();
        boolean boolean89 = cD6.isRented();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1708, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1708, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        items.CD cD6 = new items.CD("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", false, true, "", "LibraryItem [itemId=1365, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1718 + "'", int9 == 1718);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1718, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1718, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getItemType();
        java.lang.String str40 = cD6.toString();
        boolean boolean41 = cD6.isOverdue();
        java.time.LocalDate localDate42 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate42, 1460, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1719 + "'", int37 == 1719);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CD" + "'", str39, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "LibraryItem [itemId=1719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str40, "LibraryItem [itemId=1719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = cD6.toString();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=1723, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=1723, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = cD6.toString();
        java.lang.String str12 = cD6.getBorrowerEmail();
        boolean boolean13 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=1724, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=1724, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isPurchasable();
        cD6.setIsPurchasable(true);
        boolean boolean11 = cD6.isOverdue();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate12, 916, "LibraryItem [itemId=1155, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getAuthor();
        java.lang.String str51 = cD6.getItemType();
        cD6.setLocation("LibraryItem [itemId=498, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1739 + "'", int9 == 1739);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CD" + "'", str51, "CD");
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        cD6.setLocation("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str12 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1745, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1745, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.Class<?> wildcardClass39 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1749 + "'", int37 == 1749);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getItemType();
        double double17 = cD6.calculateOverduePenalty();
        java.time.LocalDate localDate18 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate18, 426, "LibraryItem [itemId=449, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=1766, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=1766, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getArtist();
        boolean boolean16 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getBorrowerEmail();
        int int16 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1783 + "'", int9 == 1783);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1783, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1783, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1783 + "'", int16 == 1783);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray41 = new items.LibraryItem[] { cD24, cD31, cD40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList42 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList42, libraryItemArray41);
        boolean boolean44 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList42);
        boolean boolean45 = cD15.isOverdue();
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str53 = cD52.getLocation();
        java.lang.String str54 = cD52.getLocation();
        items.CD cD61 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str69 = cD68.getLocation();
        java.lang.String str70 = cD68.getLocation();
        items.CD cD77 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { cD61, cD68, cD77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = cD52.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        cD6.returnItem();
        java.lang.String str85 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str85, "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        java.lang.String str38 = cD6.getPrice();
        java.time.LocalDate localDate39 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate39, 116, "LibraryItem [itemId=1153, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        double double8 = cD6.calculateOverduePenalty();
        java.lang.String str9 = cD6.getPrice();
        java.lang.String str10 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getTitle();
        java.lang.String str13 = cD6.getItemType();
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1821 + "'", int9 == 1821);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1821, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1821, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=1821, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=1821, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getBorrowerEmail();
        java.lang.String str16 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1823 + "'", int9 == 1823);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1823, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1823, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean11 = cD6.isPurchasable();
        cD6.returnItem();
        java.lang.Class<?> wildcardClass13 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        java.lang.String str38 = cD6.getPrice();
        java.time.LocalDate localDate39 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate39, 169, "LibraryItem [itemId=1326, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isPurchasable();
        cD6.setIsPurchasable(true);
        boolean boolean11 = cD6.isOverdue();
        java.lang.String str12 = cD6.getPrice();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        cD6.returnItem();
        java.lang.Class<?> wildcardClass87 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1866, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1866, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.time.LocalDate localDate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate13, 1152, "LibraryItem [itemId=517, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1889, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1889, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1889 + "'", int11 == 1889);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass13 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1892, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1892, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.toString();
        java.lang.String str20 = cD17.getBorrowerEmail();
        java.lang.String str21 = cD17.getBorrowerEmail();
        items.CD cD28 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str29 = cD28.getLocation();
        java.lang.String str30 = cD28.getLocation();
        items.CD cD37 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { cD37, cD44, cD53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = cD28.isOverdue();
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str66 = cD65.getLocation();
        java.lang.String str67 = cD65.getLocation();
        items.CD cD74 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str82 = cD81.getLocation();
        java.lang.String str83 = cD81.getLocation();
        items.CD cD90 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray91 = new items.LibraryItem[] { cD74, cD81, cD90 };
        java.util.ArrayList<items.LibraryItem> libraryItemList92 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList92, libraryItemArray91);
        boolean boolean94 = cD65.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean95 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean96 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList92);
        boolean boolean97 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList92);
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1896 + "'", int9 == 1896);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1896, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1896, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "LibraryItem [itemId=1897, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str19, "LibraryItem [itemId=1897, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean18 = cD6.isPurchasable();
        cD6.setIsPurchasable(true);
        java.lang.String str21 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "LibraryItem [itemId=1907, itemType=CD, location=LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str21, "LibraryItem [itemId=1907, itemType=CD, location=LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean11 = cD6.isPurchasable();
        cD6.returnItem();
        java.lang.String str13 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        boolean boolean20 = cD17.isPurchasable();
        boolean boolean21 = cD17.isOverdue();
        cD17.returnItem();
        items.CD cD29 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str30 = cD29.getLocation();
        java.lang.String str31 = cD29.getLocation();
        items.CD cD38 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD45 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str46 = cD45.getLocation();
        java.lang.String str47 = cD45.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray55 = new items.LibraryItem[] { cD38, cD45, cD54 };
        java.util.ArrayList<items.LibraryItem> libraryItemList56 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList56, libraryItemArray55);
        boolean boolean58 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList56);
        boolean boolean59 = cD29.isOverdue();
        java.lang.String str60 = cD29.getLocation();
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str68 = cD67.getLocation();
        java.lang.String str69 = cD67.getLocation();
        items.CD cD76 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD83 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str84 = cD83.getLocation();
        java.lang.String str85 = cD83.getLocation();
        items.CD cD92 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray93 = new items.LibraryItem[] { cD76, cD83, cD92 };
        java.util.ArrayList<items.LibraryItem> libraryItemList94 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList94, libraryItemArray93);
        boolean boolean96 = cD67.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean97 = cD29.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean98 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean99 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1916 + "'", int9 == 1916);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1916, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1916, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1080, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=674, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        java.lang.String str8 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        items.CD cD6 = new items.CD("LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true", "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        boolean boolean12 = cD6.isRented();
        java.lang.String str13 = cD6.toString();
        java.lang.String str14 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1965 + "'", int9 == 1965);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=1965, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=1965, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getArtist();
        java.lang.String str15 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        boolean boolean10 = cD6.isRented();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        java.lang.String str48 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2000, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2000, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getPrice();
        java.lang.String str14 = cD6.getBorrowerEmail();
        java.lang.String str15 = cD6.getBorrowerEmail();
        java.lang.String str16 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2007 + "'", int9 == 2007);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=2007, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=2007, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=2007, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=2007, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2007 + "'", int12 == 2007);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        int int11 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=1723, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=1950, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2024 + "'", int11 == 2024);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getTitle();
        int int9 = cD6.getItemId();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2026 + "'", int9 == 2026);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getTitle();
        boolean boolean12 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2047 + "'", int9 == 2047);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        items.CD cD14 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str15 = cD14.getLocation();
        java.lang.String str16 = cD14.getLocation();
        items.CD cD23 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD30 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str31 = cD30.getLocation();
        java.lang.String str32 = cD30.getLocation();
        items.CD cD39 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray40 = new items.LibraryItem[] { cD23, cD30, cD39 };
        java.util.ArrayList<items.LibraryItem> libraryItemList41 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList41, libraryItemArray40);
        boolean boolean43 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList41);
        boolean boolean44 = cD14.isOverdue();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str52 = cD51.getLocation();
        java.lang.String str53 = cD51.getLocation();
        items.CD cD60 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str68 = cD67.getLocation();
        java.lang.String str69 = cD67.getLocation();
        items.CD cD76 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { cD60, cD67, cD76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = cD51.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean81 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean82 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        cD6.returnItem();
        java.time.LocalDate localDate84 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate84, 0, "LibraryItem [itemId=439, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getAuthor();
        java.lang.String str14 = cD6.getPrice();
        java.time.LocalDate localDate15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate15, 1092, "LibraryItem [itemId=291, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2085 + "'", int9 == 2085);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.time.LocalDate localDate14 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate14, 956, "CD: hi! by hi!. Location: hi!. Purchasable: false");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2100 + "'", int9 == 2100);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray41 = new items.LibraryItem[] { cD24, cD31, cD40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList42 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList42, libraryItemArray41);
        boolean boolean44 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList42);
        boolean boolean45 = cD15.isOverdue();
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str53 = cD52.getLocation();
        java.lang.String str54 = cD52.getLocation();
        items.CD cD61 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str69 = cD68.getLocation();
        java.lang.String str70 = cD68.getLocation();
        items.CD cD77 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { cD61, cD68, cD77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = cD52.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        java.lang.Class<?> wildcardClass84 = libraryItemList79.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        int int12 = cD6.getItemId();
        java.util.List<items.LibraryItem> libraryItemList13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = cD6.hasExceededBorrowingLimit(libraryItemList13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2122 + "'", int9 == 2122);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2122 + "'", int12 == 2122);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        java.lang.String str8 = cD6.getArtist();
        cD6.setBorrowerEmail("LibraryItem [itemId=1541, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        items.CD cD6 = new items.CD("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD");
        java.lang.String str7 = cD6.getTitle();
        java.lang.String str8 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        java.lang.Class<?> wildcardClass11 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD" + "'", str8, "CD");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.toString();
        java.lang.String str21 = cD18.getBorrowerEmail();
        java.lang.String str22 = cD18.getBorrowerEmail();
        items.CD cD29 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str30 = cD29.getLocation();
        java.lang.String str31 = cD29.getLocation();
        items.CD cD38 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD45 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str46 = cD45.getLocation();
        java.lang.String str47 = cD45.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray55 = new items.LibraryItem[] { cD38, cD45, cD54 };
        java.util.ArrayList<items.LibraryItem> libraryItemList56 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList56, libraryItemArray55);
        boolean boolean58 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList56);
        boolean boolean59 = cD29.isOverdue();
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str67 = cD66.getLocation();
        java.lang.String str68 = cD66.getLocation();
        items.CD cD75 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD82 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str83 = cD82.getLocation();
        java.lang.String str84 = cD82.getLocation();
        items.CD cD91 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray92 = new items.LibraryItem[] { cD75, cD82, cD91 };
        java.util.ArrayList<items.LibraryItem> libraryItemList93 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList93, libraryItemArray92);
        boolean boolean95 = cD66.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean96 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean97 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean98 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean99 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2141, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2141, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=2142, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=2142, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = cD6.toString();
        java.time.LocalDate localDate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate12, 366, "LibraryItem [itemId=399, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=2153, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=2153, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        items.CD cD20 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str21 = cD20.getBorrowerEmail();
        java.lang.String str22 = cD20.getPrice();
        items.CD cD29 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str30 = cD29.getLocation();
        java.lang.String str31 = cD29.getLocation();
        items.CD cD38 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD45 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str46 = cD45.getLocation();
        java.lang.String str47 = cD45.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray55 = new items.LibraryItem[] { cD38, cD45, cD54 };
        java.util.ArrayList<items.LibraryItem> libraryItemList56 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList56, libraryItemArray55);
        boolean boolean58 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList56);
        boolean boolean59 = cD29.isOverdue();
        java.lang.String str60 = cD29.getLocation();
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str68 = cD67.getLocation();
        java.lang.String str69 = cD67.getLocation();
        items.CD cD76 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD83 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str84 = cD83.getLocation();
        java.lang.String str85 = cD83.getLocation();
        items.CD cD92 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray93 = new items.LibraryItem[] { cD76, cD83, cD92 };
        java.util.ArrayList<items.LibraryItem> libraryItemList94 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList94, libraryItemArray93);
        boolean boolean96 = cD67.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean97 = cD29.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean98 = cD20.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean99 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2156, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2156, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str12 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2172, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2172, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate10, 449, "LibraryItem [itemId=1449, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getItemType();
        int int17 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=2181, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=2181, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2181 + "'", int17 == 2181);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getLocation();
        double double17 = cD6.calculateOverduePenalty();
        boolean boolean18 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=2188, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=2188, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        boolean boolean12 = cD6.isOverdue();
        java.lang.String str13 = cD6.getDetails();
        items.CD cD20 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str21 = cD20.getLocation();
        java.lang.String str22 = cD20.toString();
        java.lang.String str23 = cD20.getBorrowerEmail();
        java.lang.String str24 = cD20.getPrice();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD31.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str41 = cD40.getLocation();
        java.lang.String str42 = cD40.getLocation();
        items.CD cD49 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray66 = new items.LibraryItem[] { cD49, cD56, cD65 };
        java.util.ArrayList<items.LibraryItem> libraryItemList67 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList67, libraryItemArray66);
        boolean boolean69 = cD40.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean70 = cD31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean71 = cD20.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean72 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        java.time.LocalDate localDate73 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate73, 270, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "LibraryItem [itemId=2199, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str22, "LibraryItem [itemId=2199, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getTitle();
        boolean boolean16 = cD6.isRented();
        java.lang.String str17 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=2205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=2205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        items.CD cD6 = new items.CD("LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=610, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isPurchasable();
        double double8 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.Class<?> wildcardClass13 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2208 + "'", int9 == 2208);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        java.lang.String str16 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=2226, itemType=CD, location=LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=2226, itemType=CD, location=LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str16 = cD6.getDetails();
        int int17 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2233 + "'", int17 == 2233);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getAuthor();
        java.lang.String str8 = cD6.getTitle();
        java.lang.Class<?> wildcardClass9 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        items.CD cD6 = new items.CD("LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=215, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int7 = cD6.getItemId();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2238 + "'", int7 == 2238);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getDetails();
        cD6.setIsPurchasable(false);
        java.lang.String str15 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str17 = cD6.toString();
        java.lang.String str18 = cD6.getPrice();
        java.lang.String str19 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2249 + "'", int9 == 2249);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=2249, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=2249, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str19, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getDetails();
        java.lang.String str13 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2259 + "'", int9 == 2259);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        cD6.setLocation("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str12 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2269, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2269, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        items.CD cD27 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str35 = cD34.getLocation();
        java.lang.String str36 = cD34.getLocation();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray44 = new items.LibraryItem[] { cD27, cD34, cD43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList45 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList45, libraryItemArray44);
        boolean boolean47 = cD18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList45);
        boolean boolean48 = cD18.isOverdue();
        java.lang.String str49 = cD18.getLocation();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD72 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str73 = cD72.getLocation();
        java.lang.String str74 = cD72.getLocation();
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray82 = new items.LibraryItem[] { cD65, cD72, cD81 };
        java.util.ArrayList<items.LibraryItem> libraryItemList83 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList83, libraryItemArray82);
        boolean boolean85 = cD56.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean86 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean87 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        java.time.LocalDate localDate88 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate88, 2187, "LibraryItem [itemId=2058, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getArtist();
        java.time.LocalDate localDate15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate15, 52, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2304 + "'", int9 == 2304);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        int int15 = cD6.getItemId();
        java.lang.String str16 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2305 + "'", int15 == 2305);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isPurchasable();
        java.lang.String str37 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        boolean boolean9 = cD6.isRented();
        java.lang.String str10 = cD6.getAuthor();
        java.lang.String str11 = cD6.getArtist();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2336 + "'", int7 == 2336);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        cD6.setLocation("LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str52 = cD6.getDetails();
        java.util.List<items.LibraryItem> libraryItemList53 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = cD6.hasBorrowingPrivileges(libraryItemList53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2337 + "'", int9 == 2337);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str52, "CD: hi! by hi!. Location: LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getPrice();
        boolean boolean40 = cD6.isOverdue();
        java.lang.String str41 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getDetails();
        java.lang.String str11 = cD6.getLocation();
        java.lang.String str12 = cD6.getArtist();
        cD6.setBorrowerEmail("LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2387, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2387, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str10, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1080, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=674, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        java.lang.String str9 = cD6.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=2398, itemType=CD, location=LibraryItem [itemId=1080, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=2398, itemType=CD, location=LibraryItem [itemId=1080, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2249, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1964, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=2121, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1090, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getPrice();
        java.lang.String str51 = cD6.getArtist();
        java.lang.Class<?> wildcardClass52 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2411 + "'", int9 == 2411);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1234, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=497, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=291, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getDetails();
        cD6.setIsPurchasable(false);
        java.lang.String str15 = cD6.getDetails();
        cD6.returnItem();
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate17, 1941, "LibraryItem [itemId=499, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2423 + "'", int9 == 2423);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        java.lang.String str12 = cD6.toString();
        java.lang.String str13 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=2424, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=2424, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        double double11 = cD6.calculateOverduePenalty();
        double double12 = cD6.calculateOverduePenalty();
        boolean boolean13 = cD6.isOverdue();
        java.lang.String str14 = cD6.getLocation();
        java.lang.String str15 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2425, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2425, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getAuthor();
        java.lang.String str51 = cD6.getBorrowerEmail();
        java.lang.String str52 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2430 + "'", int9 == 2430);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "CD" + "'", str51, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "LibraryItem [itemId=2430, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str52, "LibraryItem [itemId=2430, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.getAuthor();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2453 + "'", int9 == 2453);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=2453, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=2453, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=2453, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=2453, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2453 + "'", int12 == 2453);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        java.lang.String str87 = cD6.getAuthor();
        double double88 = cD6.calculateOverduePenalty();
        java.lang.String str89 = cD6.getDetails();
        java.lang.String str90 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2454, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2454, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str89, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str75 = cD6.getPrice();
        boolean boolean76 = cD6.isRented();
        cD6.setBorrowerEmail("");
        double double79 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        boolean boolean16 = cD6.isOverdue();
        boolean boolean17 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=2476, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=2476, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        java.lang.String str87 = cD6.getAuthor();
        double double88 = cD6.calculateOverduePenalty();
        boolean boolean89 = cD6.isRented();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2482, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2482, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.Class<?> wildcardClass86 = libraryItemList81.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2497, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2497, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getItemType();
        java.lang.String str40 = cD6.getDetails();
        boolean boolean41 = cD6.isRented();
        java.lang.String str42 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2564 + "'", int37 == 2564);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CD" + "'", str39, "CD");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str40, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getTitle();
        boolean boolean12 = cD6.isPurchasable();
        java.lang.Class<?> wildcardClass13 = cD6.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2572 + "'", int7 == 2572);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        items.CD cD27 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str35 = cD34.getLocation();
        java.lang.String str36 = cD34.getLocation();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray44 = new items.LibraryItem[] { cD27, cD34, cD43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList45 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList45, libraryItemArray44);
        boolean boolean47 = cD18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList45);
        boolean boolean48 = cD18.isOverdue();
        java.lang.String str49 = cD18.getLocation();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD72 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str73 = cD72.getLocation();
        java.lang.String str74 = cD72.getLocation();
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray82 = new items.LibraryItem[] { cD65, cD72, cD81 };
        java.util.ArrayList<items.LibraryItem> libraryItemList83 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList83, libraryItemArray82);
        boolean boolean85 = cD56.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean86 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean87 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        java.time.LocalDate localDate88 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate88, 343, "LibraryItem [itemId=1322, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isPurchasable();
        java.lang.String str37 = cD6.getBorrowerEmail();
        boolean boolean38 = cD6.isRented();
        cD6.setIsPurchasable(true);
        java.lang.Class<?> wildcardClass41 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str75 = cD6.getPrice();
        boolean boolean76 = cD6.isRented();
        cD6.setBorrowerEmail("");
        java.lang.String str79 = cD6.getPrice();
        java.lang.String str80 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getLocation();
        boolean boolean18 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str13 = cD6.getArtist();
        int int14 = cD6.getItemId();
        double double15 = cD6.calculateOverduePenalty();
        java.lang.String str16 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2599, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2599, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2599 + "'", int14 == 2599);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=1365, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate10, 817, "LibraryItem [itemId=1234, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2617 + "'", int7 == 2617);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        boolean boolean10 = cD6.isRented();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean48 = cD6.isRented();
        items.CD cD55 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str56 = cD55.getLocation();
        java.lang.String str57 = cD55.toString();
        java.lang.String str58 = cD55.getDetails();
        boolean boolean59 = cD55.isRented();
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str67 = cD66.getLocation();
        java.lang.String str68 = cD66.getLocation();
        items.CD cD75 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD82 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str83 = cD82.getLocation();
        java.lang.String str84 = cD82.getLocation();
        items.CD cD91 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray92 = new items.LibraryItem[] { cD75, cD82, cD91 };
        java.util.ArrayList<items.LibraryItem> libraryItemList93 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList93, libraryItemArray92);
        boolean boolean95 = cD66.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean96 = cD55.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean97 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2622, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2622, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "LibraryItem [itemId=2627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str57, "LibraryItem [itemId=2627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str58, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        int int15 = cD6.getItemId();
        java.lang.String str16 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2632 + "'", int15 == 2632);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getItemType();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2635 + "'", int37 == 2635);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CD" + "'", str39, "CD");
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        items.CD cD6 = new items.CD("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=436, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=842, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=163, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getItemType();
        items.CD cD14 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str15 = cD14.getBorrowerEmail();
        java.lang.String str16 = cD14.getBorrowerEmail();
        cD14.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD25 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD25.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str35 = cD34.getLocation();
        java.lang.String str36 = cD34.getLocation();
        items.CD cD43 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD50 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str51 = cD50.getLocation();
        java.lang.String str52 = cD50.getLocation();
        items.CD cD59 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray60 = new items.LibraryItem[] { cD43, cD50, cD59 };
        java.util.ArrayList<items.LibraryItem> libraryItemList61 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList61, libraryItemArray60);
        boolean boolean63 = cD34.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList61);
        boolean boolean64 = cD25.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList61);
        boolean boolean65 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList61);
        boolean boolean66 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList61);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD" + "'", str7, "CD");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int9 = cD6.getItemId();
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2647 + "'", int9 == 2647);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1767, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=698, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD17.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str27 = cD26.getLocation();
        java.lang.String str28 = cD26.getLocation();
        items.CD cD35 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray52 = new items.LibraryItem[] { cD35, cD42, cD51 };
        java.util.ArrayList<items.LibraryItem> libraryItemList53 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList53, libraryItemArray52);
        boolean boolean55 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean56 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean57 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean58 = cD6.isRented();
        java.lang.String str59 = cD6.getItemType();
        boolean boolean60 = cD6.isRented();
        int int61 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "CD" + "'", str59, "CD");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2680 + "'", int61 == 2680);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getTitle();
        boolean boolean12 = cD6.isPurchasable();
        java.time.LocalDate localDate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate13, 1639, "LibraryItem [itemId=475, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2686 + "'", int7 == 2686);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        java.time.LocalDate localDate15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate15, 0, "LibraryItem [itemId=1361, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2688 + "'", int9 == 2688);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getPrice();
        double double12 = cD6.calculateOverduePenalty();
        int int13 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2689, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2689, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2689 + "'", int13 == 2689);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        items.CD cD6 = new items.CD("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD");
        java.lang.String str7 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isPurchasable();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        cD6.setIsPurchasable(true);
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2702 + "'", int9 == 2702);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=2702, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=2702, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getTitle();
        java.time.LocalDate localDate14 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate14, 956, "LibraryItem [itemId=980, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getPrice();
        cD6.setBorrowerEmail("LibraryItem [itemId=1343, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=931, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getDetails();
        java.lang.String str18 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2725 + "'", int9 == 2725);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=2725, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=2725, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str17, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "LibraryItem [itemId=931, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str18, "LibraryItem [itemId=931, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        items.CD cD6 = new items.CD("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=436, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=842, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=163, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getItemType();
        java.lang.Class<?> wildcardClass8 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD" + "'", str7, "CD");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=2751, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=2751, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=2751, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=2751, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str75 = cD6.getPrice();
        boolean boolean76 = cD6.isRented();
        cD6.setBorrowerEmail("");
        java.lang.String str79 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getTitle();
        java.lang.Class<?> wildcardClass16 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=2773, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=2773, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str13 = cD6.getArtist();
        int int14 = cD6.getItemId();
        boolean boolean15 = cD6.isRented();
        cD6.setLocation("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass18 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2781, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2781, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2781 + "'", int14 == 2781);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getDetails();
        cD6.setIsPurchasable(false);
        items.CD cD21 = new items.CD("CD", "LibraryItem [itemId=1232, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1279, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "");
        items.CD cD28 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str29 = cD28.getLocation();
        java.lang.String str30 = cD28.getLocation();
        items.CD cD37 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { cD37, cD44, cD53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = cD21.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        java.lang.String str60 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2782 + "'", int9 == 2782);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        java.lang.String str36 = cD6.getDetails();
        java.lang.String str37 = cD6.toString();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str36, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "LibraryItem [itemId=2789, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str37, "LibraryItem [itemId=2789, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        cD6.returnItem();
        java.lang.String str40 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.setBorrowerEmail("LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2808 + "'", int9 == 2808);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=2808, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=2808, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isRented();
        items.CD cD18 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD18.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD27 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str28 = cD27.getLocation();
        java.lang.String str29 = cD27.getLocation();
        items.CD cD36 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str44 = cD43.getLocation();
        java.lang.String str45 = cD43.getLocation();
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray53 = new items.LibraryItem[] { cD36, cD43, cD52 };
        java.util.ArrayList<items.LibraryItem> libraryItemList54 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList54, libraryItemArray53);
        boolean boolean56 = cD27.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList54);
        boolean boolean57 = cD27.isOverdue();
        items.CD cD64 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str65 = cD64.getLocation();
        java.lang.String str66 = cD64.getLocation();
        items.CD cD73 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD80 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str81 = cD80.getLocation();
        java.lang.String str82 = cD80.getLocation();
        items.CD cD89 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray90 = new items.LibraryItem[] { cD73, cD80, cD89 };
        java.util.ArrayList<items.LibraryItem> libraryItemList91 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList91, libraryItemArray90);
        boolean boolean93 = cD64.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean94 = cD27.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean95 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList91);
        boolean boolean96 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList91);
        java.lang.String str97 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=1345, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=2882, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=2882, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str97, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str75 = cD6.getPrice();
        boolean boolean76 = cD6.isRented();
        cD6.returnItem();
        java.time.LocalDate localDate78 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate78, 2349, "LibraryItem [itemId=2265, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        double double8 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getAuthor();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getTitle();
        boolean boolean12 = cD6.isPurchasable();
        java.lang.String str13 = cD6.getTitle();
        java.time.LocalDate localDate14 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate14, 2453, "LibraryItem [itemId=2882, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2935 + "'", int7 == 2935);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray41 = new items.LibraryItem[] { cD24, cD31, cD40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList42 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList42, libraryItemArray41);
        boolean boolean44 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList42);
        boolean boolean45 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList42);
        java.lang.String str46 = cD6.getBorrowerEmail();
        boolean boolean47 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str46, "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isPurchasable();
        boolean boolean9 = cD6.isPurchasable();
        double double10 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        items.CD cD6 = new items.CD("LibraryItem [itemId=397, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "");
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getPrice();
        java.lang.String str16 = cD6.getDetails();
        java.lang.String str17 = cD6.getItemType();
        java.lang.String str18 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CD" + "'", str17, "CD");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        items.CD cD6 = new items.CD("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD");
        java.lang.String str7 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD" + "'", str10, "CD");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray41 = new items.LibraryItem[] { cD24, cD31, cD40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList42 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList42, libraryItemArray41);
        boolean boolean44 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList42);
        boolean boolean45 = cD15.isOverdue();
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str53 = cD52.getLocation();
        java.lang.String str54 = cD52.getLocation();
        items.CD cD61 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str69 = cD68.getLocation();
        java.lang.String str70 = cD68.getLocation();
        items.CD cD77 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { cD61, cD68, cD77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = cD52.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        cD6.returnItem();
        java.lang.String str85 = cD6.getArtist();
        java.lang.Class<?> wildcardClass86 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str85, "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        double double13 = cD6.calculateOverduePenalty();
        java.lang.String str14 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3003 + "'", int9 == 3003);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=3003, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=3003, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3003, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3003, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3003 + "'", int12 == 3003);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3003, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3003, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getLocation();
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate17, 1822, "LibraryItem [itemId=1375, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3004, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3004, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.Class<?> wildcardClass9 = cD6.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3011 + "'", int7 == 3011);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.toString();
        boolean boolean18 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3014 + "'", int14 == 3014);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=3014, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=3014, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getAuthor();
        java.lang.String str8 = cD6.getDetails();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getDetails();
        java.lang.String str11 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD: LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str8, "CD: LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD: LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str10, "CD: LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getAuthor();
        java.lang.String str15 = cD6.getDetails();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getTitle();
        java.lang.String str13 = cD6.getItemType();
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getPrice();
        boolean boolean16 = cD6.isRented();
        java.lang.Class<?> wildcardClass17 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3019 + "'", int9 == 3019);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=3019, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=3019, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3019, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3019, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.Class<?> wildcardClass9 = cD6.getClass();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate10, 708, "LibraryItem [itemId=3015, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3034, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3034, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        int int12 = cD6.getItemId();
        int int13 = cD6.getItemId();
        java.lang.String str14 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3035 + "'", int9 == 3035);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=3035, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=3035, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3035 + "'", int12 == 3035);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3035 + "'", int13 == 3035);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3035, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3035, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getDetails();
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3038, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3038, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getArtist();
        boolean boolean18 = cD6.isRented();
        java.lang.String str19 = cD6.getLocation();
        items.CD cD26 = new items.CD("LibraryItem [itemId=1080, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=674, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD26.setIsPurchasable(true);
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        boolean boolean38 = cD35.isPurchasable();
        boolean boolean39 = cD35.isOverdue();
        cD35.returnItem();
        items.CD cD47 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str48 = cD47.getLocation();
        java.lang.String str49 = cD47.getLocation();
        int int50 = cD47.getItemId();
        cD47.setBorrowerEmail("CD");
        java.lang.String str53 = cD47.getArtist();
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD76 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str77 = cD76.getLocation();
        java.lang.String str78 = cD76.getLocation();
        items.CD cD85 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray86 = new items.LibraryItem[] { cD69, cD76, cD85 };
        java.util.ArrayList<items.LibraryItem> libraryItemList87 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList87, libraryItemArray86);
        boolean boolean89 = cD60.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList87);
        boolean boolean90 = cD47.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList87);
        boolean boolean91 = cD35.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList87);
        boolean boolean92 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList87);
        boolean boolean93 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList87);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3040, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3040, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str19, "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3043 + "'", int50 == 3043);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getArtist();
        boolean boolean18 = cD6.isRented();
        java.lang.String str19 = cD6.getLocation();
        java.lang.String str20 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3056, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3056, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str19, "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getArtist();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getTitle();
        java.lang.String str8 = cD6.getArtist();
        java.lang.String str9 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getBorrowerEmail();
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.toString();
        java.lang.String str18 = cD15.getBorrowerEmail();
        java.lang.String str19 = cD15.getPrice();
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD26.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str52 = cD51.getLocation();
        java.lang.String str53 = cD51.getLocation();
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray61 = new items.LibraryItem[] { cD44, cD51, cD60 };
        java.util.ArrayList<items.LibraryItem> libraryItemList62 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList62, libraryItemArray61);
        boolean boolean64 = cD35.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList62);
        boolean boolean65 = cD26.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList62);
        boolean boolean66 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList62);
        boolean boolean67 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList62);
        java.time.LocalDate localDate68 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate68, 0, "LibraryItem [itemId=1452, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=3088, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=3088, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=485, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=876, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str22 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CD" + "'", str22, "CD");
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getAuthor();
        java.lang.String str92 = cD6.getLocation();
        java.util.List<items.LibraryItem> libraryItemList93 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = cD6.hasBorrowingPrivileges(libraryItemList93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3116, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3116, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str92, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        java.lang.String str14 = cD6.getArtist();
        double double15 = cD6.calculateOverduePenalty();
        java.lang.String str16 = cD6.getAuthor();
        cD6.setBorrowerEmail("");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3125, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3125, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        int int37 = cD6.getItemId();
        cD6.returnItem();
        java.lang.String str39 = cD6.getItemType();
        java.lang.String str40 = cD6.toString();
        boolean boolean41 = cD6.isOverdue();
        java.lang.String str42 = cD6.getArtist();
        java.lang.String str43 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3126 + "'", int37 == 3126);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CD" + "'", str39, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "LibraryItem [itemId=3126, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str40, "LibraryItem [itemId=3126, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "LibraryItem [itemId=3126, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str43, "LibraryItem [itemId=3126, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        items.CD cD6 = new items.CD("LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1038, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isRented();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.getItemType();
        boolean boolean14 = cD6.isOverdue();
        boolean boolean15 = cD6.isOverdue();
        cD6.returnItem();
        java.lang.String str17 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str17, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getLocation();
        java.lang.String str15 = cD6.getItemType();
        cD6.setBorrowerEmail("LibraryItem [itemId=95, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3133 + "'", int9 == 3133);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=3133, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=3133, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3133, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3133, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getLocation();
        java.lang.String str13 = cD6.toString();
        cD6.setBorrowerEmail("LibraryItem [itemId=663, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3135 + "'", int9 == 3135);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=3135, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=3135, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=3135, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=3135, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        java.lang.String str38 = cD6.getAuthor();
        java.lang.String str39 = cD6.getAuthor();
        java.lang.String str40 = cD6.getLocation();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getPrice();
        boolean boolean40 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        cD6.setLocation("LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str19 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3163, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3163, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        boolean boolean18 = cD6.isRented();
        cD6.setIsPurchasable(true);
        java.lang.String str21 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: true" + "'", str21, "CD: hi! by hi!. Location: hi!. Purchasable: true");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getAuthor();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getPrice();
        java.lang.String str16 = cD6.getDetails();
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate17, 1462, "LibraryItem [itemId=2702, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass11 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3169 + "'", int9 == 3169);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=860, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getPrice();
        double double18 = cD6.calculateOverduePenalty();
        int int19 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3170 + "'", int14 == 3170);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3170 + "'", int19 == 3170);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.toString();
        java.lang.String str14 = cD6.getLocation();
        java.lang.String str15 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=3193, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=3193, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=201, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int14 = cD6.getItemId();
        boolean boolean15 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3203, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3203, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3203 + "'", int14 == 3203);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str11 = cD6.getBorrowerEmail();
        cD6.setBorrowerEmail("LibraryItem [itemId=1068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3213, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3213, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=1364, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1375, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean75 = cD6.isPurchasable();
        cD6.returnItem();
        java.lang.Class<?> wildcardClass77 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        items.CD cD6 = new items.CD("LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isOverdue();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.Class<?> wildcardClass9 = cD6.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getAuthor();
        int int14 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3248 + "'", int9 == 3248);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3248 + "'", int14 == 3248);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3249, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3249, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD17.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str27 = cD26.getLocation();
        java.lang.String str28 = cD26.getLocation();
        items.CD cD35 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray52 = new items.LibraryItem[] { cD35, cD42, cD51 };
        java.util.ArrayList<items.LibraryItem> libraryItemList53 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList53, libraryItemArray52);
        boolean boolean55 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean56 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean57 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean58 = cD6.isRented();
        boolean boolean59 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str44 = cD43.getLocation();
        java.lang.String str45 = cD43.getLocation();
        items.CD cD52 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD59 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str60 = cD59.getLocation();
        java.lang.String str61 = cD59.getLocation();
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray69 = new items.LibraryItem[] { cD52, cD59, cD68 };
        java.util.ArrayList<items.LibraryItem> libraryItemList70 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList70, libraryItemArray69);
        boolean boolean72 = cD43.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList70);
        boolean boolean73 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList70);
        java.lang.String str74 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=144, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean16 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        cD6.setLocation("LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str52 = cD6.getDetails();
        java.lang.String str53 = cD6.getPrice();
        int int54 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3272 + "'", int9 == 3272);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str52, "CD: hi! by hi!. Location: LibraryItem [itemId=1614, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3272 + "'", int54 == 3272);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        items.CD cD6 = new items.CD("LibraryItem [itemId=309, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1767, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=645, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        java.lang.String str8 = cD6.getArtist();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        java.lang.String str16 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getArtist();
        java.lang.String str18 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3311, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3311, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=94, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int7 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=227, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3316 + "'", int7 == 3316);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        items.CD cD6 = new items.CD("LibraryItem [itemId=368, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=484, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=536, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1155, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=368, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=368, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getItemType();
        java.lang.Class<?> wildcardClass12 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3330, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3330, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=327, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        java.lang.Class<?> wildcardClass17 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3355, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3355, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3355 + "'", int11 == 3355);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=3355, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=3355, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1391, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=505, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=2746, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3319, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        items.CD cD6 = new items.CD("LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=610, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getAuthor();
        java.lang.Class<?> wildcardClass8 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(false);
        java.lang.String str9 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        int int11 = cD6.getItemId();
        int int12 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3383, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3383, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3383 + "'", int11 == 3383);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3383 + "'", int12 == 3383);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        java.lang.String str12 = cD6.toString();
        java.lang.String str13 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3384 + "'", int9 == 3384);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=3384, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=3384, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getAuthor();
        java.lang.String str92 = cD6.getLocation();
        java.lang.String str93 = cD6.getAuthor();
        java.time.LocalDate localDate94 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate94, 1896, "LibraryItem [itemId=2187, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3391, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3391, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str92, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1080, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=674, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(true);
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        boolean boolean18 = cD15.isPurchasable();
        boolean boolean19 = cD15.isOverdue();
        cD15.returnItem();
        items.CD cD27 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str28 = cD27.getLocation();
        java.lang.String str29 = cD27.getLocation();
        int int30 = cD27.getItemId();
        cD27.setBorrowerEmail("CD");
        java.lang.String str33 = cD27.getArtist();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str41 = cD40.getLocation();
        java.lang.String str42 = cD40.getLocation();
        items.CD cD49 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray66 = new items.LibraryItem[] { cD49, cD56, cD65 };
        java.util.ArrayList<items.LibraryItem> libraryItemList67 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList67, libraryItemArray66);
        boolean boolean69 = cD40.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean70 = cD27.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean71 = cD15.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean72 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        double double73 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3403 + "'", int30 == 3403);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3408 + "'", int9 == 3408);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        boolean boolean38 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.returnItem();
        double double11 = cD6.calculateOverduePenalty();
        double double12 = cD6.calculateOverduePenalty();
        cD6.setLocation("LibraryItem [itemId=3171, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3413, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3413, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3414 + "'", int9 == 3414);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        double double9 = cD6.calculateOverduePenalty();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3415, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3415, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        double double37 = cD6.calculateOverduePenalty();
        java.lang.String str38 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str38, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        int int10 = cD6.getItemId();
        java.lang.String str11 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3420, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3420, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3420 + "'", int10 == 3420);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str16 = cD6.getLocation();
        cD6.setBorrowerEmail("LibraryItem [itemId=1487, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean19 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getPrice();
        java.lang.String str16 = cD6.getDetails();
        java.lang.String str17 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getArtist();
        boolean boolean10 = cD6.isPurchasable();
        boolean boolean11 = cD6.isOverdue();
        int int12 = cD6.getItemId();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3425 + "'", int7 == 3425);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3425 + "'", int12 == 3425);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean18 = cD6.isPurchasable();
        double double19 = cD6.calculateOverduePenalty();
        java.lang.String str20 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getLocation();
        java.lang.String str87 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3449, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3449, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str87, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        items.CD cD6 = new items.CD("LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1364, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=1031, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=1031, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=1031, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getAuthor();
        double double15 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        items.CD cD6 = new items.CD("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD");
        java.lang.String str7 = cD6.getTitle();
        java.lang.String str8 = cD6.getAuthor();
        boolean boolean9 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD" + "'", str8, "CD");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        boolean boolean13 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3472, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3472, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.getBorrowerEmail();
        double double17 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        cD6.setLocation("LibraryItem [itemId=3014, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3481 + "'", int9 == 3481);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getDetails();
        java.lang.String str11 = cD6.getLocation();
        boolean boolean12 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3482, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3482, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str10, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        double double15 = cD6.calculateOverduePenalty();
        java.lang.String str16 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3492 + "'", int14 == 3492);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isPurchasable();
        boolean boolean9 = cD6.isPurchasable();
        java.lang.String str10 = cD6.getAuthor();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        cD6.setBorrowerEmail("LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=1126, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str43 = cD6.getAuthor();
        java.lang.String str44 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        items.CD cD6 = new items.CD("LibraryItem [itemId=51, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=53, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=2511, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        cD6.returnItem();
        java.lang.String str40 = cD6.getArtist();
        java.lang.String str41 = cD6.getItemType();
        java.lang.String str42 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "CD" + "'", str41, "CD");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: true" + "'", str42, "CD: hi! by hi!. Location: hi!. Purchasable: true");
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1754, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1059, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=1031, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=506, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int7 = cD6.getItemId();
        java.lang.String str8 = cD6.getArtist();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3510 + "'", int7 == 3510);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=506, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=506, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        double double9 = cD6.calculateOverduePenalty();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate10, 922, "LibraryItem [itemId=3204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3511, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3511, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1326, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1461, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=291, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.toString();
        java.lang.Class<?> wildcardClass8 = cD6.getClass();
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=3512, itemType=CD, location=LibraryItem [itemId=1326, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=3512, itemType=CD, location=LibraryItem [itemId=1326, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        java.lang.String str38 = cD6.getLocation();
        cD6.returnItem();
        items.CD cD46 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str47 = cD46.getBorrowerEmail();
        java.lang.String str48 = cD46.getBorrowerEmail();
        cD46.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD57 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD57.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str67 = cD66.getLocation();
        java.lang.String str68 = cD66.getLocation();
        items.CD cD75 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD82 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str83 = cD82.getLocation();
        java.lang.String str84 = cD82.getLocation();
        items.CD cD91 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray92 = new items.LibraryItem[] { cD75, cD82, cD91 };
        java.util.ArrayList<items.LibraryItem> libraryItemList93 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList93, libraryItemArray92);
        boolean boolean95 = cD66.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean96 = cD57.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean97 = cD46.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean98 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        java.lang.String str99 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "hi!" + "'", str99, "hi!");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean18 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3526 + "'", int9 == 3526);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=3526, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=3526, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3526, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3526, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3526 + "'", int12 == 3526);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        java.lang.String str8 = cD6.getDetails();
        java.lang.String str9 = cD6.getDetails();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD: LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str8, "CD: LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str9, "CD: LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        double double9 = cD6.calculateOverduePenalty();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3540, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3540, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1348, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2676, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1322, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=599, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setLocation("LibraryItem [itemId=2269, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2693, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "", true, false, "LibraryItem [itemId=2608, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1927, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int7 = cD6.getItemId();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3579 + "'", int7 == 3579);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        items.CD cD6 = new items.CD("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        double double8 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean18 = cD6.isPurchasable();
        cD6.setLocation("LibraryItem [itemId=1532, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        java.lang.Class<?> wildcardClass22 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean91 = cD6.isOverdue();
        java.lang.String str92 = cD6.getLocation();
        java.lang.String str93 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3601, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3601, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str92, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        java.lang.String str8 = cD6.getPrice();
        cD6.setIsPurchasable(false);
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: false" + "'", str11, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        items.CD cD6 = new items.CD("hi!", "", false, false, "hi!", "LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double7 = cD6.calculateOverduePenalty();
        boolean boolean8 = cD6.isPurchasable();
        cD6.setIsPurchasable(true);
        boolean boolean11 = cD6.isOverdue();
        boolean boolean12 = cD6.isOverdue();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        double double13 = cD6.calculateOverduePenalty();
        int int14 = cD6.getItemId();
        java.lang.String str15 = cD6.getArtist();
        cD6.returnItem();
        items.CD cD23 = new items.CD("", "LibraryItem [itemId=94, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str24 = cD23.getPrice();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        int int34 = cD31.getItemId();
        java.lang.String str35 = cD31.getBorrowerEmail();
        cD31.setBorrowerEmail("LibraryItem [itemId=167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str38 = cD31.getItemType();
        items.CD cD45 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str46 = cD45.getLocation();
        java.lang.String str47 = cD45.getLocation();
        items.CD cD54 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD61 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str62 = cD61.getLocation();
        java.lang.String str63 = cD61.getLocation();
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray71 = new items.LibraryItem[] { cD54, cD61, cD70 };
        java.util.ArrayList<items.LibraryItem> libraryItemList72 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList72, libraryItemArray71);
        boolean boolean74 = cD45.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList72);
        boolean boolean75 = cD31.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList72);
        boolean boolean76 = cD23.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList72);
        boolean boolean77 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList72);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3613, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3613, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3613 + "'", int14 == 3613);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str24, "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3615 + "'", int34 == 3615);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CD" + "'", str38, "CD");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=1365, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str10 = cD6.getArtist();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3621 + "'", int7 == 3621);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getItemType();
        java.lang.String str12 = cD6.getAuthor();
        cD6.returnItem();
        int int14 = cD6.getItemId();
        double double15 = cD6.calculateOverduePenalty();
        java.lang.String str16 = cD6.getTitle();
        java.lang.String str17 = cD6.getArtist();
        boolean boolean18 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD" + "'", str11, "CD");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3622 + "'", int14 == 3622);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        cD6.returnItem();
        java.lang.String str39 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(true);
        boolean boolean42 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean91 = cD6.isOverdue();
        java.time.LocalDate localDate92 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate92, 401, "LibraryItem [itemId=2240, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3631, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3631, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean7 = cD6.isRented();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        int int18 = cD15.getItemId();
        cD15.setBorrowerEmail("CD");
        java.lang.String str21 = cD15.getArtist();
        items.CD cD28 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str29 = cD28.getLocation();
        java.lang.String str30 = cD28.getLocation();
        items.CD cD37 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { cD37, cD44, cD53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        java.lang.String str60 = cD6.getDetails();
        java.lang.String str61 = cD6.getItemType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3653 + "'", int18 == 3653);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str60, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "CD" + "'", str61, "CD");
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        items.CD cD6 = new items.CD("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getItemType();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=1951, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double11 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD" + "'", str7, "CD");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        boolean boolean10 = cD6.isRented();
        boolean boolean11 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3667, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3667, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2672, itemType=CD, location=LibraryItem [itemId=333, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3476, itemType=CD, location=LibraryItem [itemId=1326, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=2818, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3508, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getLocation();
        double double17 = cD6.calculateOverduePenalty();
        cD6.returnItem();
        java.lang.String str19 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3680, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3680, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CD" + "'", str19, "CD");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1965, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1737, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=3612, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        cD6.setLocation("CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        cD6.setLocation("LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass19 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3683, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3683, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        items.CD cD6 = new items.CD("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2103, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getTitle();
        java.lang.String str15 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3704 + "'", int9 == 3704);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=3704, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=3704, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        items.CD cD14 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str15 = cD14.getLocation();
        java.lang.String str16 = cD14.toString();
        java.lang.String str17 = cD14.getBorrowerEmail();
        java.lang.String str18 = cD14.getBorrowerEmail();
        items.CD cD25 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str26 = cD25.getLocation();
        java.lang.String str27 = cD25.getLocation();
        items.CD cD34 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str42 = cD41.getLocation();
        java.lang.String str43 = cD41.getLocation();
        items.CD cD50 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray51 = new items.LibraryItem[] { cD34, cD41, cD50 };
        java.util.ArrayList<items.LibraryItem> libraryItemList52 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList52, libraryItemArray51);
        boolean boolean54 = cD25.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList52);
        boolean boolean55 = cD25.isOverdue();
        items.CD cD62 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str63 = cD62.getLocation();
        java.lang.String str64 = cD62.getLocation();
        items.CD cD71 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD78 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str79 = cD78.getLocation();
        java.lang.String str80 = cD78.getLocation();
        items.CD cD87 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { cD71, cD78, cD87 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = cD62.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = cD25.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = cD14.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        java.lang.Class<?> wildcardClass95 = cD6.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3705 + "'", int7 == 3705);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=3706, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=3706, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getArtist();
        boolean boolean18 = cD6.isRented();
        java.time.LocalDate localDate19 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate19, 2749, "LibraryItem [itemId=1708, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3715, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3715, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getPrice();
        cD6.setLocation("LibraryItem [itemId=485, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=876, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str22 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        items.CD cD14 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str15 = cD14.getLocation();
        java.lang.String str16 = cD14.getLocation();
        items.CD cD23 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD30 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str31 = cD30.getLocation();
        java.lang.String str32 = cD30.getLocation();
        items.CD cD39 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray40 = new items.LibraryItem[] { cD23, cD30, cD39 };
        java.util.ArrayList<items.LibraryItem> libraryItemList41 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList41, libraryItemArray40);
        boolean boolean43 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList41);
        boolean boolean44 = cD14.isOverdue();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str52 = cD51.getLocation();
        java.lang.String str53 = cD51.getLocation();
        items.CD cD60 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str68 = cD67.getLocation();
        java.lang.String str69 = cD67.getLocation();
        items.CD cD76 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray77 = new items.LibraryItem[] { cD60, cD67, cD76 };
        java.util.ArrayList<items.LibraryItem> libraryItemList78 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList78, libraryItemArray77);
        boolean boolean80 = cD51.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean81 = cD14.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList78);
        boolean boolean82 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList78);
        java.lang.String str83 = cD6.getTitle();
        java.lang.String str84 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str84, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        items.CD cD6 = new items.CD("LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=215, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getPrice();
        java.lang.String str8 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=205, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        java.lang.String str8 = cD6.getItemType();
        java.lang.String str9 = cD6.toString();
        boolean boolean10 = cD6.isRented();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3748 + "'", int7 == 3748);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD" + "'", str8, "CD");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=3748, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=3748, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        boolean boolean13 = cD6.isOverdue();
        boolean boolean14 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3761 + "'", int9 == 3761);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=3761, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=3761, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3761, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3761, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3761 + "'", int12 == 3761);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getTitle();
        boolean boolean16 = cD6.isRented();
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate17, (int) '#', "LibraryItem [itemId=1425, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3762, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3762, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1945, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=690, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=2677, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        java.lang.String str7 = cD6.getArtist();
        java.lang.String str8 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false" + "'", str7, "CD: hi! by hi!. Location: LibraryItem [itemId=226, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1945, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1945, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str14 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3773 + "'", int9 == 3773);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD" + "'", str14, "CD");
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getDetails();
        cD6.setIsPurchasable(false);
        java.lang.String str15 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str17 = cD6.getDetails();
        java.lang.String str18 = cD6.getArtist();
        boolean boolean19 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3775 + "'", int9 == 3775);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str17, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.toString();
        boolean boolean13 = cD6.isPurchasable();
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3785, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3785, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3785 + "'", int11 == 3785);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=3785, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=3785, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        int int21 = cD18.getItemId();
        cD18.setBorrowerEmail("CD");
        java.lang.String str24 = cD18.getArtist();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD47 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str48 = cD47.getLocation();
        java.lang.String str49 = cD47.getLocation();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray57 = new items.LibraryItem[] { cD40, cD47, cD56 };
        java.util.ArrayList<items.LibraryItem> libraryItemList58 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList58, libraryItemArray57);
        boolean boolean60 = cD31.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList58);
        boolean boolean61 = cD18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList58);
        boolean boolean62 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList58);
        cD6.setBorrowerEmail("LibraryItem [itemId=1636, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3789 + "'", int21 == 3789);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1188, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1122, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getAuthor();
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        int int25 = cD22.getItemId();
        java.lang.String str26 = cD22.getBorrowerEmail();
        cD22.setBorrowerEmail("LibraryItem [itemId=167, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str29 = cD22.getItemType();
        items.CD cD36 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str37 = cD36.getLocation();
        java.lang.String str38 = cD36.getLocation();
        items.CD cD45 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str53 = cD52.getLocation();
        java.lang.String str54 = cD52.getLocation();
        items.CD cD61 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray62 = new items.LibraryItem[] { cD45, cD52, cD61 };
        java.util.ArrayList<items.LibraryItem> libraryItemList63 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList63, libraryItemArray62);
        boolean boolean65 = cD36.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList63);
        boolean boolean66 = cD22.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList63);
        boolean boolean67 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList63);
        java.lang.String str68 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3797, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3797, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3798 + "'", int25 == 3798);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CD" + "'", str29, "CD");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isPurchasable();
        cD6.setIsPurchasable(false);
        boolean boolean39 = cD6.isRented();
        double double40 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.getLocation();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3810 + "'", int11 == 3810);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getAuthor();
        boolean boolean15 = cD6.isRented();
        cD6.setBorrowerEmail("LibraryItem [itemId=497, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate18 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate18, 1455, "LibraryItem [itemId=1754, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        items.CD cD6 = new items.CD("LibraryItem [itemId=817, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=664, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isPurchasable();
        java.lang.Class<?> wildcardClass8 = cD6.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        items.CD cD6 = new items.CD("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=176, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getItemType();
        double double8 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD" + "'", str7, "CD");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.toString();
        cD6.setIsPurchasable(true);
        boolean boolean16 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3830 + "'", int9 == 3830);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=3830, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=3830, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getPrice();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD17.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str27 = cD26.getLocation();
        java.lang.String str28 = cD26.getLocation();
        items.CD cD35 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray52 = new items.LibraryItem[] { cD35, cD42, cD51 };
        java.util.ArrayList<items.LibraryItem> libraryItemList53 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList53, libraryItemArray52);
        boolean boolean55 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean56 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean57 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean58 = cD6.isRented();
        java.lang.String str59 = cD6.getTitle();
        java.lang.String str60 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3831, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3831, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "CD" + "'", str60, "CD");
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        items.CD cD6 = new items.CD("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=40, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "CD");
        java.lang.String str7 = cD6.getTitle();
        java.lang.String str8 = cD6.getAuthor();
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        int int18 = cD15.getItemId();
        cD15.setBorrowerEmail("CD");
        java.lang.String str21 = cD15.getArtist();
        items.CD cD28 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str29 = cD28.getLocation();
        java.lang.String str30 = cD28.getLocation();
        items.CD cD37 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { cD37, cD44, cD53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD" + "'", str8, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3839 + "'", int18 == 3839);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getArtist();
        java.lang.String str11 = cD6.getTitle();
        boolean boolean12 = cD6.isPurchasable();
        java.lang.String str13 = cD6.toString();
        java.lang.String str14 = cD6.getItemType();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3846 + "'", int7 == 3846);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=3846, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=3846, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD" + "'", str14, "CD");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        java.lang.String str38 = cD6.getPrice();
        java.lang.String str39 = cD6.getPrice();
        java.lang.String str40 = cD6.getPrice();
        boolean boolean41 = cD6.isOverdue();
        boolean boolean42 = cD6.isOverdue();
        java.lang.String str43 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "LibraryItem [itemId=3847, itemType=CD, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str43, "LibraryItem [itemId=3847, itemType=CD, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getPrice();
        cD6.setBorrowerEmail("LibraryItem [itemId=580, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        int int15 = cD6.getItemId();
        java.lang.String str16 = cD6.getArtist();
        int int17 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3856 + "'", int15 == 3856);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3856 + "'", int17 == 3856);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1627, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3384, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=613, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2992, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str11 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=295, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isPurchasable();
        boolean boolean15 = cD6.isPurchasable();
        items.CD cD22 = new items.CD("", "", false, true, "", "hi!");
        int int23 = cD22.getItemId();
        boolean boolean24 = cD22.isPurchasable();
        java.lang.String str25 = cD22.getBorrowerEmail();
        java.lang.String str26 = cD22.getArtist();
        java.lang.String str27 = cD22.getTitle();
        boolean boolean28 = cD22.isPurchasable();
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.toString();
        java.lang.String str38 = cD35.getDetails();
        boolean boolean39 = cD35.isRented();
        items.CD cD46 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str47 = cD46.getLocation();
        java.lang.String str48 = cD46.getLocation();
        items.CD cD55 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD62 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str63 = cD62.getLocation();
        java.lang.String str64 = cD62.getLocation();
        items.CD cD71 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray72 = new items.LibraryItem[] { cD55, cD62, cD71 };
        java.util.ArrayList<items.LibraryItem> libraryItemList73 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList73, libraryItemArray72);
        boolean boolean75 = cD46.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean76 = cD35.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean77 = cD22.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList73);
        boolean boolean78 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList73);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3869, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3869, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3870 + "'", int23 == 3870);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "LibraryItem [itemId=3871, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str37, "LibraryItem [itemId=3871, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str38, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.Class<?> wildcardClass10 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getDetails();
        cD6.setBorrowerEmail("LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        int int12 = cD6.getItemId();
        cD6.setLocation("LibraryItem [itemId=2141, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getAuthor();
        java.lang.String str16 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3878, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3878, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str9, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3878 + "'", int12 == 3878);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LibraryItem [itemId=3878, itemType=CD, location=LibraryItem [itemId=2141, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str16, "LibraryItem [itemId=3878, itemType=CD, location=LibraryItem [itemId=2141, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getLocation();
        java.lang.String str87 = cD6.getBorrowerEmail();
        java.time.LocalDate localDate88 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate88, 1453, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3883, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3883, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.getAuthor();
        java.lang.String str10 = cD6.getItemType();
        boolean boolean11 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CD" + "'", str10, "CD");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        items.CD cD6 = new items.CD("LibraryItem [itemId=3461, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2121, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=1301, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1426, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        cD6.setIsPurchasable(true);
        cD6.returnItem();
        java.lang.String str39 = cD6.getBorrowerEmail();
        double double40 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getPrice();
        int int15 = cD6.getItemId();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3902 + "'", int15 == 3902);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str7 = cD6.getBorrowerEmail();
        java.lang.String str8 = cD6.getBorrowerEmail();
        cD6.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate11, 110, "LibraryItem [itemId=2249, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isPurchasable();
        cD6.setIsPurchasable(false);
        boolean boolean39 = cD6.isRented();
        boolean boolean40 = cD6.isRented();
        int int41 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3916 + "'", int41 == 3916);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        cD6.returnItem();
        java.lang.String str87 = cD6.getArtist();
        boolean boolean88 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3920, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3920, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        double double8 = cD6.calculateOverduePenalty();
        cD6.setLocation("CD: hi! by hi!. Location: LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.toString();
        cD6.returnItem();
        cD6.setBorrowerEmail("LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=2689, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double20 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=3930, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=3930, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        int int12 = cD6.getItemId();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.toString();
        java.lang.String str22 = cD19.getDetails();
        boolean boolean23 = cD19.isRented();
        items.CD cD30 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str31 = cD30.getLocation();
        java.lang.String str32 = cD30.getLocation();
        items.CD cD39 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD46 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str47 = cD46.getLocation();
        java.lang.String str48 = cD46.getLocation();
        items.CD cD55 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray56 = new items.LibraryItem[] { cD39, cD46, cD55 };
        java.util.ArrayList<items.LibraryItem> libraryItemList57 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList57, libraryItemArray56);
        boolean boolean59 = cD30.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList57);
        boolean boolean60 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList57);
        boolean boolean61 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList57);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3931 + "'", int9 == 3931);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=3931, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=3931, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3931, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3931, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3931 + "'", int12 == 3931);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "LibraryItem [itemId=3932, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str21, "LibraryItem [itemId=3932, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str22, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        int int11 = cD6.getItemId();
        cD6.setBorrowerEmail("LibraryItem [itemId=1723, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3937 + "'", int11 == 3937);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getArtist();
        boolean boolean10 = cD6.isPurchasable();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setLocation("");
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3940 + "'", int7 == 3940);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        items.CD cD6 = new items.CD("LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=610, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=1541, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.toString();
        java.lang.String str10 = cD6.getArtist();
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=3941, itemType=CD, location=LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=610, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=3941, itemType=CD, location=LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=610, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=71, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        items.CD cD6 = new items.CD("LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isOverdue();
        java.lang.String str8 = cD6.getArtist();
        java.lang.String str9 = cD6.getLocation();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.getLocation();
        items.CD cD27 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD34 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str35 = cD34.getLocation();
        java.lang.String str36 = cD34.getLocation();
        items.CD cD43 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray44 = new items.LibraryItem[] { cD27, cD34, cD43 };
        java.util.ArrayList<items.LibraryItem> libraryItemList45 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList45, libraryItemArray44);
        boolean boolean47 = cD18.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList45);
        boolean boolean48 = cD18.isOverdue();
        java.lang.String str49 = cD18.getLocation();
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD72 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str73 = cD72.getLocation();
        java.lang.String str74 = cD72.getLocation();
        items.CD cD81 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray82 = new items.LibraryItem[] { cD65, cD72, cD81 };
        java.util.ArrayList<items.LibraryItem> libraryItemList83 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList83, libraryItemArray82);
        boolean boolean85 = cD56.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean86 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        boolean boolean87 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList83);
        cD6.setIsPurchasable(true);
        java.lang.Class<?> wildcardClass90 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3952 + "'", int11 == 3952);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        java.lang.String str38 = cD6.getLocation();
        cD6.returnItem();
        items.CD cD46 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str47 = cD46.getBorrowerEmail();
        java.lang.String str48 = cD46.getBorrowerEmail();
        cD46.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD57 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD57.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str67 = cD66.getLocation();
        java.lang.String str68 = cD66.getLocation();
        items.CD cD75 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD82 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str83 = cD82.getLocation();
        java.lang.String str84 = cD82.getLocation();
        items.CD cD91 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray92 = new items.LibraryItem[] { cD75, cD82, cD91 };
        java.util.ArrayList<items.LibraryItem> libraryItemList93 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList93, libraryItemArray92);
        boolean boolean95 = cD66.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean96 = cD57.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean97 = cD46.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean98 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isRented();
        java.lang.Class<?> wildcardClass11 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        boolean boolean14 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean17 = cD6.isOverdue();
        java.lang.String str18 = cD6.getArtist();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=3147, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=3977, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=3977, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.toString();
        java.lang.String str12 = cD6.getTitle();
        java.lang.String str13 = cD6.getItemType();
        boolean boolean14 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=2724, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3979, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3979, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD" + "'", str13, "CD");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        int int11 = cD6.getItemId();
        boolean boolean12 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3981 + "'", int9 == 3981);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3981 + "'", int11 == 3981);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.toString();
        java.lang.String str12 = cD6.getTitle();
        java.time.LocalDate localDate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate13, 2839, "LibraryItem [itemId=3025, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=3982, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=3982, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        items.CD cD6 = new items.CD("LibraryItem [itemId=580, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3894, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=3135, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1260, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=1452, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str17 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3985 + "'", int9 == 3985);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getArtist();
        int int11 = cD6.getItemId();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3986 + "'", int9 == 3986);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3986 + "'", int11 == 3986);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getPrice();
        boolean boolean13 = cD6.isOverdue();
        java.lang.String str14 = cD6.getArtist();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3987 + "'", int9 == 3987);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=3987, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=3987, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isPurchasable();
        cD6.setIsPurchasable(false);
        boolean boolean39 = cD6.isPurchasable();
        boolean boolean40 = cD6.isOverdue();
        boolean boolean41 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.toString();
        cD6.setIsPurchasable(true);
        items.CD cD24 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str25 = cD24.getLocation();
        java.lang.String str26 = cD24.getLocation();
        boolean boolean27 = cD24.isPurchasable();
        boolean boolean28 = cD24.isOverdue();
        boolean boolean29 = cD24.isPurchasable();
        cD24.setBorrowerEmail("CD");
        java.lang.String str32 = cD24.getDetails();
        java.lang.String str33 = cD24.getAuthor();
        cD24.setIsPurchasable(false);
        items.CD cD42 = new items.CD("", "", false, true, "", "hi!");
        java.lang.String str43 = cD42.getBorrowerEmail();
        java.lang.String str44 = cD42.getBorrowerEmail();
        cD42.setLocation("LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD53.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD62 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str63 = cD62.getLocation();
        java.lang.String str64 = cD62.getLocation();
        items.CD cD71 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD78 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str79 = cD78.getLocation();
        java.lang.String str80 = cD78.getLocation();
        items.CD cD87 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray88 = new items.LibraryItem[] { cD71, cD78, cD87 };
        java.util.ArrayList<items.LibraryItem> libraryItemList89 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList89, libraryItemArray88);
        boolean boolean91 = cD62.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean92 = cD53.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean93 = cD42.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean94 = cD24.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        boolean boolean95 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList89);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=3992, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=3992, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str32, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        items.CD cD6 = new items.CD("LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1745, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=696, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=927, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getAuthor();
        java.time.LocalDate localDate51 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate51, 2769, "LibraryItem [itemId=294, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4021 + "'", int9 == 4021);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        int int12 = cD6.getItemId();
        java.lang.String str13 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4026 + "'", int9 == 4026);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4026, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4026, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4026 + "'", int12 == 4026);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        boolean boolean12 = cD6.isOverdue();
        java.lang.String str13 = cD6.getDetails();
        items.CD cD20 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str21 = cD20.getLocation();
        java.lang.String str22 = cD20.toString();
        java.lang.String str23 = cD20.getBorrowerEmail();
        java.lang.String str24 = cD20.getPrice();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD31.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str41 = cD40.getLocation();
        java.lang.String str42 = cD40.getLocation();
        items.CD cD49 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD56 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str57 = cD56.getLocation();
        java.lang.String str58 = cD56.getLocation();
        items.CD cD65 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray66 = new items.LibraryItem[] { cD49, cD56, cD65 };
        java.util.ArrayList<items.LibraryItem> libraryItemList67 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList67, libraryItemArray66);
        boolean boolean69 = cD40.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean70 = cD31.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean71 = cD20.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        boolean boolean72 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList67);
        java.time.LocalDate localDate73 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate73, 1916, "LibraryItem [itemId=3474, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "LibraryItem [itemId=4028, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str22, "LibraryItem [itemId=4028, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.toString();
        java.lang.String str15 = cD6.getTitle();
        cD6.setIsPurchasable(false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LibraryItem [itemId=4035, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str14, "LibraryItem [itemId=4035, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        items.CD cD6 = new items.CD("LibraryItem [itemId=270, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "CD: hi! by hi!. Location: hi!. Purchasable: false", "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getTitle();
        cD6.setIsPurchasable(false);
        java.lang.String str10 = cD6.getPrice();
        java.lang.Class<?> wildcardClass11 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str7, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=73, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        cD6.setIsPurchasable(false);
        java.lang.String str13 = cD6.getArtist();
        cD6.setBorrowerEmail("LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4042, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4042, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getLocation();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getTitle();
        java.lang.String str12 = cD6.getPrice();
        cD6.setIsPurchasable(true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4043, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4043, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getAuthor();
        java.lang.String str15 = cD6.getDetails();
        java.lang.String str16 = cD6.getDetails();
        cD6.setLocation("LibraryItem [itemId=3299, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.returnItem();
        java.lang.String str8 = cD6.getDetails();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str8, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        boolean boolean9 = cD6.isOverdue();
        items.CD cD16 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str17 = cD16.getLocation();
        java.lang.String str18 = cD16.getLocation();
        items.CD cD25 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD32 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str33 = cD32.getLocation();
        java.lang.String str34 = cD32.getLocation();
        items.CD cD41 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray42 = new items.LibraryItem[] { cD25, cD32, cD41 };
        java.util.ArrayList<items.LibraryItem> libraryItemList43 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList43, libraryItemArray42);
        boolean boolean45 = cD16.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList43);
        boolean boolean46 = cD16.isOverdue();
        java.lang.String str47 = cD16.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD16.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getTitle();
        java.lang.String str87 = cD6.getLocation();
        boolean boolean88 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4046, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4046, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        java.time.LocalDate localDate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate8, 328, "LibraryItem [itemId=852, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        java.lang.String str12 = cD6.getAuthor();
        java.lang.String str13 = cD6.getBorrowerEmail();
        items.CD cD20 = new items.CD("LibraryItem [itemId=110, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=114, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true", "LibraryItem [itemId=41, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD20.setBorrowerEmail("LibraryItem [itemId=581, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD29 = new items.CD("", "", false, true, "", "hi!");
        int int30 = cD29.getItemId();
        boolean boolean31 = cD29.isPurchasable();
        items.CD cD38 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str39 = cD38.getLocation();
        java.lang.String str40 = cD38.getLocation();
        items.CD cD47 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray64 = new items.LibraryItem[] { cD47, cD54, cD63 };
        java.util.ArrayList<items.LibraryItem> libraryItemList65 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList65, libraryItemArray64);
        boolean boolean67 = cD38.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList65);
        boolean boolean68 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList65);
        boolean boolean69 = cD20.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList65);
        boolean boolean70 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList65);
        java.lang.String str71 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4057 + "'", int9 == 4057);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4059 + "'", int30 == 4059);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        double double7 = cD6.calculateOverduePenalty();
        java.time.LocalDate localDate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate8, 3705, "LibraryItem [itemId=580, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4067 + "'", int9 == 4067);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD" + "'", str12, "CD");
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.toString();
        boolean boolean13 = cD6.isRented();
        java.lang.String str14 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4068 + "'", int11 == 4068);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getAuthor();
        cD6.setIsPurchasable(true);
        double double18 = cD6.calculateOverduePenalty();
        java.lang.String str19 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CD" + "'", str19, "CD");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        items.CD cD6 = new items.CD("LibraryItem [itemId=395, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1250, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=1137, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2738, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getLocation();
        java.lang.String str15 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=2522, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean18 = cD6.isOverdue();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4088 + "'", int9 == 4088);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4088, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4088, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=4088, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=4088, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        java.lang.String str8 = cD6.getBorrowerEmail();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4103 + "'", int7 == 4103);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        java.lang.String str36 = cD6.getDetails();
        boolean boolean37 = cD6.isOverdue();
        java.time.LocalDate localDate38 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate38, 3509, "LibraryItem [itemId=2748, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str36, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        cD6.returnItem();
        java.lang.String str12 = cD6.getBorrowerEmail();
        java.lang.String str13 = cD6.getTitle();
        cD6.setLocation("LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str16 = cD6.getBorrowerEmail();
        java.lang.String str17 = cD6.toString();
        java.lang.String str18 = cD6.getAuthor();
        boolean boolean19 = cD6.isRented();
        double double20 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=4118, itemType=CD, location=LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=4118, itemType=CD, location=LibraryItem [itemId=546, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        java.lang.String str36 = cD6.getDetails();
        java.lang.String str37 = cD6.toString();
        java.lang.String str38 = cD6.getDetails();
        items.CD cD45 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        boolean boolean46 = cD45.isRented();
        java.lang.String str47 = cD45.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        int int57 = cD54.getItemId();
        cD54.setBorrowerEmail("CD");
        java.lang.String str60 = cD54.getArtist();
        items.CD cD67 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str68 = cD67.getLocation();
        java.lang.String str69 = cD67.getLocation();
        items.CD cD76 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD83 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str84 = cD83.getLocation();
        java.lang.String str85 = cD83.getLocation();
        items.CD cD92 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray93 = new items.LibraryItem[] { cD76, cD83, cD92 };
        java.util.ArrayList<items.LibraryItem> libraryItemList94 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList94, libraryItemArray93);
        boolean boolean96 = cD67.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean97 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean98 = cD45.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList94);
        boolean boolean99 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList94);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str36, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "LibraryItem [itemId=4134, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str37, "LibraryItem [itemId=4134, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str38, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4139 + "'", int57 == 4139);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.toString();
        double double12 = cD6.calculateOverduePenalty();
        java.lang.String str13 = cD6.getBorrowerEmail();
        java.lang.String str14 = cD6.getLocation();
        java.lang.String str15 = cD6.getItemType();
        java.lang.String str16 = cD6.getItemType();
        java.lang.Class<?> wildcardClass17 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4145 + "'", int9 == 4145);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4145, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4145, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LibraryItem [itemId=4145, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str11, "LibraryItem [itemId=4145, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD" + "'", str16, "CD");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.getBorrowerEmail();
        boolean boolean11 = cD6.isOverdue();
        boolean boolean12 = cD6.isRented();
        java.lang.String str13 = cD6.toString();
        java.lang.Class<?> wildcardClass14 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4154 + "'", int9 == 4154);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LibraryItem [itemId=4154, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str13, "LibraryItem [itemId=4154, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        items.CD cD6 = new items.CD("LibraryItem [itemId=291, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=559, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=3646, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2521, itemType=CD, location=LibraryItem [itemId=516, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=LibraryItem [itemId=610, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        items.CD cD6 = new items.CD("LibraryItem [itemId=397, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1068, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=452, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=69, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getArtist();
        items.CD cD19 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str20 = cD19.getLocation();
        java.lang.String str21 = cD19.getLocation();
        items.CD cD28 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD35 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str36 = cD35.getLocation();
        java.lang.String str37 = cD35.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray45 = new items.LibraryItem[] { cD28, cD35, cD44 };
        java.util.ArrayList<items.LibraryItem> libraryItemList46 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList46, libraryItemArray45);
        boolean boolean48 = cD19.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        boolean boolean49 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList46);
        java.lang.String str50 = cD6.getPrice();
        double double51 = cD6.calculateOverduePenalty();
        java.lang.String str52 = cD6.getArtist();
        java.lang.String str53 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4180 + "'", int9 == 4180);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "CD" + "'", str53, "CD");
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        java.lang.String str89 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4185, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4185, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.getAuthor();
        int int10 = cD6.getItemId();
        java.lang.String str11 = cD6.getBorrowerEmail();
        items.CD cD18 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str19 = cD18.getLocation();
        java.lang.String str20 = cD18.toString();
        java.lang.String str21 = cD18.getBorrowerEmail();
        java.lang.String str22 = cD18.getBorrowerEmail();
        items.CD cD29 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str30 = cD29.getLocation();
        java.lang.String str31 = cD29.getLocation();
        items.CD cD38 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD45 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str46 = cD45.getLocation();
        java.lang.String str47 = cD45.getLocation();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray55 = new items.LibraryItem[] { cD38, cD45, cD54 };
        java.util.ArrayList<items.LibraryItem> libraryItemList56 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList56, libraryItemArray55);
        boolean boolean58 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList56);
        boolean boolean59 = cD29.isOverdue();
        items.CD cD66 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str67 = cD66.getLocation();
        java.lang.String str68 = cD66.getLocation();
        items.CD cD75 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD82 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str83 = cD82.getLocation();
        java.lang.String str84 = cD82.getLocation();
        items.CD cD91 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray92 = new items.LibraryItem[] { cD75, cD82, cD91 };
        java.util.ArrayList<items.LibraryItem> libraryItemList93 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList93, libraryItemArray92);
        boolean boolean95 = cD66.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean96 = cD29.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean97 = cD18.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean98 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList93);
        boolean boolean99 = cD6.isPurchasable();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4194 + "'", int10 == 4194);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LibraryItem [itemId=4195, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str20, "LibraryItem [itemId=4195, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=3331, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=2151, itemType=CD, location=hi!, purchasable=true, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3704, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        boolean boolean10 = cD6.isRented();
        java.lang.String str11 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        cD6.setBorrowerEmail("LibraryItem [itemId=1452, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.time.LocalDate localDate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate17, 1018, "LibraryItem [itemId=907, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4210 + "'", int9 == 4210);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        java.lang.String str12 = cD6.getTitle();
        double double13 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4211 + "'", int9 == 4211);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4211, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4211, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str16 = cD6.getDetails();
        java.lang.String str17 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str16, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        items.CD cD6 = new items.CD("LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1364, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=1031, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getArtist();
        java.lang.String str9 = cD6.getLocation();
        java.lang.String str10 = cD6.getAuthor();
        java.lang.Class<?> wildcardClass11 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=719, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=1362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        java.lang.String str36 = cD6.getDetails();
        int int37 = cD6.getItemId();
        cD6.setLocation("LibraryItem [itemId=4026, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str36, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4231 + "'", int37 == 4231);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD60 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str61 = cD60.getLocation();
        java.lang.String str62 = cD60.getLocation();
        items.CD cD69 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray70 = new items.LibraryItem[] { cD53, cD60, cD69 };
        java.util.ArrayList<items.LibraryItem> libraryItemList71 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList71, libraryItemArray70);
        boolean boolean73 = cD44.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList71);
        boolean boolean74 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList71);
        java.lang.String str75 = cD6.getPrice();
        java.time.LocalDate localDate76 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate76, 0, "LibraryItem [itemId=1950, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2622, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=484, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=2745, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=3125, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.toString();
        cD6.setLocation("LibraryItem [itemId=327, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str15 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4247, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4247, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4247 + "'", int11 == 4247);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "LibraryItem [itemId=4247, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str12, "LibraryItem [itemId=4247, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        items.CD cD6 = new items.CD("LibraryItem [itemId=576, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=544, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=604, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=404, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setIsPurchasable(false);
        boolean boolean9 = cD6.isOverdue();
        java.time.LocalDate localDate10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate10, (int) (short) 100, "LibraryItem [itemId=95, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        java.lang.String str86 = cD6.getLocation();
        java.lang.String str87 = cD6.getBorrowerEmail();
        java.lang.String str88 = cD6.getLocation();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4250, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4250, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        int int11 = cD6.getItemId();
        java.lang.String str12 = cD6.getLocation();
        java.lang.String str13 = cD6.getLocation();
        java.time.LocalDate localDate14 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate14, 1823, "LibraryItem [itemId=1718, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4259 + "'", int11 == 4259);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        items.CD cD6 = new items.CD("", "LibraryItem [itemId=9, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "", "LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getDetails();
        java.time.LocalDate localDate8 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate8, 4247, "LibraryItem [itemId=395, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true" + "'", str7, "CD:  by LibraryItem [itemId=16, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: . Purchasable: true");
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray41 = new items.LibraryItem[] { cD24, cD31, cD40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList42 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList42, libraryItemArray41);
        boolean boolean44 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList42);
        boolean boolean45 = cD15.isOverdue();
        items.CD cD52 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str53 = cD52.getLocation();
        java.lang.String str54 = cD52.getLocation();
        items.CD cD61 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD68 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str69 = cD68.getLocation();
        java.lang.String str70 = cD68.getLocation();
        items.CD cD77 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray78 = new items.LibraryItem[] { cD61, cD68, cD77 };
        java.util.ArrayList<items.LibraryItem> libraryItemList79 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList79, libraryItemArray78);
        boolean boolean81 = cD52.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean82 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList79);
        boolean boolean83 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList79);
        cD6.returnItem();
        java.lang.String str85 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str85, "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        items.CD cD6 = new items.CD("LibraryItem [itemId=238, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=123, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=359, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=298, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getPrice();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=298, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=298, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getAuthor();
        java.lang.String str92 = cD6.getLocation();
        java.lang.String str93 = cD6.getAuthor();
        cD6.returnItem();
        double double95 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4272, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4272, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str92, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean86 = cD6.isOverdue();
        cD6.setIsPurchasable(false);
        cD6.setLocation("LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str91 = cD6.getAuthor();
        java.lang.String str92 = cD6.getLocation();
        java.lang.String str93 = cD6.getAuthor();
        cD6.setBorrowerEmail("LibraryItem [itemId=2142, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str96 = cD6.getPrice();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4281, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4281, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str92, "LibraryItem [itemId=149, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "hi!" + "'", str96, "hi!");
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        boolean boolean8 = cD6.isPurchasable();
        java.lang.String str9 = cD6.getArtist();
        boolean boolean10 = cD6.isPurchasable();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setLocation("");
        java.lang.String str14 = cD6.getAuthor();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4302 + "'", int7 == 4302);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getDetails();
        cD6.setIsPurchasable(false);
        items.CD cD21 = new items.CD("CD", "LibraryItem [itemId=1232, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1279, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "");
        items.CD cD28 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str29 = cD28.getLocation();
        java.lang.String str30 = cD28.getLocation();
        items.CD cD37 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD44 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str45 = cD44.getLocation();
        java.lang.String str46 = cD44.getLocation();
        items.CD cD53 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray54 = new items.LibraryItem[] { cD37, cD44, cD53 };
        java.util.ArrayList<items.LibraryItem> libraryItemList55 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList55, libraryItemArray54);
        boolean boolean57 = cD28.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean58 = cD21.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        boolean boolean59 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList55);
        java.lang.Class<?> wildcardClass60 = libraryItemList55.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4303 + "'", int9 == 4303);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        double double7 = cD6.calculateOverduePenalty();
        java.lang.String str8 = cD6.getItemType();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CD" + "'", str8, "CD");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        items.CD cD6 = new items.CD("hi!", "LibraryItem [itemId=225, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, false, "LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setLocation("LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str9 = cD6.toString();
        cD6.returnItem();
        cD6.setIsPurchasable(false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "LibraryItem [itemId=4313, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str9, "LibraryItem [itemId=4313, itemType=CD, location=LibraryItem [itemId=364, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=true, title=LibraryItem [itemId=44, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        cD6.setBorrowerEmail("CD");
        java.lang.String str12 = cD6.getDetails();
        cD6.setIsPurchasable(false);
        java.lang.String str15 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str17 = cD6.toString();
        java.lang.String str18 = cD6.getDetails();
        boolean boolean19 = cD6.isPurchasable();
        cD6.setBorrowerEmail("LibraryItem [itemId=623, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4322 + "'", int9 == 4322);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str12, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str15, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LibraryItem [itemId=4322, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str17, "LibraryItem [itemId=4322, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str18, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        items.CD cD6 = new items.CD("", "", false, true, "", "hi!");
        int int7 = cD6.getItemId();
        java.lang.Class<?> wildcardClass8 = cD6.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4337 + "'", int7 == 4337);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getLocation();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getTitle();
        cD6.returnItem();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4338, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4338, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=144, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=2239, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        double double18 = cD6.calculateOverduePenalty();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getDetails();
        java.lang.String str14 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str13, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        items.CD cD6 = new items.CD("LibraryItem [itemId=2753, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=929, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", true, true, "LibraryItem [itemId=599, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        int int9 = cD6.getItemId();
        java.lang.String str10 = cD6.toString();
        java.lang.String str11 = cD6.getDetails();
        cD6.setIsPurchasable(false);
        java.lang.String str14 = cD6.getItemType();
        java.time.LocalDate localDate15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate15, 2781, "LibraryItem [itemId=1391, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4344 + "'", int9 == 4344);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LibraryItem [itemId=4344, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str10, "LibraryItem [itemId=4344, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str11, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD" + "'", str14, "CD");
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        boolean boolean11 = cD6.isPurchasable();
        cD6.setBorrowerEmail("CD");
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.toString();
        cD6.setIsPurchasable(true);
        items.CD cD24 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str25 = cD24.getLocation();
        java.lang.String str26 = cD24.getLocation();
        items.CD cD33 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str41 = cD40.getLocation();
        java.lang.String str42 = cD40.getLocation();
        items.CD cD49 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray50 = new items.LibraryItem[] { cD33, cD40, cD49 };
        java.util.ArrayList<items.LibraryItem> libraryItemList51 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList51, libraryItemArray50);
        boolean boolean53 = cD24.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList51);
        boolean boolean54 = cD24.isOverdue();
        items.CD cD61 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str62 = cD61.getLocation();
        java.lang.String str63 = cD61.getLocation();
        items.CD cD70 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD77 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str78 = cD77.getLocation();
        java.lang.String str79 = cD77.getLocation();
        items.CD cD86 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray87 = new items.LibraryItem[] { cD70, cD77, cD86 };
        java.util.ArrayList<items.LibraryItem> libraryItemList88 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList88, libraryItemArray87);
        boolean boolean90 = cD61.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean91 = cD24.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList88);
        boolean boolean92 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList88);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LibraryItem [itemId=4352, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str15, "LibraryItem [itemId=4352, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getPrice();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD17.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD26 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str27 = cD26.getLocation();
        java.lang.String str28 = cD26.getLocation();
        items.CD cD35 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str43 = cD42.getLocation();
        java.lang.String str44 = cD42.getLocation();
        items.CD cD51 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray52 = new items.LibraryItem[] { cD35, cD42, cD51 };
        java.util.ArrayList<items.LibraryItem> libraryItemList53 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList53, libraryItemArray52);
        boolean boolean55 = cD26.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean56 = cD17.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean57 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList53);
        boolean boolean58 = cD6.isRented();
        java.lang.String str59 = cD6.getAuthor();
        double double60 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=2408, itemType=CD, location=, purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4362, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        java.lang.String str11 = cD6.getBorrowerEmail();
        java.lang.String str12 = cD6.getBorrowerEmail();
        cD6.returnItem();
        java.lang.String str14 = cD6.getDetails();
        java.lang.String str15 = cD6.getItemType();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4368, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4368, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CD" + "'", str15, "CD");
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        cD6.setBorrowerEmail("LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str14 = cD6.getDetails();
        cD6.returnItem();
        java.lang.String str16 = cD6.getLocation();
        cD6.setBorrowerEmail("LibraryItem [itemId=1487, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str19 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str14, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "LibraryItem [itemId=1487, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str19, "LibraryItem [itemId=1487, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        items.CD cD6 = new items.CD("LibraryItem [itemId=240, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=2819, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=2035, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=440, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean7 = cD6.isRented();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        cD6.setBorrowerEmail("LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        items.CD cD15 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str16 = cD15.getLocation();
        java.lang.String str17 = cD15.getLocation();
        items.CD cD24 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str32 = cD31.getLocation();
        java.lang.String str33 = cD31.getLocation();
        items.CD cD40 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray41 = new items.LibraryItem[] { cD24, cD31, cD40 };
        java.util.ArrayList<items.LibraryItem> libraryItemList42 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList42, libraryItemArray41);
        boolean boolean44 = cD15.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList42);
        boolean boolean45 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList42);
        java.lang.String str46 = cD6.getBorrowerEmail();
        java.lang.String str47 = cD6.getTitle();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str46, "LibraryItem [itemId=82, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.toString();
        java.lang.String str9 = cD6.getBorrowerEmail();
        java.lang.String str10 = cD6.getBorrowerEmail();
        items.CD cD17 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str18 = cD17.getLocation();
        java.lang.String str19 = cD17.getLocation();
        items.CD cD26 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD33 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str34 = cD33.getLocation();
        java.lang.String str35 = cD33.getLocation();
        items.CD cD42 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray43 = new items.LibraryItem[] { cD26, cD33, cD42 };
        java.util.ArrayList<items.LibraryItem> libraryItemList44 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList44, libraryItemArray43);
        boolean boolean46 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList44);
        boolean boolean47 = cD17.isOverdue();
        items.CD cD54 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str55 = cD54.getLocation();
        java.lang.String str56 = cD54.getLocation();
        items.CD cD63 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD70 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str71 = cD70.getLocation();
        java.lang.String str72 = cD70.getLocation();
        items.CD cD79 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray80 = new items.LibraryItem[] { cD63, cD70, cD79 };
        java.util.ArrayList<items.LibraryItem> libraryItemList81 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList81, libraryItemArray80);
        boolean boolean83 = cD54.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean84 = cD17.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList81);
        boolean boolean85 = cD6.hasExceededBorrowingLimit((java.util.List<items.LibraryItem>) libraryItemList81);
        cD6.returnItem();
        cD6.setIsPurchasable(true);
        double double89 = cD6.calculateOverduePenalty();
        java.time.LocalDate localDate90 = null;
        // The following exception was thrown during execution in test generation
        try {
            cD6.rentItem(localDate90, 1607, "LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.time.LocalDate.plusDays(long)\" because \"startDate\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "LibraryItem [itemId=4403, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str8, "LibraryItem [itemId=4403, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        items.CD cD6 = new items.CD("LibraryItem [itemId=398, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=196, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=228, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getArtist();
        cD6.setBorrowerEmail("LibraryItem [itemId=577, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean10 = cD6.isRented();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str7, "LibraryItem [itemId=204, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        items.CD cD6 = new items.CD("LibraryItem [itemId=3541, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=506, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=1705, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1628, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.util.List<items.LibraryItem> libraryItemList7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = cD6.hasBorrowingPrivileges(libraryItemList7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.iterator()\" because \"borrowedItems\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        double double11 = cD6.calculateOverduePenalty();
        java.lang.String str12 = cD6.getArtist();
        java.lang.String str13 = cD6.getTitle();
        cD6.setBorrowerEmail("LibraryItem [itemId=144, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        cD6.setBorrowerEmail("LibraryItem [itemId=2239, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str18 = cD6.toString();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "LibraryItem [itemId=4415, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]" + "'", str18, "LibraryItem [itemId=4415, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        items.CD cD6 = new items.CD("CD: LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null] by LibraryItem [itemId=12, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Location: LibraryItem [itemId=1989, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]. Purchasable: false", "LibraryItem [itemId=2830, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, false, "LibraryItem [itemId=1089, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "");
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        boolean boolean9 = cD6.isPurchasable();
        boolean boolean10 = cD6.isOverdue();
        java.lang.String str11 = cD6.getArtist();
        cD6.setLocation("LibraryItem [itemId=31, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        boolean boolean14 = cD6.isOverdue();
        boolean boolean15 = cD6.isRented();
        java.lang.String str16 = cD6.getAuthor();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        items.CD cD6 = new items.CD("LibraryItem [itemId=1801, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1137, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", false, true, "LibraryItem [itemId=928, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]", "LibraryItem [itemId=1123, itemType=CD, location=LibraryItem [itemId=22, itemType=CD, location=hi!, purchasable=false, title=hi!, isRented=false, rentalDate=null, dueDate=null, rentedBy=null], purchasable=false, title=, isRented=false, rentalDate=null, dueDate=null, rentedBy=null]");
        java.lang.String str7 = cD6.getBorrowerEmail();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        items.CD cD6 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str7 = cD6.getLocation();
        java.lang.String str8 = cD6.getLocation();
        items.CD cD15 = new items.CD("", "", false, true, "", "hi!");
        items.CD cD22 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        java.lang.String str23 = cD22.getLocation();
        java.lang.String str24 = cD22.getLocation();
        items.CD cD31 = new items.CD("hi!", "hi!", false, true, "hi!", "hi!");
        items.LibraryItem[] libraryItemArray32 = new items.LibraryItem[] { cD15, cD22, cD31 };
        java.util.ArrayList<items.LibraryItem> libraryItemList33 = new java.util.ArrayList<items.LibraryItem>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<items.LibraryItem>) libraryItemList33, libraryItemArray32);
        boolean boolean35 = cD6.hasBorrowingPrivileges((java.util.List<items.LibraryItem>) libraryItemList33);
        boolean boolean36 = cD6.isOverdue();
        java.lang.String str37 = cD6.getLocation();
        java.lang.String str38 = cD6.getLocation();
        boolean boolean39 = cD6.isRented();
        java.lang.String str40 = cD6.getDetails();
        java.lang.Class<?> wildcardClass41 = cD6.getClass();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(libraryItemArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CD: hi! by hi!. Location: hi!. Purchasable: false" + "'", str40, "CD: hi! by hi!. Location: hi!. Purchasable: false");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }
}
